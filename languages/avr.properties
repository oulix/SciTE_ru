# Define SciTE settings for Atmel AVR Assembler. 
# http://www.atmel.com/
# Version:    0.1
# Author:     Andy Shevchenko <ur4ltz at gmail dot com>
# Updated:    31.10.08 03:14

file.patterns.avr=*.a90;*.avr;*.inc
filter.avr=Atmel AVR Assembler (a90 avr inc)|$(file.patterns.avr)|

lexer.$(file.patterns.avr)=asm
lexer.*.avr=asm

# indent.size.*.avr=8
# tab.size.*.avr=8
# use.tabs.*.avr=0

# keywords.$(file.patterns.avr).ignorecase=0

arithmetic_and_logic_instruct=add adc adiw sub subi sbc sbci and andi or ori eor com \
	neg sbr cbr inc dec tst clr ser sbiw mul muls mulsu fmul fmuls fmulsu

branch_instruct=rjmp ijmp eijmp jmp rcall icall eicall call ret reti cpse cp \
	cpc cpi sbrc sbrs sbic sbis brbc brbs breq brne brcs brcc brsh brlo brmi brpl \
	brge brlt brhs brhc brts brtc brvs brvc brie brid

data_instruct=mov movw ldi lds ld ldd sts st lpm elpm spm espm in out push pop

bit_instruct=lsl lsr rol ror asr swap bset bclr sbi cbi bst bld sec clc sen cln sez clz \
	sei cli ses cln sev clv set clt seh clh nop sleep wdr break

functions_avrasm=low high byte2 byte3 byte4 lwrd hwrd page exp2 log2

functions_avrasm2=int frac q7 q15 abs defined

register_avr=acbg aci acic acie acis0 acis1 aciaddr acme aco acsr adccaddr adch adcl \
	adcsra aden adfr adie adif adlar admux adps0 adps1 adps2 adsc as2 asb asre \
	assr blbset bootstart borf chr9 com00 com01 com1a0 com1a1 com1b0 com1b1 \
	com20 com21 cpha cpol cs00 cs01 cs02 cs10 cs11 cs12 cs20 cs21 cs22 ctc0 \
	ctc1 ctc10 ctc11 ctc2 dda0 dda1 dda2 dda3 dda4 dda5 dda6 dda7 ddb0 ddb1 \
	ddb2 ddb3 ddb4 ddb5 ddb6 ddb7 ddc0 ddc1 ddc2 ddc3 ddc4 ddc5 ddc6 ddc7 ddd0 \
	ddd1 ddd2 ddd3 ddd4 ddd5 ddd6 ddd7 ddra ddrb ddrc ddrd dor dord e2end eearh \
	eearl eecr eedr eemwe eere eerie eewe eih erdyaddr extrf fe flashend foc0 \
	foc1a foc1b foc2 gicr gifr gimsk ices1 icf1 icnc1 icp1addr icr1h icr1l int0 int0addr \
	int1 int1addr int2 int2addr intf0 intf1 intf2 isc00 isc01 isc10 isc11 isc2 \
	ivce ivsel jtd jtrf largebootstart mcucr mcucsr mpcm mstr mux0 mux1 mux2 \
	mux3 mux4 oc0addr oc1aaddr oc1baddr oc2addr ocdr ocf0 ocf1a ocf1b ocf2 \
	ocie0 ocie1a ocie1b ocie2 ocr0 ocr1ah ocr1al ocr1bh ocr1bl ocr2 ocr2ub \
	osccal ovf0addr ovf1addr ovf2addr pa0 pa1 pa2 pa3 pa4 pa5 pa6 pa7 pagesize \
	pb0 pb1 pb2 pb3 pb4 pb5 pb6 pb7 pc0 pc1 pc2 pc3 pc4 pc5 pc6 pc7 pd0 pd1 \
	pd2 pd3 pd4 pd5 pd6 pd7 pe pgers pgwrt pina pina0 pina1 pina2 pina3 pina4 \
	pina5 pina6 pina7 pinb pinb0 pinb1 pinb2 pinb3 pinb4 pinb5 pinb6 pinb7 \
	pinc pinc0 pinc1 pinc2 pinc3 pinc4 pinc5 pinc6 pinc7 pind pind0 pind1 pind2 \
	pind3 pind4 pind5 pind6 pind7 porf porta portb portc portd psr10 psr2 pud \
	pwm0 pwm10 pwm11 pwm2 ramend refs0 refs1 rpda rpdb rpdc rpdd rxb8 rxc rxcie \
	rxen se secondbootstart sfior sm0 sm1 sm2 smallbootstart spcr spdr spe \
	sph spi2x spie spif spiaddr spl spmcr spmen spmie spmraddr spr0 spr1 spsr \
	sreg tccr0 tccr1a tccr1b tccr2 tcn2ub tcnt0 tcnt1h tcnt1l tcnt2 tcr2ub \
	thirdbootstart ticie1 tifr timsk toie0 toie1 toie2 tov0 tov1 tov2 twar \
	twbr twcr twdr twea twen twgce twie twint twi_tst twsiaddr twsr twsta twsto \
	twwc txb8 txc txcie txen u2x ubrrh ubrrl ucpol ucsra ucsrb ucsrc ucsz0 \
	ucsz1 ucsz2 udr udre udreaddr udrie umsel upm0 upm1 ursel urxcaddr usbs \
	utxcaddr wcol wde wdp0 wdp1 wdp2 wdrf wdtcr wdtoe x y z xh xl yh yl zh zl \
	r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 \
	r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31

directive_avrasm=.byte .cseg .csegsize .db .def .device .dseg .dw .endm .endmacro .equ .eseg \
	.exit .include .list .listmac .macro .nolist .org .set

directive_avrasm2=.else .elif .endif .error .if .ifdef .ifndef .message \
	.dd .dq .undef .warning .overlap .nooverlap

keywords.$(file.patterns.avr)= $(branch_instruct) $(data_instruct)
keywords2.$(file.patterns.avr)=$(bit_instruct)
keywords3.$(file.patterns.avr)=$(register_avr)
keywords4.$(file.patterns.avr)=$(directive_avrasm) $(directive_avrasm2)
keywords5.$(file.patterns.avr)=$(arithmetic_and_logic_instruct)
keywords6.$(file.patterns.avr)=$(functions_avrasm) $(functions_avrasm2)

comment.block.asm=;

# Assembler Styles
style.avr.32=
# Default
style.avr.0=
# Comment
style.avr.1=$(colour.comment),$(font.comment)
# Number
style.avr.2=$(colour.number)
# String
style.avr.3=$(colour.string)
# Operator
style.avr.4=$(colour.operator),bold
# Identifier
style.avr.5=
# CPU instruction
style.avr.6=$(colour.keyword),bold
#fore:#0000ff
# FPU instruction
style.avr.7=fore:#0000ff
# Register
style.avr.8=fore:#46aa03,bold
# assembler Directive
style.avr.9=fore:#0000ff
# assembler Directive Operand
style.avr.10=fore:#0000ff
# Comment block (GNU as /*...*/ syntax, unimplemented)
style.avr.11=$(colour.code.comment.box),$(font.code.comment.box)
# Character/String (single quote) (also character prefix in GNU as)
style.avr.12=$(colour.char)
# End of line where string is not closed
style.avr.13=fore:#000000,back:#E0C0E0,eolfilled
# Extended instructions
style.avr.14=fore:#B00040

# statement.indent.$(file.patterns.avr)=9 .if
# statement.end.$(file.patterns.avr)=9 .endif
