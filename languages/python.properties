# Define SciTE settings for Python files.

file.patterns.py=*.py;*.pyw
file.patterns.scons=SConstruct;SConscript

shbang.python=py

filter.python=Python (py pyw)|$(file.patterns.py)|

lexer.$(file.patterns.py)=python
lexer.$(file.patterns.scons)=python

keywordclass.python2=and as assert break class continue def del elif \
else except exec finally for from global if import in is lambda not \
or pass print raise return try while with yield

keywordclass.python3=False None True and as assert break class continue \
def del elif else except finally for from global if import in is lambda \
nonlocal not or pass raise return try while with yield

keywordclass.python=$(keywordclass.python2)

# Extra keywords for cython
keywordclass.cython=cdef cimport cpdef

keywords.$(file.patterns.py)=$(keywordclass.python) $(keywordclass.cython)
keywords.$(file.patterns.scons)=$(keywordclass.python)

# If you uncomment the 3 lines below,
# and put some words after "keywordclass2.python=",
# those words will be styled by style.python.14

#keywordclass2.python=
#keywords2.$(file.patterns.py)=$(keywordclass2.python)
#keywords2.$(file.patterns.scons)=$(keywordclass2.python)

#~ statement.indent.$(file.patterns.py)=10 :
statement.indent.$(file.patterns.py)=5 class def elif else except finally \
for if try while with

statement.lookback.$(file.patterns.py)=0
block.start.$(file.patterns.py)=
block.end.$(file.patterns.py)=

view.indentation.examine.*.py=2

tab.timmy.whinge.level=1

#fold.quotes.python=1

comment.block.python=#

indent.python.colon=1

# Python styles
# White space
style.python.0=$(colour.whitespace)
# Comment
style.python.1=fore:#007F00,$(font.comment)
# Number
style.python.2=fore:#007F7F
# String
style.python.3=fore:#7F007F
# Single quoted string
style.python.4=fore:#7F007F
# Keyword
style.python.5=fore:#00007F,bold
# Triple quotes
style.python.6=fore:#7F0000
# Triple double quotes
style.python.7=fore:#7F0000
# Class name definition
style.python.8=fore:#0000FF,bold
# Function or method name definition
style.python.9=fore:#007F7F,bold
# Operators
style.python.10=bold
# Identifiers
style.python.11=
# Comment-blocks
style.python.12=fore:#7F7F7F
# End of line where string is not closed
style.python.13=back:#E0C0E0,eolfilled
# Highlighted identifiers
style.python.14=fore:#407090
# Decorators
style.python.15=fore:#805000
# Matched Operators
style.python.34=fore:#0000FF,bold
style.python.35=fore:#FF0000,bold
# Braces are only matched in operator style
braces.python.style=10

if PLAT_WIN
# Команда меню - Выполнить (F5)
	command.go.*.py=cmd.exe /k CD /d "$(FileDir)" & c:\Python27\python.exe -u "$(FilePath)" < con: > con: 2>&1
	command.go.subsystem.*.py=2
	command.go.*.pyw=c:\Python27\pythonw.exe -u "$(FilePath)"
	command.go.subsystem.*.pyw=1
# Команда меню - Собрать (F7)
	command.build.*.py=c:\Python27\python.exe -u "$(FilePath)" < con: > con:
	command.build.SConscript=scons.bat --up .
	command.build.SConstruct=scons.bat .

if PLAT_GTK
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .

if PLAT_MAC
	command.go.*.py=python -u "$(FileNameExt)"
	command.build.SConscript=scons --up .
	command.build.SConstruct=scons .

command.name.1.*.py=Syntax Check
command.1.*.py=python -c "import py_compile; py_compile.compile(r'$(FilePath)')"

# =========================================================
# Подключение файла сокращений
#abbreviations.$(file.patterns.py)=$(SciteDefaultHome)\abbrev\py.abbrev

# Подключение файла автодополнения и всплывающих подсказок по синтаксису
api.$(file.patterns.py)=$(SciteDefaultHome)\api\python.api

# Символы, после ввода которых, возникает список автодополнения
autocomplete.python.start.characters=.

# Символы, после ввода которых возникает подсказка
calltip.python.parameters.start= (
# Символы - разделители параметров
calltip.python.parameters.separators=,

# Символы, из которых строятся операторы языка (используется для автодополнения после точки)
#~ word.characters.$(file.patterns.py)=$(chars.alpha)$(chars.numeric)_-.

# Печать заданного символа вызывает автодополнение с его завершением
#~ autocomplete.python.fillups=(
