$AUTH_TYPE
$DOCUMENT_ROOT
$GATEWAY_INTERFACE
$GLOBALS
$HTTP_ACCEPT
$HTTP_ACCEPT_CHARSET
$HTTP_ACCEPT_ENCODING
$HTTP_ACCEPT_LANGUAGE
$HTTP_CONNECTION
$HTTP_HOST
$HTTP_REFERER
$HTTP_USER_AGENT
$PATH_TRANSLATED
$PHP_AUTH_PW
$PHP_AUTH_USER
$PHP_SELF
$QUERY_STRING
$REMOTE_ADDR
$REMOTE_HOST
$REMOTE_PORT
$REQUEST_METHOD
$REQUEST_URI
$SCRIPT_FILENAME
$SCRIPT_NAME
$SERVER_ADMIN
$SERVER_NAME
$SERVER_PORT
$SERVER_PROTOCOL
$SERVER_SIGNATURE
$SERVER_SOFTWARE
$_COOKIE
$_ENV
$_FILES
$_GET
$_POST
$_REQUEST
$_SERVER
$_SESSION
$request->allowed([int allowed])  
$request->args([string new_args])  
$request->assbackwards()  
$request->boundary()  
$request->bytes_sent()  
$request->chunked()  
$request->content_encoding([string new_encoding])  
$request->content_length([int new_content_length])  
$request->content_type([string new_type])  
$request->filename([string new_filename])  
$request->handler([string new_handler])  
$request->header_only()  
$request->hostname()  
$request->method()  
$request->method_number([int method_number])  
$request->mtime()  
$request->no_cache()  
$request->no_local_copy()  
$request->path_info([string new_path_info])  
$request->proto_num()  
$request->protocol()  
$request->proxyreq([int new_proxyreq])  
$request->read_body()  
$request->remaining()  
$request->request_time()  
$request->status([int new_status])  
$request->status_line([string new_status_line])  
$request->the_request()  
$request->unparsed_uri([string new_unparsed_uri])  
$request->uri([string new_uri])  
* swfbutton_addASound(SWFSound sound, int flags)  associates a sound with a button transition  	NOTE: the transitions are all wrong _UP, _OVER, _DOWN _HIT   
*swffont_getShape(code)  Returns the glyph shape of a char as a text string  
ArrayIterator::current()  Return current array entry  
ArrayIterator::hasMore()  Check whether array contains more entries  
ArrayIterator::key()  Return current array key  
ArrayIterator::next()  Move to next entry  
ArrayIterator::rewind()  Rewind array back to the start  
ArrayObject::__construct(array|object ar = array())  proto void ArrayIterator::__construct(array|object ar = array())   Cronstructs a new array iterator from a path.  
ArrayObject::getIterator()  Create a new iterator from a ArrayObject instance  
DirectoryIterator::__construct(string path)  Cronstructs a new dir iterator from a path.  
DirectoryIterator::current()  Return this (needed for Iterator interface)  
DirectoryIterator::fileATime()  Get last access time of file  
DirectoryIterator::fileCTime()  Get inode modification time of file  
DirectoryIterator::fileGroup()  Get file group  
DirectoryIterator::fileInode()  Get file inode  
DirectoryIterator::fileMTime()  Get last modification time of file  
DirectoryIterator::fileOwner()  Get file owner  
DirectoryIterator::filePerms()  Get file permissions  
DirectoryIterator::fileSize()  Get file size  
DirectoryIterator::fileType()  Get file type  
DirectoryIterator::getChildren()  Returns an iterator fo rthe current entry if it is a directory  
DirectoryIterator::getFilename()  Return filename of current dir entry  
DirectoryIterator::getPath()  Return directory path  
DirectoryIterator::getPathname()  Return path and filename of current dir entry  
DirectoryIterator::hasMore()  Check whether dir contains more entries  
DirectoryIterator::isDir()  Returns true if file is directory  
DirectoryIterator::isDot()  Returns true if current entry is '.' or  '..'  
DirectoryIterator::isExecutable()  Returns true if file is executable  
DirectoryIterator::isFile()  Returns true if file is a regular file  
DirectoryIterator::isLink()  Returns true if file is symbolic link  
DirectoryIterator::isReadable()  Returns true if file can be read  
DirectoryIterator::isWritable()  Returns true if file can be written  
DirectoryIterator::key()  Return current dir entry  
DirectoryIterator::next()  Move to next entry  
DirectoryIterator::rewind()  Rewind dir back to the start  
RecursiveDirectoryIterator::hasChildren([bool $allow_links = false])  Returns whether current entry is a directory and not '.' or '..'  
RecursiveDirectoryIterator::key()  Return path and filename of current dir entry  
RecursiveDirectoryIterator::next()  Move to next entry  
RecursiveDirectoryIterator::rewind()  Rewind dir back to the start  
Reflection_Class Reflection_Class::getParentClass()  Returns the class' parent class, or, if none exists, FALSE  
Reflection_Class Reflection_Method::getDeclaringClass()  Get the declaring class  
Reflection_Class Reflection_Parameter::getClass()  Returns this parameters's class hint or NULL if there is none  
Reflection_Class Reflection_Property::getDeclaringClass()  Get the declaring class  
Reflection_Class::__construct(mixed argument) throws Exception  Constructor. Takes a string or an instance as an argument  
Reflection_Class[] Reflection_Class::getInterfaces()  Returns an array of interfaces this class implements  
Reflection_Extension::__construct(string name)  Constructor. Throws an Exception in case the given extension does not exist  
Reflection_Function::__construct(string name)  Constructor. Throws an Exception in case the given function does not exist  
Reflection_Function[] Reflection_Extension::getFunctions()  Returns an array of this extension's fuctions  
Reflection_Method Reflection_Class::getConstructor()  Returns the class' constructor if there is one, NULL otherwise  
Reflection_Method Reflection_Class::getMethod(string name)  Returns the class' method specified by it's name  
Reflection_Method::__construct(mixed class, string name)  Constructor. Throws an Exception in case the given method does not exist  
Reflection_Method[] Reflection_Class::getMethods()  Returns an array of this class' methods  
Reflection_Object::__construct(mixed argument) throws Exception  Constructor. Takes an instance as an argument  
Reflection_Parameter::__construct(mixed function, mixed parameter)  Constructor. Throws an Exception in case the given method does not exist  
Reflection_Parameter[] Reflection_Function::getParameters()  Returns an array of parameter objects for this function  
Reflection_Property Reflection_Class::getProperty(string name)  Returns the class' property specified by it's name  
Reflection_Property::__construct(mixed class, string name)  Constructor. Throws an Exception in case the given property does not exist  
Reflection_Property[] Reflection_Class::getProperties()  Returns an array of this class' properties  
abs(int number)  Return the absolute value of the number  
acos(float number)  Return the arc cosine of the number in radians  
acosh(float number)  Returns the inverse hyperbolic cosine of the number, i.e. the value whose hyperbolic cosine is number  
addcslashes(string str, string charlist)  Escapes all chars mentioned in charlist with backslash. It creates octal representations if asked to backslash characters with 8th bit set or with ASCII<32 (except '\n', '\r', '\t' etc...)  
addslashes(string str)  Escapes single quote, double quotes and backslash characters in a string with backslashes  
apache_child_terminate(void)  Terminate apache process after this request  
apache_get_modules(void)  Get a list of loaded Apache modules  
apache_get_version(void)  Fetch Apache version  
apache_getenv(string variable [, bool walk_to_top])  Get an Apache subprocess_env variable  
apache_lookup_uri(string URI)  Perform a partial request of the given URI to obtain information about it  
apache_note(string note_name [, string note_value])  Get and set Apache request notes  
apache_request_auth_name()  
apache_request_auth_type()  
apache_request_discard_request_body()  
apache_request_err_headers_out([{string name|array list} [, string value [, bool replace = false]]])  * fetch all headers that go out in case of an error or a subrequest    
apache_request_headers(void)  Fetch all HTTP request headers  
apache_request_headers_in()  * fetch all incoming request headers    
apache_request_headers_out([{string name|array list} [, string value [, bool replace = false]]])  * fetch all outgoing request headers    
apache_request_is_initial_req()  
apache_request_log_error(string message, [long facility])  
apache_request_meets_conditions()  
apache_request_remote_host([int type])  
apache_request_run()  This is a wrapper for ap_sub_run_req and ap_destory_sub_req.  It takes       sub_request, runs it, destroys it, and returns it's status.   
apache_request_satisfies()  
apache_request_server_port()  
apache_request_set_etag()  
apache_request_set_last_modified()  
apache_request_some_auth_required()  
apache_request_sub_req_lookup_file(string file)  Returns sub-request for the specified file.  You would      need to run it yourself with run().   
apache_request_sub_req_lookup_uri(string uri)  Returns sub-request for the specified uri.  You would      need to run it yourself with run()   
apache_request_sub_req_method_uri(string method, string uri)  Returns sub-request for the specified file.  You would      need to run it yourself with run().   
apache_request_update_mtime([int dependency_mtime])  
apache_response_headers(void)  Fetch all HTTP response headers  
apache_setenv(string variable, string value [, bool walk_to_top])  Set an Apache subprocess_env variable  
Reflection_Class::getConstants() =array  Returns an associative array containing this class' constants and their values  
Reflection_Class::getDefaultProperties() =array  Returns an associative array containing copies of all default property values of the class  
Reflection_Class::getStaticProperties() =array  Returns an associative array containing all static property values of the class  
Reflection_Extension::getConstants() =array  Returns an associative array containing this extension's constants and their values  
Reflection_Extension::getINIEntries() =array  Returns an associative array containing this extension's INI entries and their values  
Reflection_Function::getStaticVariables() =array  Returns an associative array containing this function's static variables and their values  
array_change_key_case(array input [, int case=CASE_LOWER])  Retuns an array with all string keys lowercased [or uppercased]  
array_chunk(array input, int size [, bool preserve_keys])  Split array into chunks  
array_combine(array keys, array values)  Creates an array by using the elements of the first parameter as keys and the elements of the second as correspoding keys  
array_count_values(array input)  Return the value as key and the frequency of that value in input as value  
array_diff(array arr1, array arr2 [, array ...])  Returns the entries of arr1 that have values which are not present in any of the others arguments.  
array_diff_assoc(array arr1, array arr2 [, array ...])  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal  
array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Elements are compared by user supplied function.  
array_fill(int start_key, int num, mixed val)  Create an array containing num elements starting with index start_key each initialized to val  
array_filter(array input [, mixed callback])  Filters elements from the array via the callback.  
array_flip(array input)  Return array with key <-> value flipped  
array_intersect(array arr1, array arr2 [, array ...])  Returns the entries of arr1 that have values which are present in all the other arguments  
array_intersect_assoc(array arr1, array arr2 [, array ...])  Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check  
array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)  Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check and they are compared by using an user-supplied callback.  
array_key_exists(mixed key, array search)  Checks if the given key or index exists in the array  
array_keys(array input [, mixed search_value[, bool strict]])  Return just the keys from the input array, optionally only for the specified search_value  
array_map(mixed callback, array input1 [, array input2 ,...])  Applies the callback to the elements in given arrays.  
array_merge(array arr1, array arr2 [, array ...])  Merges elements from passed arrays into one array  
array_merge_recursive(array arr1, array arr2 [, array ...])  Recursively merges elements from passed arrays into one array  
array_multisort(array ar1 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]] [, array ar2 [, SORT_ASC|SORT_DESC [, SORT_REGULAR|SORT_NUMERIC|SORT_STRING]], ...])  Sort multiple arrays at once similar to how ORDER BY clause works in SQL  
array_pad(array input, int pad_size, mixed pad_value)  Returns a copy of input array padded with pad_value to size pad_size  
array_pop(array stack)  Pops an element off the end of the array  
array_push(array stack, mixed var [, mixed ...])  Pushes elements onto the end of the array  
array_rand(array input [, int num_req])  Return key/keys for random entry/entries in the array  
array_reduce(array input, mixed callback [, int initial])  Iteratively reduce the array to a single value via the callback.  
array_reverse(array input [, bool preserve keys])  Return input as a new array with the order of the entries reversed  
array_search(mixed needle, array haystack [, bool strict])  Searches the array for a given value and returns the corresponding key if successful  
array_shift(array stack)  Pops an element off the beginning of the array  
array_slice(array input, int offset [, int length])  Returns elements specified by offset and length  
array_splice(array input, int offset [, int length [, array replacement]])  Removes the elements designated by offset and length and replace them with supplied array  
array_sum(array input)  Returns the sum of the array entries  
array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)  Returns the entries of arr1 that have values which are not present in any of the others arguments. Elements are compared by user supplied function.  
array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys are compared by user supplied function.  
array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)  Returns the entries of arr1 that have values which are not present in any of the others arguments but do additional checks whether the keys are equal. Keys and elements are compared by user supplied functions.  
array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)  Returns the entries of arr1 that have values which are present in all the other arguments. Data is compared by using an user-supplied callback.  
array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)  Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Data is compared by using an user-supplied callback.  
array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)  Returns the entries of arr1 that have values which are present in all the other arguments. Keys are used to do more restrictive check. Both data and keys are compared by using user-supplied callbacks.  
array_unique(array input)  Removes duplicate values from array  
array_unshift(array stack, mixed var [, mixed ...])  Pushes elements onto the beginning of the array  
array_values(array input)  Return just the values from the input array  
array_walk(array input, string funcname [, mixed userdata])  Apply a user function to every member of an array  
array_walk_recursive(array input, string funcname [, mixed userdata])  Apply a user function recursively to every member of an array  
arsort(array array_arg [, int sort_flags])  Sort an array in reverse order and maintain index association  
filename])  
asin(float number)  Returns the arc sine of the number in radians  
asinh(float number)  Returns the inverse hyperbolic sine of the number, i.e. the value whose hyperbolic sine is number  
asort(array array_arg [, int sort_flags])  Sort an array and maintain index association  
assert(string|bool assertion)  Checks if assertion is false  
assert_options(int what [, mixed value])  Set/get the various assert flags  
atan(float number)  Returns the arc tangent of the number in radians  
atan2(float y, float x)  Returns the arc tangent of y/x, with the resulting quadrant determined by the signs of y and x  
atanh(float number)  Returns the inverse hyperbolic tangent of the number, i.e. the value whose hyperbolic tangent is number  
base64_decode(string str)  Decodes string using MIME base64 algorithm  
base64_encode(string str)  Encodes string using MIME base64 algorithm  
base_convert(string number, int frombase, int tobase)  Converts a number in a string from any base <= 36 to any base <= 36  
basename(string path [, string suffix])  Returns the filename component of the path  
bcadd(string left_operand, string right_operand [, int scale])  Returns the sum of two arbitrary precision numbers  
bccomp(string left_operand, string right_operand [, int scale])  Compares two arbitrary precision numbers  
bcdiv(string left_operand, string right_operand [, int scale])  Returns the quotient of two arbitrary precision numbers (division)  
bcmod(string left_operand, string right_operand)  Returns the modulus of the two arbitrary precision operands  
bcmul(string left_operand, string right_operand [, int scale])  Returns the multiplication of two arbitrary precision numbers  
bcpow(string x, string y [, int scale])  Returns the value of an arbitrary precision number raised to the power of another  
bcpowmod(string x, string y, string mod [, int scale])  Returns the value of an arbitrary precision number raised to the power of another reduced by a modulous  
bcscale(int scale)  Sets default scale parameter for all bc math functions  
bcsqrt(string operand [, int scale])  Returns the square root of an arbitray precision number  
bcsub(string left_operand, string right_operand [, int scale])  Returns the difference between two arbitrary precision numbers  
bin2hex(string data)  Converts the binary representation of data to hex  
bind_textdomain_codeset (string domain, string codeset)  Specify the character encoding in which the messages from the DOMAIN message catalog will be returned.  
bindec(string binary_number)  Returns the decimal equivalent of the binary number  
bindtextdomain(string domain_name, string dir)  Bind to the text domain domain_name, looking for translations in dir. Returns the current domain  
birdstep_autocommit(int index)  
birdstep_close(int id)  
birdstep_commit(int index)  
birdstep_connect(string server, string user, string pass)  
birdstep_exec(int index, string exec_str)  
birdstep_fetch(int index)  
birdstep_fieldname(int index, int col)  
birdstep_fieldnum(int index)  
birdstep_freeresult(int index)  
birdstep_off_autocommit(int index)  
birdstep_result(int index, int col)  
birdstep_rollback(int index)  
Reflection_Class::implementsInterface(string|reflection_class interface_name) =bool  Returns whether this class is a subclass of another class  
Reflection_Class::isAbstract() =bool  Returns whether this class is abstract  
Reflection_Class::isFinal() =bool  Returns whether this class is final  
Reflection_Class::isInstance(stdclass object) =bool  Returns whether the given object is an instance of this class  
Reflection_Class::isInstantiable() =bool  Returns whether this class is instantiable  
Reflection_Class::isInterface() =bool  Returns whether this is an interface or a class  
Reflection_Class::isInternal() =bool  Returns whether this class is an internal class  
Reflection_Class::isIterateable() =bool  Returns whether this class is iterateable (can be used inside foreach) =bool  
Reflection_Class::isSubclassOf(string|reflection_class class) =bool  Returns whether this class is a subclass of another class  
Reflection_Class::isUserDefined() =bool  Returns whether this class is user-defined  
Reflection_Function::isInternal() =bool  Returns whether this is an internal function  
Reflection_Function::isUserDefined() =bool  Returns whether this is an user-defined function  
Reflection_Function::returnsReference() =bool  Gets whether this function returns a reference  
Reflection_Method::isAbstract() =bool  Returns whether this method is abstract  
Reflection_Method::isConstructor() =bool  Returns whether this method is the constructor  
Reflection_Method::isDestructor() =bool  Returns whether this method is static  
Reflection_Method::isFinal() =bool  Returns whether this method is final  
Reflection_Method::isPrivate() =bool  Returns whether this method is private  
Reflection_Method::isProtected() =bool  Returns whether this method is protected  
Reflection_Method::isPublic() =bool  Returns whether this method is public  
Reflection_Method::isStatic() =bool  Returns whether this method is static  
Reflection_Parameter::allowsNull() =bool  Returns whether NULL is allowed as this parameters's value  
Reflection_Parameter::isPassedByReference() =bool  Returns whether this parameters is passed to by reference  
Reflection_Property::isDefault() =bool  Returns whether this property is default (declared at compilation time) =bool.  
Reflection_Property::isPrivate() =bool  Returns whether this property is private  
Reflection_Property::isProtected() =bool  Returns whether this property is protected  
Reflection_Property::isPublic() =bool  Returns whether this property is public  
Reflection_Property::isStatic() =bool  Returns whether this property is static  
bzcompress(string source [, int blocksize100k [, int workfactor]])  Compresses a string into BZip2 encoded data  
bzdecompress(string source [, int small])  Decompresses BZip2 compressed data  
bzerrno(resource bz)  Returns the error number  
bzerror(resource bz)  Returns the error number and error string in an associative array  
bzerrstr(resource bz)  Returns the error string  
bzopen(string|int file|fp, string mode)  Opens a new BZip2 stream  
bzread(int bz[, int length])  Reads up to length bytes from a BZip2 stream, or 1024 bytes if length is not specified  
cal_days_in_month(int calendar, int month, int year)  Returns the number of days in a month for a given year and calendar  
cal_from_jd(int jd, int calendar)  Converts from Julian Day Count to a supported calendar and return extended information  
cal_info(int calendar)  Returns information about a particular calendar  
cal_to_jd(int calendar, int month, int day, int year)  Converts from a supported calendar to Julian Day Count  
call_user_func(string function_name [, mixed parmeter] [, mixed ...])  Call a user function which is the first parameter  
call_user_func_array(string function_name, array parameters)  Call a user function which is the first parameter with the arguments contained in array  
call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])  Call a user method on a specific object or class  
call_user_method_array(string method_name, mixed object, array params)  Call a user method on a specific object or class using a parameter array  
ceil(float number)  Returns the next highest integer value of the number  
chdir(string directory)  Change the current directory  
checkdate(int month, int day, int year)  Returns true(1) if it is a valid date in gregorian calendar  
chgrp(string filename, mixed group)  Change file group  
chmod(string filename, int mode)  Change file mode  
chown (string filename, mixed user)  Change file owner  
chr(int ascii)  Converts ASCII code to a character  
chroot(string directory)  Change root directory  
chunk_split(string str [, int chunklen [, string ending]])  Returns split line  
class_exists(string classname)  Checks if the class exists  
clearstatcache(void)  Clear file stat cache  
closedir([resource dir_handle])  Close directory connection identified by the dir_handle  
closelog(void)  Close connection to system logger  
com_create_guid()  Generate a globally unique identifier (GUID)  
com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])  Connect events from a COM object to a PHP object  
com_load_typelib(string typelib_name [, int case_insensitive])   Loads a Typelibrary and registers its constants  
com_message_pump([int timeoutms])  Process COM messages, sleeping for up to timeoutms milliseconds  
com_print_typeinfo(object comobject | string typelib, string dispinterface, bool wantsink)  Print out a PHP class definition for a dispatchable interface  
compact(mixed var_names [, mixed ...])  Creates a hash containing variables and their values  
confirm_extname_compiled(string arg)  Return a string to confirm that the module is compiled in  
connection_aborted(void)  Returns true if client disconnected  
connection_status(void)  Returns the connection status bitfield  
constant(string const_name)  Given the name of a constant this function will return the constants associated value  
convert_cyr_string(string str, string from, string to)  Convert from one Cyrillic character set to another  
copy(string source_file, string destination_file)  Copy a file  
cos(float number)  Returns the cosine of the number in radians  
cosh(float number)  Returns the hyperbolic cosine of the number, defined as (exp(number)      exp(-number))/2  
count(mixed var [, int mode])  Count the number of elements in a variable (usually an array)  
count_chars(string input [, int mode])  Returns info about what characters are used in input  
cpdf_add_annotation(int pdfdoc, float xll, float yll, float xur, float xur, string title, string text [, int mode])  Sets annotation  
cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)  Adds outline  
cpdf_arc(int pdfdoc, float x, float y, float radius, float start, float end [, int mode])  Draws an arc  
cpdf_begin_text(int pdfdoc)  Starts text section  
cpdf_circle(int pdfdoc, float x, float y, float radius [, int mode])  Draws a circle  
cpdf_clip(int pdfdoc)  Clips to current path  
cpdf_close(int pdfdoc)  Closes the pdf document  
cpdf_closepath(int pdfdoc)  Close path  
cpdf_closepath_fill_stroke(int pdfdoc)  Close, fill and stroke current path  
cpdf_closepath_stroke(int pdfdoc)  Close path and draw line along path  
cpdf_continue_text(int pdfdoc, string text)  Outputs text in next line  
cpdf_curveto(int pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])  Draws a curve  
cpdf_end_text(int pdfdoc)  Ends text section  
cpdf_fill(int pdfdoc)  Fills current path  
cpdf_fill_stroke(int pdfdoc)  Fills and stroke current path  
cpdf_finalize(int pdfdoc)  Creates PDF doc in memory  
cpdf_finalize_page(int pdfdoc, int pagenr)  Ends the page to save memory  
cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)  Sets document settings for all documents  
cpdf_import_jpeg(int pdfdoc, string filename, float x, float y, float angle, float width, float height, float x_scale, float y_scale, int gsave [, int mode])  Includes JPEG image  
cpdf_lineto(int pdfdoc, float x, float y [, int mode])  Draws a line  
cpdf_moveto(int pdfdoc, float x, float y [, int mode])  Sets current point  
cpdf_newpath(int pdfdoc)  Starts new path  
cpdf_open(int compression [, string filename [, array doc_limits]])  Opens a new pdf document  
cpdf_output_buffer(int pdfdoc)  Returns the internal memory stream as string  
cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, float unit])  Starts page  
cpdf_place_inline_image(int pdfdoc, int gdimage, float x, float y, float angle, fload width, float height, int gsave [, int mode])  Includes image  
cpdf_rect(int pdfdoc, float x, float y, float width, float height [, int mode])  Draws a rectangle  
cpdf_restore(int pdfdoc)  Restores formerly saved enviroment  
cpdf_rlineto(int pdfdoc, float x, float y [, int mode])  Draws a line relative to current point  
cpdf_rmoveto(int pdfdoc, float x, float y [, int mode])  Sets current point  
cpdf_rotate(int pdfdoc, float angle)  Sets rotation  
cpdf_rotate_text(int pdfdoc, float angle)  Sets text rotation angle  
cpdf_save(int pdfdoc)  Saves current enviroment  
cpdf_save_to_file(int pdfdoc, string filename)  Saves the internal memory stream to a file  
cpdf_scale(int pdfdoc, float x_scale, float y_scale)  Sets scaling  
cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])  Sets hyperlink  
cpdf_set_char_spacing(int pdfdoc, float space)  Sets character spacing  
cpdf_set_creator(int pdfdoc, string creator)  Sets the creator field  
cpdf_set_current_page(int pdfdoc, int pagenr)  Sets page for output  
cpdf_set_font(int pdfdoc, string font, float size, string encoding)  Selects the current font face, size and encoding  
cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)  Sets directories to search when using external fonts  
cpdf_set_font_map_file(int pdfdoc, string filename)  Sets fontname to filename translation map when using external fonts  
cpdf_set_horiz_scaling(int pdfdoc, float scale)  Sets horizontal scaling of text  
cpdf_set_keywords(int pdfptr, string keywords)  Fills the keywords field of the info structure  
cpdf_set_leading(int pdfdoc, float distance)  Sets distance between text lines  
cpdf_set_page_animation(int pdfdoc, int transition, float duration, float direction, int orientation, int inout)  Sets transition between pages  
cpdf_set_subject(int pdfptr, string subject)  Fills the subject field of the info structure  
cpdf_set_text_matrix(int pdfdoc, arry matrix)  Sets the text matrix  
cpdf_set_text_pos(int pdfdoc, float x, float y [, int mode])  Sets the position of text for the next cpdf_show call  
cpdf_set_text_rendering(int pdfdoc, int rendermode)  Determines how text is rendered  
cpdf_set_text_rise(int pdfdoc, float value)  Sets the text rise  
cpdf_set_title(int pdfptr, string title)  Fills the title field of the info structure  
cpdf_set_viewer_preferences(int pdfdoc, array preferences)  How to show the document in the viewer  
cpdf_set_word_spacing(int pdfdoc, float space)  Sets spacing between words  
cpdf_setdash(int pdfdoc, long white, long black)  Sets dash pattern  
cpdf_setflat(int pdfdoc, float value)  Sets flatness  
cpdf_setgray(int pdfdoc, float value)  Sets drawing and filling color to gray value  
cpdf_setgray_fill(int pdfdoc, float value)  Sets filling color to gray value  
cpdf_setgray_stroke(int pdfdoc, float value)  Sets drawing color to gray value  
cpdf_setlinecap(int pdfdoc, int value)  Sets linecap parameter  
cpdf_setlinejoin(int pdfdoc, int value)  Sets linejoin parameter  
cpdf_setlinewidth(int pdfdoc, float width)  Sets line width  
cpdf_setmiterlimit(int pdfdoc, float value)  Sets miter limit  
cpdf_setrgbcolor(int pdfdoc, float red, float green, float blue)  Sets drawing and filling color to RGB color value  
cpdf_setrgbcolor_fill(int pdfdoc, float red, float green, float blue)  Sets filling color to rgb color value  
cpdf_setrgbcolor_stroke(int pdfdoc, float red, float green, float blue)  Sets drawing color to RGB color value  
cpdf_show(int pdfdoc, string text)  Output text at current position  
cpdf_show_xy(int pdfdoc, string text, float x-koor, float y-koor [, int mode])  Output text at position  
cpdf_stringwidth(int pdfdoc, string text)  Returns width of text in current font  
cpdf_stroke(int pdfdoc)  Draws line along path path  
cpdf_text(int pdfdoc, string text [, float x-koor, float y-koor [, int mode [, float orientation [, int alignmode]]]])  Outputs text  
cpdf_translate(int pdfdoc, float x, float y)  Sets origin of coordinate system  
crc32(string str)  Calculate the crc32 polynomial of a string  
create_function(string args, string code)  Creates an anonymous function, and returns its name (funny, eh?)  
crypt(string str [, string salt])  Encrypt a string  
ctype_alnum(mixed c)  Checks for alphanumeric character(s)  
ctype_alpha(mixed c)  Checks for alphabetic character(s)  
ctype_cntrl(mixed c)  Checks for control character(s)  
ctype_digit(mixed c)  Checks for numeric character(s)  
ctype_graph(mixed c)  Checks for any printable character(s) except space  
ctype_lower(mixed c)  Checks for lowercase character(s)   
ctype_print(mixed c)  Checks for printable character(s)  
ctype_punct(mixed c)  Checks for any printable character which is not whitespace or an alphanumeric character  
ctype_space(mixed c)  Checks for whitespace character(s) 
ctype_upper(mixed c)  Checks for uppercase character(s)  
ctype_xdigit(mixed c)  Checks for character(s) representing a hexadecimal digit  
curl_close(resource ch)  Close a CURL session  
curl_errno(resource ch)  Return an integer containing the last error number  
curl_error(resource ch)  Return a string contain the last error for the current session  
curl_exec(resource ch)  Perform a CURL session  
curl_getinfo(resource ch, int opt)  Get information regarding a specific transfer  
curl_init([string url])  Initialize a CURL session  
curl_multi_add_handle(resource multi, resource ch)  Add a normal cURL handle to a cURL multi handle  
curl_multi_close(resource mh)  Close a set of cURL handles  
curl_multi_exec(resource mh)   Run the sub-connections of the current cURL handle  
curl_multi_getcontent(resource ch)  Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set  
curl_multi_info_read(resource mh)  Get information about the current transfers  
curl_multi_init(void)  Returns a new cURL multi handle  
curl_multi_remove_handle(resource mh, resource ch)  Remove a multi handle from a set of cURL handles  
curl_multi_select(resource mh[, double timeout])  Get all the sockets associated with the cURL extension, which can then be "selected"  
curl_setopt(resource ch, string option, mixed value)  Set an option for a CURL transfer  
curl_version([int version])  Return cURL version information.  
current(array array_arg)  Return the element currently pointed to by the internal array pointer  
date(string format [, int timestamp])  Format a local time/date  
date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])  Returns time of sunrise for a given day & location  
date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])  Returns time of sunset for a given day & location  
dba_close(resource handle)  Closes database  
dba_delete(string key, resource handle)  Deletes the entry associated with key     If inifile: remove all other key lines  
dba_exists(string key, resource handle)  Checks, if the specified key exists  
dba_fetch(string key, [int skip ,] resource handle)  Fetches the data associated with key  
dba_firstkey(resource handle)  Resets the internal key pointer and returns the first key  
dba_handlers([bool full_info])  List configured database handlers  
dba_insert(string key, string value, resource handle)  If not inifile: Insert value as key, return false, if key exists already      If inifile: Add vakue as key (next instance of key)  
dba_key_split(string key)  Splits an inifile key into an array of the form array(0=>group,1=>value_name) but returns false if input is false or null  
dba_list()  List opened databases  
dba_nextkey(resource handle)  Returns the next key  
dba_open(string path, string mode [, string handlername, string ...])  Opens path using the specified handler in mode 
dba_optimize(resource handle)  Optimizes (e.g. clean up, vacuum) database  
dba_popen(string path, string mode [, string handlername, string ...])  Opens path using the specified handler in mode persistently  
dba_replace(string key, string value, resource handle)  Inserts value as key, replaces key, if key exists already     If inifile: remove all other key lines  
dba_sync(resource handle)  Synchronizes database  
dbase_add_record(int identifier, array data)  Adds a record to the database  
dbase_close(int identifier)  Closes an open dBase-format database file  
dbase_create(string filename, array fields)  Creates a new dBase-format database file  
dbase_delete_record(int identifier, int record)  Marks a record to be deleted  
dbase_get_header_info(int database_handle)  
dbase_get_record(int identifier, int record)  Returns an array representing a record from the database  
dbase_get_record_with_names(int identifier, int record)  Returns an associative array representing a record from the database  
dbase_numfields(int identifier)  Returns the number of fields (columns) in the database  
dbase_numrecords(int identifier)  Returns the number of records in the database  
dbase_open(string name, int mode)  Opens a dBase-format database file  
dbase_pack(int identifier)  Packs the database (deletes records marked for deletion)  
dbase_replace_record(int identifier, array data, int recnum)  Replaces a record to the database  
dbx_close(dbx_link_object dbx_link)  Returns success or failure    
dbx_compare(array row_x, array row_y, string columnname [, int flags])  Returns row_y[columnname] - row_x[columnname], converted to -1, 0 or 1  
dbx_connect(string module_name, string host, string db, string username, string password [, bool persistent])  Returns a dbx_link_object on success and returns 0 on failure  
dbx_error(dbx_link_object dbx_link)  Returns success or failure    
dbx_escape_string(dbx_link_object dbx_link, string sz)  Returns escaped string or NULL on error   
dbx_fetch_row(dbx_query_object dbx_q)  Returns a row (index and assoc based on query) on success and returns 0 on failure or no more rows  
dbx_query(dbx_link_object dbx_link, string sql_statement [, int flags])  Returns a dbx_link_object on success and returns 0 on failure  
dbx_sort(object dbx_result, string compare_function_name)  Returns 0 on failure, 1 on success  
dcgettext(string domain_name, string msgid, long category)  Return the translation of msgid for domain_name and category, or msgid unaltered if a translation does not exist  
dcngettext (string domain, string msgid1, string msgid2, int n, int category)  Plural version of dcgettext()  
debug_backtrace(void)  Return backtrace as array  
debug_print_backtrace(void)   
debug_zval_dump(mixed var)  Dumps a string representation of an internal zend value to output.  
decbin(int decimal_number)  Returns a string containing a binary representation of the number  
dechex(int decimal_number)  Returns a string containing a hexadecimal representation of the given number  
decoct(int decimal_number)  Returns a string containing an octal representation of the given number  
define(string constant_name, mixed value, case_sensitive=true)  Define a new constant  
define_syslog_variables(void)  Initializes all syslog-related variables  
defined(string constant_name)  Check whether a constant exists  
deg2rad(float number)  Converts the number in degrees to the radian equivalent  
dgettext(string domain_name, string msgid)  Return the translation of msgid for domain_name, or msgid unaltered if a translation does not exist  
dio_close(resource fd)  Close the file descriptor given by fd  
dio_fcntl(resource fd, int cmd[, mixed arg])  Perform a c library fcntl on fd  
dio_open(string filename, int flags[, int mode])  Open a new filename with specified permissions of flags and creation permissions of mode  
dio_read(resource fd[, int n])  Read n bytes from fd and return them, if n is not specified, read 1k  
dio_seek(resource fd, int pos, int whence)  Seek to pos on fd from whence  
dio_stat(resource fd)  Get stat information about the file descriptor fd  
dio_tcsetattr(resource fd,  array args )  Perform a c library tcsetattr on fd  
dio_truncate(resource fd, int offset)  Truncate file descriptor fd to offset bytes  
dio_write(resource fd, string data[, int len])  Write data to fd with optional truncation at length  
dir(string directory)  Directory class with properties, handle and class and methods read, rewind and close  
dirname(string path)  Returns the directory name component of the path  
disk_free_space(string path)  Get free disk space for filesystem that path is on  
disk_total_space(string path)  Get total disk space for filesystem that path is on  
dl(string extension_filename)  Load a PHP extension at runtime  
dngettext (string domain, string msgid1, string msgid2, int count)  Plural version of dgettext()  
dns_check_record(string host [, string type])  Check DNS records corresponding to a given Internet host name or IP address  
dns_get_mx(string hostname, array mxhosts [, array weight])  Get MX records corresponding to a given Internet host name  
dns_get_record(string hostname [, int type[, array authns, array addtl]])  Get any Resource Record corresponding to a given Internet host name  
dom_attr_attr(string name, [string value]);   
dom_attr_is_id();  
dom_cdatasection_cdatasection(string value);   
dom_characterdata_append_data(string arg);  
dom_characterdata_delete_data(unsigned long offset, unsigned long count);  
dom_characterdata_insert_data(unsigned long offset, string arg);  
dom_characterdata_replace_data(unsigned long offset, unsigned long count, string arg);  
dom_characterdata_substring_data(unsigned long offset, unsigned long count);  
value]);   
dom_document_adopt_node(node source);  
dom_document_create_attribute(string name);  
dom_document_create_attribute_ns(string namespaceURI, string qualifiedName);  
dom_document_create_cdatasection(string data);  
dom_document_create_comment(string data);  
dom_document_create_document_fragment();  
dom_document_create_element(string tagName);  
dom_document_create_element_ns(string namespaceURI, string qualifiedName);  
dom_document_create_entity_reference(string name);  
dom_document_create_processing_instruction(string target, string data);  
dom_document_create_text_node(string data);  
dom_document_document([string version], [string encoding]);   
dom_document_get_element_by_id(string elementId);  
dom_document_get_elements_by_tag_name(string tagname);  
dom_document_get_elements_by_tag_name_ns(string namespaceURI, string localName);  
dom_document_import_node(node importedNode, boolean deep);  
dom_document_normalize_document();  
dom_document_rename_node(node n, string namespaceURI, string qualifiedName);  
dom_document_save_html();  Convenience method to output as html   
dom_document_save_html_file(string file);  Convenience method to save to file as html   
dom_document_xinclude()  Substitutues xincludes in a DomDocument  
  
dom_domconfiguration_can_set_parameter(string name, domuserdata value);  
dom_domconfiguration_get_parameter(string name);  
dom_domconfiguration_set_parameter(string name, domuserdata value);  
dom_domerrorhandler_handle_error(domerror error);  
dom_domimplementation_create_document(string namespaceURI, string qualifiedName, documenttype doctype);  
dom_domimplementation_create_document_type(string qualifiedName, string publicId, string systemId);  
dom_domimplementation_get_feature(string feature, string version);  
dom_domimplementation_has_feature(string feature, string version);  
dom_domimplementationlist_item(unsigned long index);  
dom_domimplementationsource_get_domimplementation(string features);  
dom_domimplementationsource_get_domimplementations(string features);  
dom_domstringlist_item(unsigned long index);  
dom_element_element(string name, [string value]);   
dom_element_get_attribute(string name);  
dom_element_get_attribute_node(string name);  
dom_element_get_attribute_node_ns(string namespaceURI, string localName);  
dom_element_get_attribute_ns(string namespaceURI, string localName);  
dom_element_get_elements_by_tag_name(string name);  
dom_element_get_elements_by_tag_name_ns(string namespaceURI, string localName);  
dom_element_has_attribute(string name);  
dom_element_has_attribute_ns(string namespaceURI, string localName);  
dom_element_remove_attribute(string name);  
dom_element_remove_attribute_node(attr oldAttr);  
dom_element_remove_attribute_ns(string namespaceURI, string localName);  
dom_element_set_attribute(string name, string value);  
dom_element_set_attribute_node(attr newAttr);  
dom_element_set_attribute_node_ns(attr newAttr);  
dom_element_set_attribute_ns(string namespaceURI, string qualifiedName, string value);  
dom_element_set_id_attribute(string name, boolean isId);  
dom_element_set_id_attribute_node(attr idAttr, boolean isId);  
dom_element_set_id_attribute_ns(string namespaceURI, string localName, boolean isId);  
dom_entityreference_entityreference(string name);   
dom_import_simplexml(sxeobject node)  Get a simplexml_element object from dom to allow for processing  
dom_namednodemap_get_named_item(string name);  
dom_namednodemap_get_named_item_ns(string namespaceURI, string localName);  
dom_namednodemap_item(unsigned long index);  
dom_namednodemap_remove_named_item(string name);  
dom_namednodemap_remove_named_item_ns(string namespaceURI, string localName);  
dom_namednodemap_set_named_item(node arg);  
dom_namednodemap_set_named_item_ns(node arg);  
dom_namelist_get_name(unsigned long index);  
dom_namelist_get_namespace_uri(unsigned long index);  
dom_node_append_child(node newChild);  
dom_node_clone_node(boolean deep);  
dom_node_get_feature(string feature, string version);  
dom_node_get_user_data(string key);  
dom_node_has_attributes();  
dom_node_has_child_nodes();  
dom_node_insert_before(node newChild, node refChild);  
dom_node_is_default_namespace(string namespaceURI);  
dom_node_is_equal_node(node arg);  
dom_node_is_same_node(node other);  
dom_node_is_supported(string feature, string version);  
dom_node_lookup_namespace_uri(string prefix);  
dom_node_lookup_prefix(string namespaceURI);  
dom_node_normalize();  
dom_node_remove_child(node oldChild);  
dom_node_replace_child(node newChild, node oldChild);  
dom_node_set_user_data(string key, domuserdata data, userdatahandler handler);  
dom_nodelist_item(unsigned long index);  
dom_processinginstruction_processinginstruction(string name, [string value]);   
dom_string_extend_find_offset16(int offset32);  
dom_string_extend_find_offset32(int offset16);  
dom_text_is_whitespace_in_element_content();  
dom_text_replace_whole_text(string content);  
dom_text_split_text(unsigned long offset);  
dom_userdatahandler_handle(unsigned short operation, string key, domobject data, node src, node dst);  
dom_xpath_query(string expr [,domNode context]);   
dom_xpath_register_ns(string prefix, string uri);   
dom_xpath_xpath(domDocument doc);   
document	document   
document_element	documentElement	  
domnode _dom_document_schema_validate(string source);   
domnode dom_document_load(string source);  
domnode dom_document_load_html(string source);  Since: DOM extended   
domnode dom_document_load_html_file(string source);  Since: DOM extended   
domnode dom_document_loadxml(string source);  
domnode dom_document_relaxNG_validate_file(string filename);   
domnode dom_document_relaxNG_validate_xml(string source);   
domnode dom_document_save(string file);  Convenience method to save to file   
domnode dom_document_savexml([node n]);  
domnode dom_document_validate();  Since: DOM extended   
value]);   
each(array arr)  Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element  
easter_date([int year])  Return the timestamp of midnight on Easter of a given year (defaults to current year)  
easter_days([int year, [int method]])  Return the number of days after March 21 that Easter falls on for a given year (defaults to current year)  
end(array array_arg)  Advances array argument's internal pointer to the last element and return it  
ereg(string pattern, string string [, array registers])  Regular expression match  
ereg_replace(string pattern, string replacement, string string)  Replace regular expression  
eregi(string pattern, string string [, array registers])  Case-insensitive regular expression match  
eregi_replace(string pattern, string replacement, string string)  Case insensitive replace regular expression  
error_log(string message [, int message_type [, string destination [, string extra_headers]]])  Send an error message somewhere  
error_reporting(int new_error_level=null)  Return the current error_reporting level, and if an argument was passed - change to the new level  
escapeshellarg(string arg)  Quote and escape an argument for use in a shell command  
escapeshellcmd(string command)  Escape shell metacharacters  
exec(string command [, array &output [, int &return_value]])  Execute an external program  
exif_imagetype(string imagefile)  Get the type of an image  
exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])  Reads header data from the JPEG/TIFF image filename and optionally reads the internal thumbnails  
exif_tagname(index)  Get headername for index or false if not defined  
exif_thumbnail(string filename [, &width, &height [, &imagetype]])  Reads the embedded thumbnail  
exp(float number)  Returns e raised to the power of the number  
explode(string separator, string str [, int limit])  Splits a string on string separator and return array of components  
expm1(float number)  Returns exp(number) - 1, computed in a way that accurate even when the value of number is close to zero  
extension_loaded(string extension_name)  Returns true if the named extension is loaded  
extract(array var_array [, int extract_type [, string prefix]])  Imports variables into symbol table from an array  
ezmlm_hash(string addr)  Calculate EZMLM list hash value.  
fam_cancel_monitor(resource id, resource monitor_id)  Terminate monitoring  
fam_close(resource id)  Close FAM connection  
fam_monitor_collection(resource id, string dirname, int depth, string mask)  Monitor a collection of files in a directory for changes  
fam_monitor_directory(resource id, string dirname)  Monitor a directory for changes  
fam_monitor_file(resource id, string filename)  Monitor a regular file for changes  
fam_next_event(resource id)  Get next pending FAM event  
fam_open([string appname])  Open FAM connection  
fam_pending(resource id)  Check for pending FAM events  
fam_resume_monitor(resource id, resource monitor_id)  Resume suspended monitoring  
fam_suspend_monitor(resource id, resource monitor_id)  Temporary suspend monitoring  
fbsql_affected_rows([resource link_identifier])  Get the number of rows affected by the last statement  
fbsql_autocommit(resource link_identifier [, bool OnOff])  Turns on auto-commit  
fbsql_blob_size(string blob_handle [, resource link_identifier])  Get the size of a BLOB identified by blob_handle  
fbsql_change_user(string user, string password [, string database [, resource link_identifier]])  Change the user for a session  
fbsql_clob_size(string clob_handle [, resource link_identifier])  Get the size of a CLOB identified by clob_handle  
fbsql_close([resource link_identifier])  Close a connection to a database server  
fbsql_commit([resource link_identifier])  Commit the transaction  
fbsql_connect([string hostname [, string username [, string password]]])  Create a connection to a database server  
fbsql_create_blob(string blob_data [, resource link_identifier])  Create a BLOB in the database for use with an insert or update statement  
fbsql_create_clob(string clob_data [, resource link_identifier])  Create a CLOB in the database for use with an insert or update statement  
fbsql_create_db(string database_name [, resource link_identifier])  Create a new database on the server  
fbsql_data_seek(int result, int row_number)  Move the internal row counter to the specified row_number  
fbsql_database(resource link_identifier [, string database])   Get or set the database name used with a connection  
fbsql_database_password(resource link_identifier [, string database_password])  Get or set the databsae password used with a connection  
fbsql_db_query(string database_name, string query [, resource link_identifier])  Send one or more SQL statements to a specified database on the server  
fbsql_db_status(string database_name [, resource link_identifier])  Gets the status (Stopped, Starting, Running, Stopping) for a given database  
fbsql_drop_db(string database_name [, resource link_identifier])  Drop a database on the server  
fbsql_errno([resource link_identifier])  Returns the last error code  
fbsql_error([resource link_identifier])  Returns the last error string  
fbsql_fetch_array(resource result [, int result_type])  Fetches a result row as an array (associative, numeric or both) 
fbsql_fetch_assoc(resource result)  Detch a row of data. Returns an assoc array  
fbsql_fetch_field(int result [, int field_index])  Get the field properties for a specified field_index  
fbsql_fetch_lengths(int result)  Returns an array of the lengths of each column in the result set  
fbsql_fetch_object(resource result [, int result_type])  Fetch a row of data. Returns an object  
fbsql_fetch_row(resource result)  Fetch a row of data. Returns an indexed array  
fbsql_field_flags(int result [, int field_index])  
fbsql_field_len(int result [, int field_index])  Get the column length for a specified field_index  
fbsql_field_name(int result [, int field_index])  Get the column name for a specified field_index  
fbsql_field_seek(int result [, int field_index])  
fbsql_field_table(int result [, int field_index])  Get the table name for a specified field_index  
fbsql_field_type(int result [, int field_index])  Get the field type for a specified field_index  
fbsql_free_result(resource result)  free the memory used to store a result  
fbsql_get_autostart_info([resource link_identifier])  
fbsql_hostname(resource link_identifier [, string host_name])  Get or set the host name used with a connection  
fbsql_insert_id([resource link_identifier])  Get the internal index for the last insert statement  
fbsql_list_dbs([resource link_identifier])  Retreive a list of all databases on the server  
fbsql_list_fields(string database_name, string table_name [, resource link_identifier])  Retrieve a list of all fields for the specified database.table  
fbsql_list_tables(string database [, int link_identifier])  Retreive a list of all tables from the specifoied database  
fbsql_next_result(int result)  Switch to the next result if multiple results are available  
fbsql_num_fields(int result)  Get number of fields in the result set  
fbsql_num_rows(int result)  Get number of rows  
fbsql_password(resource link_identifier [, string password])  Get or set the user password used with a connection  
fbsql_pconnect([string hostname [, string username [, string password]]])  Create a persistant connection to a database server  
fbsql_query(string query [, resource link_identifier])  Send one or more SQL statements to the server and execute them  
fbsql_read_blob(string blob_handle [, resource link_identifier])  Read the BLOB data identified by blob_handle  
fbsql_read_clob(string clob_handle [, resource link_identifier])  Read the CLOB data identified by clob_handle  
fbsql_result(int result [, int row [, mixed field]])  
fbsql_rollback([resource link_identifier])  Rollback all statments since last commit  
fbsql_select_db([string database_name [, resource link_identifier]])  Select the database to open  
fbsql_set_lob_mode(resource result, int lob_mode)  Sets the mode for how LOB data re retreived (actual data or a handle)  
fbsql_set_transaction(resource link_identifier, int locking, int isolation)  Sets the transaction locking and isolation  
fbsql_start_db(string database_name [, resource link_identifier])  Start a database on the server  
fbsql_stop_db(string database_name [, resource link_identifier])  Stop a database on the server  
fbsql_table_name(resource result, int index)  Retreive the table name for index after a call to fbsql_list_tables()  
fbsql_username(resource link_identifier [, string username])  Get or set the host user used with a connection  
fbsql_warnings([int flag])  Enable or disable FrontBase warnings  
fclose(resource fp)  Close an open file pointer  
fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script)   Add javascript code to the fdf file  
fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)  Adds a template into the FDF document  
fdf_close(resource fdfdoc)  Closes the FDF document  
fdf_create(void)  Creates a new FDF document  
fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])  Call a user defined function for each document value  
fdf_errno(void)   Gets error code for last operation  
fdf_error([int errno])   Gets error description for error code  
fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename)   Gets the appearance of a field and creates a PDF document out of it.  
fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)  Get attached uploaded file  
fdf_get_encoding(resource fdf)   Gets FDF file encoding scheme  
fdf_get_file(resource fdfdoc)  Gets the value of /F key  
fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags)   Gets the flags of a field  
fdf_get_opt(resource fdfdof, string fieldname [, int element])  Gets a value from the opt array of a field  
fdf_get_status(resource fdfdoc)  Gets the value of /Status key  
fdf_get_value(resource fdfdoc, string fieldname [, int which])  Gets the value of a field as string  
fdf_get_version([resource fdfdoc])   Gets version number for FDF api or file  
fdf_header(void)   Set FDF specific HTTP headers  
fdf_next_field_name(resource fdfdoc [, string fieldname])  Gets the name of the next field name or the first field name  
fdf_open(string filename)  Opens a new FDF document  
fdf_open_string(string fdf_data)  Opens a new FDF document from string  
fdf_remove_item(resource fdfdoc, string fieldname, int item)  Sets target frame for form  
fdf_save(resource fdfdoc [, string filename])  Writes out the FDF file  
fdf_save_string(resource fdfdoc)  Returns the FDF file as a string  
fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)  Sets the appearence of a field  
fdf_set_encoding(resource fdf_document, string encoding)  Sets FDF encoding (either "Shift-JIS" or "Unicode")  
fdf_set_file(resource fdfdoc, string filename [, string target_frame])  Sets the value of /F key  
fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)  Sets flags for a field in the FDF document  
fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)  Sets the javascript action for a field  
fdf_set_on_import_javascript(resource fdfdoc, string script [, bool before_data_import])  Adds javascript code to be executed when Acrobat opens the FDF  
fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)  Sets a value in the opt array for a field  
fdf_set_status(resource fdfdoc, string status)  Sets the value of /Status key  
fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)  Sets the submit form action for a field  
fdf_set_target_frame(resource fdfdoc, string target)  Sets target frame for form  
fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])  Sets the value of a field  
fdf_set_version(resourece fdfdoc, string version)  Sets FDF version for a file 
feof(resource fp)  Test for end-of-file on a file pointer  
fflush(resource fp)  Flushes output  
fgetc(resource fp)  Get a character from file pointer  
fgetcsv(resource fp [,int length [, string delimiter [, string enclosure]]])  Get line from file pointer and parse for CSV fields  
fgets(resource fp[, int length])  Get a line from file pointer  
fgetss(resource fp [, int length, string allowable_tags])  Get a line from file pointer and strip HTML tags  
file(string filename [, int flags[, resource context]])  Read entire file into an array  
file_exists(string filename)  Returns true if filename exists  
file_get_contents(string filename [, bool use_include_path [, resource context]])  Read the entire file into a string  
file_put_contents(string file, mixed data [, int flags [, resource context]])  Write/Create a file with contents data and return the number of bytes written  
fileatime(string filename)  Get last access time of file  
filectime(string filename)  Get inode modification time of file  
filegroup(string filename)  Get file group  
fileinode(string filename)  Get file inode  
filemtime(string filename)  Get last modification time of file  
fileowner(string filename)  Get file owner  
fileperms(string filename)  Get file permissions  
filepro(string directory)  Read and verify the map file  
filepro_fieldcount(void)  Find out how many fields are in a filePro database  
filepro_fieldname(int fieldnumber)  Gets the name of a field  
filepro_fieldtype(int field_number)  Gets the type of a field  
filepro_fieldwidth(int field_number)  Gets the width of a field  
filepro_retrieve(int row_number, int field_number)  Retrieves data from a filePro database  
filepro_rowcount(void)  Find out how many rows are in a filePro database  
filesize(string filename)  Get file size  
filetype(string filename)  Get file type  
node	  
floatval(mixed var)  Get the float value of a variable  
flock(resource fp, int operation [, int &wouldblock])  Portable file locking  
floor(float number)  Returns the next lowest integer value from the number  
flush(void)  Flush the output buffer  
fmod(float x, float y)  Returns the remainder of dividing x by y as a float  
fnmatch(string pattern, string filename [, int flags])  Match filename against pattern  
fopen(string filename, string mode [, bool use_include_path [, resource context]])  Open a file or a URL and return a file pointer  
fpassthru(resource fp)  Output all remaining data from a file pointer  
fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])  Output a formatted string into a stream  
fread(resource fp, int length)  Binary-safe file read  
frenchtojd(int month, int day, int year)  Converts a french republic calendar date to julian day count  
fscanf(resource stream, string format [, string ...])  Implements a mostly ANSI compatible fscanf()  
fseek(resource fp, int offset [, int whence])  Seek on a file pointer  
fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])  Open Internet or Unix domain socket connection  
fstat(resource fp)  Stat() on a filehandle  
ftell(resource fp)  Get file pointer's read/write position  
ftok(string pathname, string proj)  Convert a pathname and a project identifier to a System V IPC key  
ftp_alloc(resource stream, int size[, &response])  Attempt to allocate space on the remote FTP server  
ftp_cdup(resource stream)  Changes to the parent directory  
ftp_chdir(resource stream, string directory)  Changes directories  
ftp_chmod(resource stream, int mode, string filename)  Sets permissions on a file  
ftp_close(resource stream)  Closes the FTP stream  
ftp_connect(string host [, int port [, int timeout]])  Opens a FTP stream  
ftp_delete(resource stream, string file)  Deletes a file  
ftp_exec(resource stream, string command)  Requests execution of a program on the FTP server  
ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])  Retrieves a file from the FTP server and writes it to an open file  
ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])  Stores a file from an open file to the FTP server  
ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])  Retrieves a file from the FTP server and writes it to a local file  
ftp_get_option(resource stream, int option)  Gets an FTP option  
ftp_login(resource stream, string username, string password)  Logs into the FTP server  
ftp_mdtm(resource stream, string filename)  Returns the last modification time of the file, or -1 on error  
ftp_mkdir(resource stream, string directory)  Creates a directory and returns the absolute path for the new directory or false on error  
ftp_nb_continue(resource stream)  Continues retrieving/sending a file nbronously  
ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])  Retrieves a file from the FTP server asynchronly and writes it to an open file  
ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])  Stores a file from an open file to the FTP server nbronly  
ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])  Retrieves a file from the FTP server nbhronly and writes it to a local file  
ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])  Stores a file on the FTP server  
ftp_nlist(resource stream, string directory)  Returns an array of filenames in the given directory  
ftp_pasv(resource stream, bool pasv)  Turns passive mode on or off  
ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])  Stores a file on the FTP server  
ftp_pwd(resource stream)  Returns the present working directory  
ftp_raw(resource stream, string command)  Sends a literal command to the FTP server  
ftp_rawlist(resource stream, string directory [, bool recursive])  Returns a detailed listing of a directory as an array of output lines  
ftp_rename(resource stream, string src, string dest)  Renames the given file to a new path  
ftp_rmdir(resource stream, string directory)  Removes a directory  
ftp_set_option(resource stream, int option, mixed value)  Sets an FTP option  
ftp_site(resource stream, string cmd)  Sends a SITE command to the server  
ftp_size(resource stream, string filename)  Returns the size of the file, or -1 on error  
ftp_ssl_connect(string host [, int port [, int timeout]])  Opens a FTP-SSL stream  
ftp_systype(resource stream)  Returns the system type identifier  
ftruncate(resource fp, int size)  Truncate file to 'size' length  
func_get_arg(int arg_num)  Get the $arg_num'th argument that was passed to the function  
func_get_args()  Get an array of the arguments that were passed to the function  
func_num_args(void)  Get the number of arguments that were passed to the function  
function_exists(string function_name)   Checks if the function exists  
fwrite(resource fp, string str [, int length])  Binary-safe file write  
gd_info()  
get_browser([string browser_name [, bool return_array]])  Get information about the capabilities of a browser. If browser_name is omitted     or null, HTTP_USER_AGENT is used. Returns an object by default; if return_array     is true, returns an array.  
get_cfg_var(string option_name)  Get the value of a PHP configuration option  
get_class(object object)  Retrieves the class name  
get_class_methods(mixed class)  Returns an array of method names for class or class instance.  
get_class_vars(string class_name)  Returns an array of default properties of the class  
get_current_user(void)  Get the name of the owner of the current PHP script  
get_declared_classes()  Returns an array of all declared classes.  
get_declared_interfaces()  Returns an array of all declared interfaces.  
get_defined_constants(void)  Return an array containing the names and values of all defined constants  
get_defined_functions(void)  Returns an array of all defined functions  
get_defined_vars(void)  Returns an associative array of names and values of all currently defined variable names (variables in the current scope)  
get_extension_funcs(string extension_name)  Returns an array with the names of functions belonging to the named extension  
get_headers(string url)  fetches all the headers sent by the server in response to a HTTP request  
get_html_translation_table([int table [, int quote_style]])  Returns the internal translation table used by htmlspecialchars and htmlentities  
get_include_path()  Get the current include_path configuration option  
get_included_files(void)  Returns an array with the file names that were include_once()'d  
get_loaded_extensions(void)  Return an array containing names of loaded extensions  
get_magic_quotes_gpc(void)  Get the current active configuration setting of magic_quotes_gpc  
get_magic_quotes_runtime(void)  Get the current active configuration setting of magic_quotes_runtime  
get_meta_tags(string filename [, bool use_include_path])  Extracts all meta tag content attributes from a file and returns an array  
get_object_vars(object obj)  Returns an array of object properties  
get_parent_class(mixed object)  Retrieves the parent class name for object or class.  
get_resource_type(resource res)  Get the resource type name for a given resource  
getallheaders(void)  Fetch all HTTP request headers  
getcwd(void)  Gets the current directory  
getdate([int timestamp])  Get date/time information  
getenv(string varname)  Get the value of an environment variable  
gethostbyaddr(string ip_address)  Get the Internet host name corresponding to a given IP address  
gethostbyname(string hostname)  Get the IP address corresponding to a given Internet host name  
gethostbynamel(string hostname)  Return a list of IP addresses that a given hostname resolves to.  
getimagesize(string imagefile [, array info])  Get the size of an image as 4-element array  
getlastmod(void)  Get time of last page modification  
getmygid(void)  Get PHP script owner's GID  
getmyinode(void)  Get the inode of the current script being parsed  
getmypid(void)  Get current process ID  
getmyuid(void)  Get PHP script owner's UID  
getopt(string options [, array longopts])  Get options from the command line argument list  
getprotobyname(string name)  Returns protocol number associated with name as per /etc/protocols  
getprotobynumber(int proto)  Returns protocol name associated with protocol number proto  
getrandmax(void)  Returns the maximum value a random number can have  
getrusage([int who])  Returns an array of usage statistics  
getservbyname(string service, string protocol)  Returns port associated with service. Protocol must be "tcp" or "udp"  
getservbyport(int port, string protocol)  Returns service name associated with port. Protocol must be "tcp" or "udp"  
gettext(string msgid)  Return the translation of msgid for the current domain, or msgid unaltered if a translation does not exist  
gettimeofday(void)  Returns the current time as array  
gettype(mixed var)  Returns the type of the variable  
glob(string pattern [, int flags])  Find pathnames matching a pattern  
gmdate(string format [, int timestamp])  Format a GMT/UTC date/time  
gmmktime(int hour, int min, int sec, int mon, int day, int year)  Get UNIX timestamp for a GMT date  
gmp_abs(resource a)  Calculates absolute value  
gmp_add(resource a, resource b)  Add a and b  
gmp_and(resource a, resource b)  Calculates logical AND of a and b  
gmp_clrbit(resource &a, int index)  Clears bit in a  
gmp_cmp(resource a, resource b)  Compares two numbers  
gmp_com(resource a)  Calculates one's complement of a  
gmp_div_q(resource a, resource b [, int round])  Divide a by b, returns quotient only  
gmp_div_qr(resource a, resource b [, int round])  Divide a by b, returns quotient and reminder  
gmp_div_r(resource a, resource b [, int round])  Divide a by b, returns reminder only  
gmp_divexact(resource a, resource b)  Divide a by b using exact division algorithm  
gmp_fact(int a)  Calculates factorial function  
gmp_gcd(resource a, resource b)  Computes greatest common denominator (gcd) of a and b  
gmp_gcdext(resource a, resource b)  Computes G, S, and T, such that AS      BT = G = `gcd' (A, B)  
gmp_hamdist(resource a, resource b)  Calculates hamming distance between a and b  
gmp_init(mixed number [, int base])  Initializes GMP number  
gmp_intval(resource gmpnumber)  Gets signed long value of GMP number  
gmp_invert(resource a, resource b)  Computes the inverse of a modulo b  
gmp_jacobi(resource a, resource b)  Computes Jacobi symbol  
gmp_legendre(resource a, resource b)  Computes Legendre symbol  
gmp_mod(resource a, resource b)  Computes a modulo b  
gmp_mul(resource a, resource b)  Multiply a and b  
gmp_neg(resource a)  Negates a number  
gmp_or(resource a, resource b)  Calculates logical OR of a and b  
gmp_perfect_square(resource a)  Checks if a is an exact square  
gmp_popcount(resource a)  Calculates the population count of a  
gmp_pow(resource base, int exp)  Raise base to power exp  
gmp_powm(resource base, resource exp, resource mod)  Raise base to power exp and take result modulo mod  
gmp_prob_prime(resource a[, int reps])  Checks if a is "probably prime"  
gmp_random([int limiter])  Gets random number  
gmp_scan0(resource a, int start)  Finds first zero bit  
gmp_scan1(resource a, int start)  Finds first non-zero bit  
gmp_setbit(resource &a, int index[, bool set_clear])  Sets or clear bit in a  
gmp_sign(resource a)  Gets the sign of the number  
gmp_sqrt(resource a)  Takes integer part of square root of a  
gmp_sqrtrem(resource a)  Square root with remainder  
gmp_strval(resource gmpnumber [, int base])  Gets string representation of GMP number   
gmp_sub(resource a, resource b)  Subtract b from a  
gmp_xor(resource a, resource b)  Calculates logical exclusive OR of a and b  
gmstrftime(string format [, int timestamp])  Format a GMT/UCT time/date according to locale settings  
gregoriantojd(int month, int day, int year)  Converts a gregorian calendar date to julian day count  
gzcompress(string data [, int level])   Gzip-compress a string  
gzdeflate(string data [, int level])   Gzip-compress a string  
gzencode(string data [, int level [, int encoding_mode]])  GZ encode a string  
gzfile(string filename [, int use_include_path])  Read und uncompress entire .gz-file into an array  
gzinflate(string data [, int length])   Unzip a gzip-compressed string  
gzopen(string filename, string mode [, int use_include_path])  Open a .gz-file and return a .gz-file pointer  
gzuncompress(string data [, int length])   Unzip a gzip-compressed string  
header(string header [, bool replace, [int http_response_code]])  Sends a raw HTTP header  
headers_list(void)  Return list of headers to be sent / already sent  
headers_sent([string &$file [, int &$line]])  Returns true if headers have already been sent, false otherwise  
hebrev(string str [, int max_chars_per_line])  Converts logical Hebrew text to visual text  
hebrevc(string str [, int max_chars_per_line])  Converts logical Hebrew text to visual text with newline conversion  
hexdec(string hexadecimal_number)  Returns the decimal equivalent of the hexadecimal number  
highlight_file(string file_name [, bool return] )  Syntax highlight a source file  
highlight_string(string string [, bool return] )  Syntax highlight a string or optionally return it  
html_entity_decode(string string [, int quote_style][, string charset])  Convert all HTML entities to their applicable characters  
htmlentities(string string [, int quote_style][, string charset])  Convert all applicable characters to HTML entities  
htmlspecialchars(string string [, int quote_style][, string charset])  Convert special characters to HTML entities  
http_build_query(mixed formdata [, string prefix])  Generates a form-encoded query string from an associative array or object.  
hypot(float num1, float num2)  Returns sqrt(num1*num1      num2*num2)  
ibase_add_user(string server, string dba_user_name, string dba_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])  Add an user to security database (only for IB6 or later)  
ibase_affected_rows( [ resource link_identifier ] )  Returns the number of rows affected by the previous INSERT, UPDATE or DELETE statement  
ibase_blob_add(resource blob_handle, string data)  Add data into created blob  
ibase_blob_cancel(resource blob_handle)  Cancel creating blob  
ibase_blob_close(resource blob_handle)  Close blob  
ibase_blob_create([resource link_identifier])  Create blob for adding data  
ibase_blob_echo([ resource link_identifier, ] string blob_id)  Output blob contents to browser  
ibase_blob_get(resource blob_handle, int len)  Get len bytes data from open blob  
ibase_blob_import([resource link_identifier, ] int file_id)  Create blob, copy file in it, and close it  
ibase_blob_info([ resource link_identifier, ] string blob_id)  Return blob length and other useful info  
ibase_blob_open([ resource link_identifier, ] string blob_id)  Open blob for retrieving data parts  
ibase_close([resource link_identifier])  Close an InterBase connection  
ibase_commit( resource link_identifier )  Commit transaction  
ibase_commit_ret( resource link_identifier )  Commit transaction and retain the transaction context  
ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])  Open a connection to an InterBase database  
ibase_delete_user(string server, string dba_user_name, string dba_password, string username)  Delete an user from security database (only for IB6 or later)  
ibase_drop_db([resource link_identifier])  Drop an InterBase database  
ibase_errcode(void)   Return error code  
ibase_errmsg(void)   Return error message  
ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])  Execute a previously prepared query  
ibase_fetch_assoc(resource result [, int fetch_flags])  Fetch a row  from the results of a query  
ibase_fetch_object(resource result [, int fetch_flags])  Fetch a object from the results of a query  
ibase_fetch_row(resource result [, int fetch_flags])  Fetch a row  from the results of a query  
ibase_field_info(resource query_result, int field_number)  Get information about a field  
ibase_free_event_handler(resource event)  Frees the event handler set by ibase_set_event_handler()  
ibase_free_query(resource query)  Free memory used by a query  
ibase_free_result(resource result)  Free the memory used by a result  
ibase_gen_id([ resource link_identifier, ] string generator [, int increment ])  Increments the named generator and returns its new value  
ibase_modify_user(string server, string dba_user_name, string dba_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])  Modify an user in security database (only for IB6 or later)  
ibase_name_result(resource result, string name)  Assign a name to a result for use with ... WHERE CURRENT OF <name> statements  
ibase_num_fields(resource query_result)  Get the number of fields in result  
ibase_num_params(resource query)  Get the number of params in a prepared query  
ibase_num_rows( resource result_identifier )   
ibase_param_info(resource query, int field_number)  Get information about a parameter  
ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])  Open a persistent connection to an InterBase database  
ibase_prepare([resource link_identifier, ] string query)  Prepare a query for later execution  
ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])  Execute a query  
ibase_rollback( resource link_identifier )  Rollback transaction  
ibase_rollback_ret( resource link_identifier )  Rollback transaction and retain the transaction context  
ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])  Register the callback for handling each of the named events  
ibase_timefmt(string format)  Sets the format of timestamp, date and time columns returned from queries  
ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])  Start a transaction over one or several databases  
ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])  Waits for any one of the passed Interbase events to be posted by the database, and returns its name  
iconv(string in_charset, string out_charset, string str)  Returns str converted to the out_charset character set  
iconv_get_encoding([string type])  Get internal encoding and output encoding for ob_iconv_handler()  
iconv_mime_decode(string encoded_string [, int mode, string charset])  Decodes a mime header field  
iconv_mime_decode_headers(string headers [, int mode, string charset])  Decodes multiple mime header fields  
iconv_mime_encode(string field_name, string field_value, [, array preference])  Composes a mime header field with field_name and field_value in a specified scheme  
iconv_set_encoding(string type, string charset)  Sets internal encoding and output encoding for ob_iconv_handler()  
iconv_strlen(string str [, string charset])  Returns the character count of str  
iconv_strpos(string haystack, string needle, int offset [, string charset])  Finds position of first occurrence of needle within part of haystack beginning with offset  
iconv_strrpos(string haystack, string needle [, string charset])  Finds position of last occurrence of needle within part of haystack beginning with offset  
iconv_substr(string str, int offset, [int length, string charset])  Returns specified part of a string  
idate(string format [, int timestamp])  Format a local time/date as integer  
ifx_affected_rows(resource resultid)  Returns the number of rows affected by query identified by resultid  
ifx_blobinfile_mode(int mode)  Sets the default blob-mode for all select-queries   
ifx_byteasvarchar(int mode)  Sets the default byte-mode for all select-queries   
ifx_close([resource connid])  Close informix connection  
ifx_connect([string database [, string userid [, string password]]])  Connects to database using userid/password, returns connection id  
ifx_copy_blob(int bid)  Duplicates the given blob-object  
ifx_create_blob(int type, int mode, string param)  Creates a blob-object  
ifx_create_char(string param)  Creates a char-object  
ifx_do(resource resultid)  Executes a previously prepared query or opens a cursor for it  
ifx_error([resource connection_id])  Returns the Informix error codes (SQLSTATE & SQLCODE)  
ifx_errormsg([int errorcode])  Returns the Informix errormessage associated with   
ifx_fetch_row(resource resultid [, mixed position])  Fetches the next row or <position> row if using a scroll cursor  
ifx_fieldproperties(resource resultid)  Returns an associative for query <resultid> array with fieldnames as key  
ifx_fieldtypes(resource resultid)  Returns an associative array with fieldnames as key for query <resultid>  
ifx_free_blob(int bid)  Deletes the blob-object  
ifx_free_char(int bid)  Deletes the char-object  
ifx_free_result(resource resultid)  Releases resources for query associated with resultid  
ifx_get_blob(int bid)  Returns the content of the blob-object  
ifx_get_char(int bid)  Returns the content of the char-object  
ifx_getsqlca(resource resultid)  Returns the sqlerrd[] fields of the sqlca struct for query resultid  
ifx_htmltbl_result(resource resultid [, string htmltableoptions])  Formats all rows of the resultid query into a html table  
ifx_nullformat(int mode)  Sets the default return value of a NULL-value on a fetch-row   
ifx_num_fields(resource resultid)  Returns the number of columns in query resultid  
ifx_num_rows(resource resultid)  Returns the number of rows already fetched for query identified by resultid  
ifx_pconnect([string database [, string userid [, string password]]])  Connects to database using userid/password, returns connection id  
ifx_prepare(string query, resource connid [, int cursortype] [, array idarray])  Prepare a query on a given connection  
ifx_query(string query, resource connid [, int cursortype] [, array idarray])  Perform a query on a given connection  
ifx_textasvarchar(int mode)  Sets the default text-mode for all select-queries  
ifx_update_blob(int bid, string content)  Updates the content of the blob-object  
ifx_update_char(int bid, string content)  Updates the content of the char-object  
ifxus_close_slob(int bid)  Deletes the slob-object  
ifxus_create_slob(int mode)  Creates a slob-object and opens it  
ifxus_free_slob(int bid)  Deletes the slob-object  
ifxus_open_slob(int bid, int mode)  Opens an slob-object  
ifxus_read_slob(int bid, int nbytes)  Reads nbytes of the slob-object  
ifxus_seek_slob(int bid, int mode, long offset)  Sets the current file or seek position of an open slob-object  
ifxus_tell_slob(int bid)  Returns the current file or seek position of an open slob-object  
ifxus_write_slob(int bid, string content)  Writes a string into the slob-object  
ignore_user_abort(bool value)  Set whether we want to ignore a user abort event or not  
image2wbmp(resource im [, string filename [, int threshold]])  Output WBMP image to browser or file  
image_type_to_extension(int imagetype [, bool include_dot])  Get file extension for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype  
image_type_to_mime_type(int imagetype)  Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype  
imagealphablending(resource im, bool on)  Turn alpha blending mode on or off for the given image  
imageantialias(resource im, bool on)  Should antialiased functions used or not 
imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)  Draw a partial ellipse  
imagechar(resource im, int font, int x, int y, string c, int col)  Draw a character  
imagecharup(resource im, int font, int x, int y, string c, int col)  Draw a character rotated 90 degrees counter-clockwise  
imagecolorallocate(resource im, int red, int green, int blue)  Allocate a color for an image  
imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)  Allocate a color with an alpha level.  Works for true color and palette based images  
imagecolorat(resource im, int x, int y)  Get the index of the color of a pixel  
imagecolorclosest(resource im, int red, int green, int blue)  Get the index of the closest color to the specified color  
imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)  Find the closest matching colour with alpha transparency  
imagecolorclosesthwb(resource im, int red, int green, int blue)  Get the index of the color which has the hue, white and blackness nearest to the given color  
imagecolordeallocate(resource im, int index)  De-allocate a color for an image  
imagecolorexact(resource im, int red, int green, int blue)  Get the index of the specified color  
imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)  Find exact match for colour with transparency  
imagecolormatch(resource im1, resource im2)  Makes the colors of the palette version of an image more closely match the true color version  
imagecolorresolve(resource im, int red, int green, int blue)  Get the index of the specified color or its closest possible alternative  
imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)  Resolve/Allocate a colour with an alpha level.  Works for true colour and palette based images  
imagecolorset(resource im, int col, int red, int green, int blue)  Set the color for the specified palette index  
imagecolorsforindex(resource im, int col)  Get the colors for an index  
imagecolorstotal(resource im)  Find out the number of colors in an image's palette  
imagecolortransparent(resource im [, int col])  Define a color as transparent  
imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)  Copy part of an image  
imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)  Merge one part of an image with another  
imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)  Merge one part of an image with another  
imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)  Copy and resize part of an image using resampling to help ensure clarity  
imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)  Copy and resize part of an image  
imagecreate(int x_size, int y_size)  Create a new image  
imagecreatefromgd(string filename)  Create a new image from GD file or URL  
imagecreatefromgd2(string filename)  Create a new image from GD2 file or URL  
imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)  Create a new image from a given part of GD2 file or URL  
imagecreatefromgif(string filename)  Create a new image from GIF file or URL  
imagecreatefromjpeg(string filename)  Create a new image from JPEG file or URL  
imagecreatefrompng(string filename)  Create a new image from PNG file or URL  
imagecreatefromstring(string image)  Create a new image from the image stream in the string  
imagecreatefromwbmp(string filename)  Create a new image from WBMP file or URL  
imagecreatefromxbm(string filename)  Create a new image from XBM file or URL  
imagecreatefromxpm(string filename)  Create a new image from XPM file or URL  
imagecreatetruecolor(int x_size, int y_size)  Create a new true color image  
imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)  Draw a dashed line  
imagedestroy(resource im)  Destroy an image  
imageellipse(resource im, int cx, int cy, int w, int h, int color)  Draw an ellipse  
imagefill(resource im, int x, int y, int col)  Flood fill  
imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)  Draw a filled partial ellipse  
imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)  Draw an ellipse  
imagefilledpolygon(resource im, array point, int num_points, int col)  Draw a filled polygon  
imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)  Draw a filled rectangle  
imagefilltoborder(resource im, int x, int y, int border, int col)  Flood fill to specific color  
imagefilter(resource src_im, int filtertype, [args] )  Applies Filter an image using a custom angle  
imagefontheight(int font)  Get font height  
imagefontwidth(int font)  Get font width  
imageftbbox(int size, int angle, string font_file, string text[, array extrainfo])  Give the bounding box of a text using fonts via freetype2  
imagefttext(resource im, int size, int angle, int x, int y, int col, string font_file, string text, [array extrainfo])  Write text to the image using fonts via freetype2  
imagegammacorrect(resource im, float inputgamma, float outputgamma)  Apply a gamma correction to a GD image  
imagegd(resource im [, string filename])  Output GD image to browser or file  
imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])  Output GD2 image to browser or file  
imagegif(resource im [, string filename])  Output GIF image to browser or file  
imageinterlace(resource im [, int interlace])  Enable or disable interlace  
imageistruecolor(resource im)  return true if the image uses truecolor  
imagejpeg(resource im [, string filename [, int quality]])  Output JPEG image to browser or file  
imagelayereffect(resource im, int effect)  Set the alpha blending flag to use the bundled libgd layering effects  
imageline(resource im, int x1, int y1, int x2, int y2, int col)  Draw a line  
imageloadfont(string filename)  Load a new font  
imagepalettecopy(resource dst, resource src)  Copy the palette from the src image onto the dst image  
imagepng(resource im [, string filename])  Output PNG image to browser or file  
imagepolygon(resource im, array point, int num_points, int col)  Draw a polygon  
imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])  Return the bounding box needed by a string if rasterized  
imagepscopyfont(int font_index)  Make a copy of a font for purposes like extending or reenconding  
imagepsencodefont(resource font_index, string filename)  To change a fonts character encoding vector  
imagepsextendfont(resource font_index, float extend)  Extend or or condense (if extend < 1) a font  
imagepsfreefont(resource font_index)  Free memory used by a font  
imagepsloadfont(string pathname)  Load a new font from specified file  
imagepsslantfont(resource font_index, float slant)  Slant a font  
imagepstext(resource image, string text, resource font, int size, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])  Rasterize a string over an image  
imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)  Draw a rectangle  
imagerotate(resource src_im, float angle, int bgdcolor)  Rotate an image using a custom angle  
imagesavealpha(resource im, bool on)  Include alpha channel to a saved image  
imagesetbrush(resource image, resource brush)  Set the brush image to $brush when filling $image with the "IMG_COLOR_BRUSHED" color  
imagesetpixel(resource im, int x, int y, int col)  Set a single pixel  
imagesetstyle(resource im, array styles)  Set the line drawing styles for use with imageline and IMG_COLOR_STYLED.  
imagesetthickness(resource im, int thickness)  Set line thickness for drawing lines, ellipses, rectangles, polygons etc.  
imagesettile(resource image, resource tile)  Set the tile image to $tile when filling $image with the "IMG_COLOR_TILED" color  
imagestring(resource im, int font, int x, int y, string str, int col)  Draw a string horizontally  
imagestringup(resource im, int font, int x, int y, string str, int col)  Draw a string vertically - rotated 90 degrees counter-clockwise  
imagesx(resource im)  Get image width  
imagesy(resource im)  Get image height  
imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)  Convert a true colour image to a palette based image with a number of colours, optionally using dithering.  
imagettfbbox(int size, int angle, string font_file, string text)  Give the bounding box of a text using TrueType fonts  
imagettftext(resource im, int size, int angle, int x, int y, int col, string font_file, string text)  Write text to the image using a TrueType font  
imagetypes(void)  Return the types of images supported in a bitfield - 1=GIF, 2=JPEG, 4=PNG, 8=WBMP, 16=XPM  
imagewbmp(resource im [, string filename, [, int foreground]])  Output WBMP image to browser or file  
imagexbm(int im, string filename [, int foreground])  Output XBM image to browser or file  
imap_8bit(string text)  Convert an 8-bit string to a quoted-printable string  
imap_alerts(void)  Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.  
imap_append(resource stream_id, string folder, string message [, string options])  Append a new message to a specified mailbox  
imap_base64(string text)  Decode BASE64 encoded text  
imap_binary(string text)  Convert an 8bit string to a base64 string  
imap_body(resource stream_id, int msg_no [, int options])  Read the message body  
imap_bodystruct(resource stream_id, int msg_no, int section)  Read the structure of a specified body section of a specific message  
imap_check(resource stream_id)  Get mailbox properties  
imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])  Clears flags on messages  
imap_close(resource stream_id [, int options])  Close an IMAP stream  
imap_createmailbox(resource stream_id, string mailbox)  Create a new mailbox  
imap_delete(resource stream_id, int msg_no [, int options])  Mark a message for deletion  
imap_deletemailbox(resource stream_id, string mailbox)  Delete a mailbox  
imap_errors(void)  Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call, whichever came last. The error stack is cleared after imap_errors() is called.  
imap_expunge(resource stream_id)  Permanently delete all messages marked for deletion  
imap_fetch_overview(resource stream_id, int msg_no [, int options])  Read an overview of the information in the headers of the given message sequence  
imap_fetchbody(resource stream_id, int msg_no, int section [, int options])  Get a specific body section  
imap_fetchheader(resource stream_id, int msg_no [, int options])  Get the full unfiltered header for a message  
imap_fetchstructure(resource stream_id, int msg_no [, int options])  Read the full structure of a message  
imap_get_quota(resource stream_id, string qroot)  Returns the quota set to the mailbox account qroot  
imap_get_quotaroot(resource stream_id, string mbox)  Returns the quota set to the mailbox account mbox  
imap_getacl(resource stream_id, string mailbox)  Gets the ACL for a given mailbox  
imap_getmailboxes(resource stream_id, string ref, string pattern)  Reads the list of mailboxes and returns a full array of objects containing name, attributes, and delimiter  
imap_getsubscribed(resource stream_id, string ref, string pattern)  Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()  
imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])  Read the headers of the message  
imap_headers(resource stream_id)  Returns headers for all messages in a mailbox  
imap_last_error(void)   Returns the last error that was generated by an IMAP function. The error stack is NOT cleared after this call.  
imap_list(resource stream_id, string ref, string pattern)  Read the list of mailboxes  
imap_lsub(resource stream_id, string ref, string pattern)  Return a list of subscribed mailboxes  
imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])  Send an email message  
imap_mail_compose(array envelope, array body)  Create a MIME message based on given envelope and body sections  
imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])  Copy specified message to a mailbox  
imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])  Move specified message to a mailbox  
imap_mailboxmsginfo(resource stream_id)  Returns info about the current mailbox  
imap_mime_header_decode(string str)  Decode mime header element in accordance with RFC 2047 and return array of objects containing 'charset' encoding and decoded 'text'  
imap_msgno(resource stream_id, int unique_msg_id)  Get the sequence number associated with a UID  
imap_num_msg(resource stream_id)  Gives the number of messages in the current mailbox  
imap_num_recent(resource stream_id)  Gives the number of recent messages in current mailbox  
imap_open(string mailbox, string user, string password [, int options])  Open an IMAP stream to a mailbox  
imap_ping(resource stream_id)  Check if the IMAP stream is still active  
imap_qprint(string text)  Convert a quoted-printable string to an 8-bit string  
imap_renamemailbox(resource stream_id, string old_name, string new_name)  Rename a mailbox  
imap_reopen(resource stream_id, string mailbox [, int options])  Reopen an IMAP stream to a new mailbox  
imap_rfc822_parse_adrlist(string address_string, string default_host)  Parses an address string  
imap_rfc822_parse_headers(string headers [, string default_host])  Parse a set of mail headers contained in a string, and return an object similar to imap_headerinfo()  
imap_rfc822_write_address(string mailbox, string host, string personal)  Returns a properly formatted email address given the mailbox, host, and personal info  
imap_scan(resource stream_id, string ref, string pattern, string content)  Read list of mailboxes containing a certain string  
imap_search(resource stream_id, string criteria [, int options [, string charset]])  Return a list of messages matching the given criteria  
imap_set_quota(resource stream_id, string qroot, int mailbox_size)  Will set the quota for qroot mailbox  
imap_setacl(resource stream_id, string mailbox, string id, string rights)  Sets the ACL for a given mailbox  
imap_setflag_full(resource stream_id, string sequence, string flag [, int options])  Sets flags on messages  
imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])  Sort an array of message headers, optionally including only messages that meet specified criteria.  
imap_status(resource stream_id, string mailbox, int options)  Get status info from a mailbox  
imap_subscribe(resource stream_id, string mailbox)  Subscribe to a mailbox  
imap_thread(resource stream_id [, int options])  Return threaded by REFERENCES tree  
imap_timeout(int timeout_type [, int timeout])  Set or fetch imap timeout  
imap_uid(resource stream_id, int msg_no)  Get the unique message id associated with a standard sequential message number  
imap_undelete(resource stream_id, int msg_no)  Remove the delete flag from a message  
imap_unsubscribe(resource stream_id, string mailbox)  Unsubscribe from a mailbox  
imap_utf7_decode(string buf)  Decode a modified UTF-7 string  
imap_utf7_encode(string buf)  Encode a string in modified UTF-7  
imap_utf8(string mime_encoded_text)  Convert a mime-encoded text to UTF-8  
implode([string glue,] array pieces)  Joins array elements placing glue string between items and return one string  
import_request_variables(string types [, string prefix])  Import GET/POST/Cookie variables into the global scope  
in_array(mixed needle, array haystack [, bool strict])  Checks if the given value exists in the array  
ingres_autocommit([resource link])  Switch autocommit on or off  
ingres_close([resource link])  Close an Ingres II database connection  
ingres_commit([resource link])  Commit a transaction  
ingres_connect([string database [, string username [, string password]]])  Open a connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]  
ingres_fetch_array([int result_type [, resource link]])  Fetch a row of result into an array result_type can be II_NUM for enumerated array, II_ASSOC for associative array, or II_BOTH (default)  
ingres_fetch_object([int result_type [, resource link]])  Fetch a row of result into an object result_type can be II_NUM for enumerated object, II_ASSOC for associative object, or II_BOTH (default)  
ingres_fetch_row([resource link])  Fetch a row of result into an enumerated array  
ingres_field_length(int index [, resource link])  Return the length of a field in a query result index must be >0 and <= ingres_num_fields()  
ingres_field_name(int index [, resource link])  Return the name of a field in a query result index must be >0 and <= ingres_num_fields()  
ingres_field_nullable(int index [, resource link])  Return true if the field is nullable and false otherwise index must be >0 and <= ingres_num_fields()  
ingres_field_precision(int index [, resource link])  Return the precision of a field in a query result index must be >0 and <= ingres_num_fields()  
ingres_field_scale(int index [, resource link])  Return the scale of a field in a query result index must be >0 and <= ingres_num_fields()  
ingres_field_type(int index [, resource link])  Return the type of a field in a query result index must be >0 and <= ingres_num_fields()  
ingres_num_fields([resource link])  Return the number of fields returned by the last query  
ingres_num_rows([resource link])  Return the number of rows affected/returned by the last query  
ingres_pconnect([string database [, string username [, string password]]])  Open a persistent connection to an Ingres II database the syntax of database is [node_id::]dbname[/svr_class]  
ingres_query(string query [, resource link])  Send a SQL query to Ingres II  
ingres_rollback([resource link])  Roll back a transaction  
ini_get(string varname)  Get a configuration option  
ini_get_all([string extension])  Get all configuration options  
ini_restore(string varname)  Restore the value of a configuration option specified by varname  
ini_set(string varname, string newvalue)  Set a configuration option, returns false on error and the old value of the configuration option on success  
Reflection_Class::getEndLine() =int  Returns the line this class' declaration ends at  
Reflection_Class::getModifiers() =int  Returns a bitfield of the access modifiers for this class  
Reflection_Class::getStartLine() =int  Returns the line this class' declaration starts at  
Reflection_Function::getEndLine() =int  Returns the line this function's declaration ends at  
Reflection_Function::getStartLine() =int  Returns the line this function's declaration starts at  
Reflection_Method::getModifiers() =int  Returns a bitfield of the access modifiers for this method  
Reflection_Property::getModifiers() =int  Returns a bitfield of the access modifiers for this property  
intval(mixed var [, int base])  Get the integer value of a variable using the optional base for the conversion  
ip2long(string ip_address)  Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address  
iptcembed(string iptcdata, string jpeg_file_name [, int spool])  Embed binary IPTC data into a JPEG image.  
iptcparse(string iptcdata)  Parse binary IPTC-data into associative array  
ircg_channel_mode(int connection, string channel, string mode_spec, string nick)  Sets channel mode flags for user  
ircg_disconnect(int connection, string reason)  Terminate IRC connection  
ircg_eval_ecmascript_params(string params)  Decodes a list of JS-encoded parameters into a native array  
ircg_fetch_error_msg(int connection)  Returns the error from previous ircg operation  
ircg_get_username(int connection)  Gets username for connection  
ircg_html_encode(string html_text)  Encodes HTML preserving output  
ircg_ignore_add(resource connection, string nick)  Adds a user to your ignore list on a server  
ircg_ignore_del(int connection, string nick)  Removes a user from your ignore list  
ircg_invite(int connection, string channel, string nickname)  INVITEs nickname to channel  
ircg_is_conn_alive(int connection)  Checks connection status  
ircg_join(int connection, string channel [, string chan-key])  Joins a channel on a connected server  
ircg_kick(int connection, string channel, string nick, string reason)  Kicks user from channel  
ircg_list(int connection, string channel)  List topic/user count of channel(s)  
ircg_lookup_format_messages(string name)  Selects a set of format strings for display of IRC messages  
ircg_lusers(int connection)  IRC network statistics  
ircg_msg(int connection, string recipient, string message [,bool loop-suppress])  Delivers a message to the IRC network  
ircg_names( int connection, string channel [, string target])  Queries visible usernames  
ircg_nick(int connection, string newnick)  Changes the nickname  
ircg_nickname_escape(string nick)   Escapes special characters in nickname to be IRC-compliant  
ircg_nickname_unescape(string nick)  Decodes encoded nickname  
ircg_notice(int connection, string recipient, string message)  Sends a one-way communication NOTICE to a target  
ircg_oper(int connection, string name, string password)  Elevates privileges to IRC OPER  
ircg_part(int connection, string channel)  Leaves a channel  
ircg_pconnect(string username [, string server [, int port [, string format-msg-set-name [, array ctcp-set [, array user-details [, bool bailout-on-trivial]]]]]])  Create a persistent IRC connection  
ircg_register_format_messages(string name, array messages)  Registers a set of format strings for display of IRC messages  
ircg_set_current(int connection)  Sets current connection for output  
ircg_set_file(int connection, string path)  Sets logfile for connection  
ircg_set_on_die(int connection, string host, int port, string data)   Sets hostaction to be executed when connection dies  
ircg_set_on_read_data(int connection, string host, int port, string data)   Set action to be executed when data is received from a HTTP client  
ircg_topic(int connection, string channel, string topic)  Sets topic for channel  
ircg_who(int connection, string mask [, bool ops_only])  Queries server for WHO information  
ircg_whois( int connection, string nick)  Queries user information for nick on server  
is_a(object object, string class_name)  Returns true if the object is of this class or has this class as one of its parents  
is_array(mixed var)  Returns true if variable is an array  
is_bool(mixed var)  Returns true if variable is a boolean  
is_callable(mixed var [, bool syntax_only [, string callable_name]])   Returns true if var is callable.  
is_dir(string filename)  Returns true if file is directory  
is_executable(string filename)  Returns true if file is executable  
is_file(string filename)  Returns true if file is a regular file  
is_finite(float val)  Returns whether argument is finite  
is_float(mixed var)  Returns true if variable is float point 
is_infinite(float val)  Returns whether argument is infinite  
is_link(string filename)  Returns true if file is symbolic link  
is_long(mixed var)  Returns true if variable is a long (integer)  
is_nan(float val)  Returns whether argument is not a number  
is_null(mixed var)  Returns true if variable is null  
is_numeric(mixed value)  Returns true if value is a number or a numeric string  
is_object(mixed var)  Returns true if variable is an object  
is_readable(string filename)  Returns true if file can be read  
is_resource(mixed var)  Returns true if variable is a resource  
is_scalar(mixed value)  Returns true if value is a scalar  
is_string(mixed var)  Returns true if variable is a string  
is_subclass_of(object object, string class_name)  Returns true if the object has this class as one of its parents  
is_uploaded_file(string path)  Check if file was created by rfc1867 upload   
is_writable(string filename)  Returns true if file can be written  
jddayofweek(int juliandaycount [, int mode])  Returns name or number of day of week from julian day count  
jdmonthname(int juliandaycount, int mode)  Returns name of month for julian day count  
jdtofrench(int juliandaycount)  Converts a julian day count to a french republic calendar date  
jdtogregorian(int juliandaycount)  Converts a julian day count to a gregorian calendar date  
jdtojewish(int juliandaycount [, bool hebrew [, int fl]])  Converts a julian day count to a jewish calendar date  
jdtojulian(int juliandaycount)  Convert a julian day count to a julian calendar date  
jdtounix(int jday)  Convert Julian Day to UNIX timestamp  
jewishtojd(int month, int day, int year)  Converts a jewish calendar date to a julian day count  
join(array src, string glue)  An alias for implode  
jpeg2wbmp (string f_org, string f_dest, int d_height, int d_width, int threshold)  Convert JPEG image to WBMP image  
juliantojd(int month, int day, int year)  Converts a julian calendar date to julian day count  
key(array array_arg)  Return the key of the element currently pointed to by the internal array pointer  
krsort(array array_arg [, int sort_flags])  Sort an array by key value in reverse order  
ksort(array array_arg [, int sort_flags])  Sort an array by key  
lcg_value()  Returns a value from the combined linear congruential generator  
ldap_8859_to_t61(string value)  Translate 8859 characters to t61 characters  
ldap_add(resource link, string dn, array entry)  Add entries to LDAP directory  
ldap_bind(resource link [, string dn, string password])  Bind to LDAP directory  
ldap_compare(resource link, string dn, string attr, string value)  Determine if an entry has a specific value for one of its attributes  
ldap_connect([string host [, int port]])  Connect to an LDAP server  
ldap_count_entries(resource link, resource result)  Count the number of entries in a search result  
ldap_delete(resource link, string dn)  Delete an entry from a directory  
ldap_dn2ufn(string dn)  Convert DN to User Friendly Naming format  
ldap_err2str(int errno)  Convert error number to error string  
ldap_errno(resource link)  Get the current ldap error number  
ldap_error(resource link)  Get the current ldap error string  
ldap_explode_dn(string dn, int with_attrib)  Splits DN into its component parts  
ldap_first_attribute(resource link, resource result_entry, int ber)  Return first attribute  
ldap_first_entry(resource link, resource result)  Return first result id  
ldap_first_reference(resource link, resource result)  Return first reference  
ldap_free_result(resource result)  Free result memory  
ldap_get_attributes(resource link, resource result_entry)  Get attributes from a search result entry  
ldap_get_dn(resource link, resource result_entry)  Get the DN of a result entry  
ldap_get_entries(resource link, resource result)  Get all result entries  
ldap_get_option(resource link, int option, mixed retval)  Get the current value of various session-wide parameters  
ldap_get_values(resource link, resource result_entry, string attribute)  Get all values from a result entry  
ldap_get_values_len(resource link, resource result_entry, string attribute)  Get all values with lengths from a result entry  
ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])  Single-level search  
ldap_mod_add(resource link, string dn, array entry)  Add attribute values to current  
ldap_mod_del(resource link, string dn, array entry)  Delete attribute values  
ldap_mod_replace(resource link, string dn, array entry)  Replace attribute values with new ones  
ldap_next_attribute(resource link, resource result_entry, resource ber)  Get the next attribute in result  
ldap_next_entry(resource link, resource result_entry)  Get next result entry  
ldap_next_reference(resource link, resource reference_entry)  Get next reference  
ldap_parse_reference(resource link, resource reference_entry, array referrals)  Extract information from reference entry  
ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)  Extract information from result  
ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])  Read an entry  
ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn);  Modify the name of an entry  
ldap_sasl_bind(resource link)  Bind to LDAP directory using SASL  
ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])  Search LDAP tree under base_dn  
ldap_set_option(resource link, int option, mixed newval)  Set the value of various session-wide parameters  
ldap_set_rebind_proc(resource link, string callback)  Set a callback function to do re-binds on referral chasing.  
ldap_sort(resource link, resource result, string sortfilter)  Sort LDAP result entries  
ldap_start_tls(resource link)  Start TLS  
ldap_t61_to_8859(string value)  Translate t61 characters to 8859 characters  
ldap_unbind(resource link)  Unbind from LDAP directory  
leak(int num_bytes=3)  Cause an intentional memory leak, for testing/debugging purposes  
long	  
levenshtein(string str1, string str2)  Calculate Levenshtein distance between two strings  
libxml_set_streams_context(resource streams_context)   Set the streams context for the next libxml document load or write  
link(string target, string link)  Create a hard link  
linkinfo(string filename)  Returns the st_dev field of the UNIX C stat structure describing the link  
localeconv(void)  Returns numeric formatting information based on the current locale  
localtime([int timestamp [, bool associative_array]])  Returns the results of the C system call localtime as an associative array if the associative_array argument is set to 1 other wise it is a regular array  
log(float number, [float base])  Returns the natural logarithm of the number, or the base log if base is specified  
log10(float number)  Returns the base-10 logarithm of the number  
log1p(float number)  Returns log(1      number), computed in a way that accurate even when the value of number is close to zero  
long2ip(int proper_address)  Converts an (IPv4) Internet network address into a string in Internet standard dotted format  
lstat(string filename)  Give information about a file or symbolic link  
ltrim(string str [, string character_mask])  Strips whitespace from the beginning of a string  
mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])  Send an email message  
max(mixed arg1 [, mixed arg2 [, mixed ...]])  Return the highest value in an array or a series of arguments  
mb_convert_case(string sourcestring, int mode [, string encoding])  Returns a case-folded version of sourcestring  
mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])  Returns converted string in desired encoding  
mb_convert_kana(string str [, string option] [, string encoding])  Conversion between full-width character and half-width character (Japanese)  
mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])  Converts the string resource in variables to desired encoding  
mb_decode_mimeheader(string string)  Decodes the MIME "encoded-word" in the string  
mb_decode_numericentity(string string, array convmap [, string encoding])  Converts HTML numeric entities to character code  
mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])  Encodings of the given string is returned (as a string)  
mb_detect_order([mixed encoding-list])  Sets the current detect_order or Return the current detect_order as a array  
mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]])  Converts the string to MIME "encoded-word" in the format of =?charset?(B|Q)?encoded_string?=  
mb_encode_numericentity(string string, array convmap [, string encoding])  Converts specified characters to HTML numeric entities  
mb_ereg(string pattern, string string [, array registers])  Regular expression match for multibyte string  
mb_ereg_match(string pattern, string string [,string option])  Regular expression match for multibyte string  
mb_ereg_replace(string pattern, string replacement, string string [, string option])  Replace regular expression for multibyte string  
mb_ereg_search([string pattern[, string option]])  Regular expression search for multibyte string  
mb_ereg_search_getpos(void)  Get search start position  
mb_ereg_search_getregs(void)  Get matched substring of the last time  
mb_ereg_search_init(string string [, string pattern[, string option]])  Initialize string and regular expression for search.  
mb_ereg_search_pos([string pattern[, string option]])  Regular expression search for multibyte string  
mb_ereg_search_regs([string pattern[, string option]])  Regular expression search for multibyte string  
mb_ereg_search_setpos(int position)  Set search start position  
mb_eregi(string pattern, string string [, array registers])  Case-insensitive regular expression match for multibyte string  
mb_eregi_replace(string pattern, string replacement, string string)  Case insensitive replace regular expression for multibyte string  
mb_get_info([string type])  Returns the current settings of mbstring  
mb_http_input([string type])  Returns the input encoding  
mb_http_output([string encoding])  Sets the current output_encoding or returns the current output_encoding as a string  
mb_internal_encoding([string encoding])  Sets the current internal encoding or Returns the current internal encoding as a string  
mb_language([string language])  Sets the current language or Returns the current language as a string  
mb_output_handler(string contents, int status)  Returns string in output buffer converted to the http_output encoding  
mb_parse_str(string encoded_string [, array result])  Parses GET/POST/COOKIE data and sets global variables  
mb_preferred_mime_name(string encoding)  Return the preferred MIME name (charset) as a string  
mb_regex_encoding([string encoding])  Returns the current encoding for regex as a string.  
mb_regex_set_options([string options])  Set or get the default options for mbregex functions  
mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])  *  Sends an email message with MIME scheme    
mb_split(string pattern, string string [, int limit])  split multibyte string into array by regular expression  
mb_strcut(string str, int start [, int length [, string encoding]])  Returns part of a string  
mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])  Trim the string in terminal width  
mb_strlen(string str [, string encoding])  Get character numbers of a string  
mb_strpos(string haystack, string needle [, int offset [, string encoding]])  Find position of first occurrence of a string within another  
mb_strrpos(string haystack, string needle [, string encoding])  Find the last occurrence of a character in a string within another  
mb_strtolower(string sourcestring [, string encoding])  *  Returns a lowercased version of sourcestring    
mb_strtoupper(string sourcestring [, string encoding])  *  Returns a uppercased version of sourcestring    
mb_strwidth(string str [, string encoding])  Gets terminal width of a string  
mb_substitute_character([mixed substchar])  Sets the current substitute_character or returns the current substitute_character  
mb_substr(string str, int start [, int length [, string encoding]])  Returns part of a string  
mb_substr_count(string haystack, string needle [, string encoding])  Count the number of substring occurrences  
mcrypt_cbc(int cipher, string key, string data, int mode, string iv)  CBC crypt/decrypt data using key key with cipher cipher starting with iv  
mcrypt_cfb(int cipher, string key, string data, int mode, string iv)  CFB crypt/decrypt data using key key with cipher cipher starting with iv  
mcrypt_create_iv(int size, int source)  Create an initialization vector (IV)  
mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)  OFB crypt/decrypt data using key key with cipher cipher starting with iv  
mcrypt_ecb(int cipher, string key, string data, int mode, string iv)  ECB crypt/decrypt data using key key with cipher cipher starting with iv  
mcrypt_enc_get_algorithms_name(resource td)  Returns the name of the algorithm specified by the descriptor td  
mcrypt_enc_get_block_size(resource td)  Returns the block size of the cipher specified by the descriptor td  
mcrypt_enc_get_iv_size(resource td)  Returns the size of the IV in bytes of the algorithm specified by the descriptor td  
mcrypt_enc_get_key_size(resource td)  Returns the maximum supported key size in bytes of the algorithm specified by the descriptor td  
mcrypt_enc_get_modes_name(resource td)  Returns the name of the mode specified by the descriptor td  
mcrypt_enc_get_supported_key_sizes(resource td)  This function decrypts the crypttext  
mcrypt_enc_is_block_algorithm(resource td)  Returns TRUE if the alrogithm is a block algorithms  
mcrypt_enc_is_block_algorithm_mode(resource td)  Returns TRUE if the mode is for use with block algorithms  
mcrypt_enc_is_block_mode(resource td)  Returns TRUE if the mode outputs blocks  
mcrypt_enc_self_test(resource td)  This function runs the self test on the algorithm specified by the descriptor td  
mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)  OFB crypt/decrypt data using key key with cipher cipher starting with iv  
mcrypt_generic(resource td, string data)  This function encrypts the plaintext  
mcrypt_generic_deinit(resource td)  This function terminates encrypt specified by the descriptor td  
mcrypt_generic_end(resource td)  This function terminates encrypt specified by the descriptor td  
mcrypt_generic_init(resource td, string key, string iv)  This function initializes all buffers for the specific module  
mcrypt_get_block_size(string cipher, string module)  Get the key size of cipher  
mcrypt_get_cipher_name(string cipher)  Get the key size of cipher  
mcrypt_get_iv_size(string cipher, string module)  Get the IV size of cipher (Usually the same as the blocksize)  
mcrypt_get_key_size(string cipher, string module)  Get the key size of cipher  
mcrypt_list_algorithms([string lib_dir])  List all algorithms in "module_dir"  
mcrypt_list_modes([string lib_dir])  List all modes "module_dir"  
mcrypt_module_close(resource td)  Free the descriptor td  
mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])  Returns the block size of the algorithm  
mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])  Returns the maximum supported key size of the algorithm  
mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])  This function decrypts the crypttext  
mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])  Returns TRUE if the algorithm is a block algorithm  
mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])  Returns TRUE if the mode is for use with block algorithms  
mcrypt_module_is_block_mode(string mode [, string lib_dir])  Returns TRUE if the mode outputs blocks of bytes  
mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)  Opens the module of the algorithm and the mode to be used  
mcrypt_module_self_test(string algorithm [, string lib_dir])  Does a self test of the module "module"  
mcrypt_ofb(int cipher, string key, string data, int mode, string iv)  OFB crypt/decrypt data using key key with cipher cipher starting with iv  
mcve_adduser(resource conn, string admin_password, int usersetup)  Add an MCVE user using usersetup structure  
mcve_adduserarg(resource usersetup, int argtype, string argval)  Add a value to user configuration structure  
mcve_bt(resource conn, string username, string password)  Get unsettled batch totals  
mcve_checkstatus(resource conn, int identifier)  Check to see if a transaction has completed  
mcve_chkpwd(resource conn, string username, string password)  Verify Password  
mcve_chngpwd(resource conn, string admin_password, string new_password)  Change the system administrator's password  
mcve_completeauthorizations(resource conn, int &array)  Number of complete authorizations in queue, returning an array of their identifiers  
mcve_connect(resource conn)  Establish the connection to MCVE  
mcve_connectionerror(resource conn)  Get a textual representation of why a connection failed  
mcve_deleteresponse(resource conn, int identifier)  Delete specified transaction from MCVE_CONN structure  
mcve_deletetrans(resource conn, int identifier)  Delete specified transaction from MCVE_CONN structure  
mcve_deleteusersetup(resource usersetup)  Deallocate data associated with usersetup structure  
mcve_deluser(resource conn, string admin_password, string username)  Delete an MCVE user account  
mcve_destroyconn(resource conn)  Destroy the connection and MCVE_CONN structure  
mcve_destroyengine(void)  Free memory associated with IP/SSL connectivity  
mcve_disableuser(resource conn, string admin_password, string username)  Disable an active MCVE user account  
mcve_edituser(resource conn, string admin_password, int usersetup)  Edit MCVE user using usersetup structure  
mcve_enableuser(resource conn, string admin_password, string username)  Enable an inactive MCVE user account  
mcve_force(resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)  Send a FORCE to MCVE.  (typically, a phone-authorization)  
mcve_getcell(resource conn, int identifier, string column, int row)  Get a specific cell from a comma delimited response by column name  
mcve_getcellbynum(resource conn, int identifier, int column, int row)  Get a specific cell from a comma delimited response by column number  
mcve_getcommadelimited(resource conn, int identifier)  Get the RAW comma delimited data returned from MCVE  
mcve_getheader(resource conn, int identifier, int column_num)  Get the name of the column in a comma-delimited response  
mcve_getuserarg(resource usersetup, int argtype)  Grab a value from usersetup structure  
mcve_getuserparam(resource conn, long identifier, int key)  Get a user response parameter  
mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)  Audit MCVE for Failed transactions   
mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)  Audit MCVE for settled transactions  
mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)  Audit MCVE for Unsettled Transactions  
mcve_initconn(void)  Create and initialize an MCVE_CONN structure  
mcve_initengine(string location)  Ready the client for IP/SSL Communication  
mcve_initusersetup(void)  Initialize structure to store user data  
mcve_iscommadelimited(resource conn, int identifier)  Checks to see if response is comma delimited  
mcve_liststats(resource conn, string admin_password)  List statistics for all users on MCVE system  
mcve_listusers(resource conn, string admin_password)  List all users on MCVE system  
mcve_maxconntimeout(resource conn, int secs)  The maximum amount of time the API will attempt a connection to MCVE   
mcve_monitor(resource conn)  Perform communication with MCVE (send/receive data)   Non-blocking  
mcve_numcolumns(resource conn, int identifier)  Number of columns returned in a comma delimited response  
mcve_numrows(resource conn, int identifier)  Number of rows returned in a comma delimited response  
mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)  Send an OVERRIDE to MCVE  
mcve_parsecommadelimited(resource conn, int identifier)  Parse the comma delimited response so mcve_getcell, etc will work  
mcve_ping(resource conn)  Send a ping request to MCVE  
mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments,	string clerkid, string stationid, int ptrannum)  Send a PREAUTHORIZATION to MCVE  
mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)  Complete a PREAUTHORIZATION... Ready it for settlement  
mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)  Audit MCVE for a list of transactions in the outgoing queue  
mcve_responseparam(resource conn, long identifier, string key)  Get a custom response parameter  
mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)  Issue a RETURN or CREDIT to MCVE  
mcve_returncode(resource conn, int identifier)  Grab the exact return code from the transaction  
mcve_returnstatus(resource conn, int identifier)  Check to see if the transaction was successful  
mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)  Send a SALE to MCVE  
mcve_setblocking(resource conn, int tf)  Set blocking/non-blocking mode for connection   
mcve_setdropfile(resource conn, string directory)  Set the connection method to Drop-File  
mcve_setip(resource conn, string host, int port)  Set the connection method to IP  
mcve_setssl(resource conn, string host, int port)  Set the connection method to SSL  
mcve_setssl_files(string sslkeyfile, string sslcertfile)  Set certificate key files and certificates if server requires client certificate     verification   
mcve_settimeout(resource conn, int seconds)  Set maximum transaction time (per trans)   
mcve_settle(resource conn, string username, string password, string batch)  Issue a settlement command to do a batch deposit  
mcve_text_avs(string code)  Get a textual representation of the return_avs  
mcve_text_code(string code)  Get a textual representation of the return_code  
mcve_text_cv(int code)  Get a textual representation of the return_cv  
mcve_transactionauth(resource conn, int identifier)  Get the authorization number returned for the transaction (alpha-numeric)  
mcve_transactionavs(resource conn, int identifier)  Get the Address Verification return status  
mcve_transactionbatch(resource conn, int identifier)  Get the batch number associated with the transaction  
mcve_transactioncv(resource conn, int identifier)  Get the CVC2/CVV2/CID return status  
mcve_transactionid(resource conn, int identifier)  Get the unique system id for the transaction   
mcve_transactionitem(resource conn, int identifier)  Get the ITEM number in the associated batch for this transaction  
mcve_transactionssent(resource conn)  Check to see if outgoing buffer is clear  
mcve_transactiontext(resource conn, int identifier)  Get verbiage (text) return from MCVE or processing institution  
mcve_transinqueue(resource conn)  Number of transactions in client-queue  
mcve_transnew(resource conn)  Start a new transaction  
mcve_transparam(resource conn, long identifier, int key, ...)  Add a parameter to a transaction  
mcve_transsend(resource conn, long identifier)  Finalize and send the transaction  
mcve_ub(resource conn, string username, string password)  Get a list of all Unsettled batches  
mcve_uwait(long microsecs)  Wait x microsecs  
mcve_verifyconnection(resource conn, int tf)  Set whether or not to PING upon connect to verify connection   
mcve_verifysslcert(resource conn, int tf)  Set whether or not to verify the server ssl certificate   
mcve_void(resource conn, string username, string password, int sid, int ptrannum)  VOID a transaction in the settlement queue  
md5(string str, [ bool raw_output])  Calculate the md5 hash of a string  
md5_file(string filename [, bool raw_output])  Calculate the md5 hash of given filename  
mdecrypt_generic(resource td, string data)  This function decrypts the plaintext  
memory_get_usage()  Returns the allocated by PHP memory  
metaphone(string text, int phones)  Break english phrases down into their phonemes  
method_exists(object object, string method)  Checks if the class method exists  
mhash(int hash, string data [, string key])  Hash data with hash  
mhash_count(void)  Gets the number of available hashes  
mhash_get_block_size(int hash)  Gets the block size of hash  
mhash_get_hash_name(int hash)  Gets the name of hash  
mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)  Generates a key using hash functions  
microtime([bool get_as_float])  Returns either a string or a float containing the current time in seconds and microseconds  
mime_content_type(string filename|resource stream)  Return content-type for file  
min(mixed arg1 [, mixed arg2 [, mixed ...]])  Return the lowest value in an array or a series of arguments  
ming_setcubicthreshold (int threshold)  Set cubic threshold (?)  
ming_setscale(int scale)  Set scale (?)  
ming_useconstants(int use)  Use constant pool (?)  
ming_useswfversion(int version)  Use SWF version (?)  
Reflection_Class::getConstant(string name) =mixed  Returns the class' constant specified by its name  
Reflection_Function::invoke(mixed* args) =mixed  Invokes the function  
Reflection_Method::invoke(mixed object, mixed* args) =mixed  Invokes the function. Pass a   
Reflection_Property::getValue(stdclass object) =mixed  Returns this property's value  
mkdir(string pathname [, int mode [, bool recursive [, resource context]]])  Create a directory  
mktime(int hour, int min, int sec, int mon, int day, int year)  Get UNIX timestamp for a date  
money_format(string format , float value)  Convert monetary value(s) to string  
move_uploaded_file(string path, string new_path)  Move a file if and only if it was created by an upload  
msession_call(string fn_name, [, string param1 ], ... [,string param4])  Call the plugin function named fn_name  
msession_connect(string host, string port)  Connect to msession sever  
msession_count(void)  Get session count  
msession_create(string session)  Create a session  
msession_ctl(string name)  Lock a session  
msession_destroy(string name)  Destroy a session  
msession_disconnect(void)  Disconnect from msession server  
msession_exec(string cmdline)  executes a program on msession system   
msession_find(string name, string value)  Find all sessions with name and value  
msession_get(string session, string name, string default_value)  Get value from session  
msession_get_array(string session)  Get array of msession variables   
msession_get_data(string session)  Get data session unstructured data. (PHP sessions use this)   
msession_inc(string session, string name)   Increment value in session  
msession_list(void)  List all sessions   
msession_listvar(string name)  return associative array of value:session for all sessions with a variable named 'name'  
msession_lock(string name)  Lock a session  
msession_ping(void)  returns non-zero if msession is alive 
msession_plugin(string session, string val [, string param ])  Call the personality plugin escape function  
msession_randstr(int num_chars)  Get random string  
msession_set(string session, string name, string value)  Set value in session  
msession_set_array(string session, array tuples)  Set msession variables from an array 
msession_set_data(string session, string value)  Set data session unstructured data. (PHP sessions use this)   
msession_timeout(string session [, int param ])  Set/get session timeout  
msession_uniq(int num_chars)  Get uniq id  
msession_unlock(string session, int key)  Unlock a session  
msg_get_queue(int key [, int perms])  Attach to a message queue  
msg_receive(resource queue, int desiredmsgtype, int &msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])  Send a message of type msgtype (must be > 0) to a message queue  
msg_remove_queue(resource queue)  Destroy the queue  
msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])  Send a message of type msgtype (must be > 0) to a message queue  
msg_set_queue(resource queue, array data)  Set information for a message queue  
msg_stat_queue(resource queue)  Returns information about a message queue  
msql_affected_rows(resource query)  Return number of affected rows  
msql_close([resource link_identifier])  Close an mSQL connection  
msql_connect([string hostname[:port]] [, string username] [, string password])  Open a connection to an mSQL Server  
msql_create_db(string database_name [, resource link_identifier])  Create an mSQL database  
msql_data_seek(resource query, int row_number)  Move internal result pointer  
msql_db_query(string database_name, string query [, resource link_identifier])  Send an SQL query to mSQL  
msql_drop_db(string database_name [, resource link_identifier])  Drop (delete) an mSQL database  
msql_error(void)  Returns the text of the error message from previous mSQL operation  
msql_fetch_array(resource query [, int result_type])  Fetch a result row as an associative array  
msql_fetch_field(resource query [, int field_offset])  Get column information from a result and return as an object  
msql_fetch_object(resource query [, resource result_type])  Fetch a result row as an object  
msql_fetch_row(resource query)  Get a result row as an enumerated array  
msql_field_flags(resource query, int field_offset)  Get the flags associated with the specified field in a result  
msql_field_len(int query, int field_offet)  Returns the length of the specified field  
msql_field_name(resource query, int field_index)  Get the name of the specified field in a result  
msql_field_seek(resource query, int field_offset)  Set result pointer to a specific field offset  
msql_field_table(resource query, int field_offset)  Get name of the table the specified field is in  
msql_field_type(resource query, int field_offset)  Get the type of the specified field in a result  
msql_free_result(resource query)  Free result memory  
msql_list_dbs([resource link_identifier])  List databases available on an mSQL server  
msql_list_fields(string database_name, string table_name [, resource link_identifier])  List mSQL result fields  
msql_list_tables(string database_name [, resource link_identifier])  List tables in an mSQL database  
msql_num_fields(resource query)  Get number of fields in a result  
msql_num_rows(resource query)  Get number of rows in a result  
msql_pconnect([string hostname[:port]] [, string username] [, string password])  Open a persistent connection to an mSQL Server  
msql_query(string query [, resource link_identifier])  Send an SQL query to mSQL  
msql_result(int query, int row [, mixed field])  Get result data  
msql_select_db(string database_name [, resource link_identifier])  Select an mSQL database  
mssql_bind(resource stmt, string param_name, mixed var, int type   [, int is_output[, int is_null[, int maxlen]]])     Adds a parameter to a stored procedure or a remote stored procedure   
mssql_close([resource conn_id])  Closes a connection to a MS-SQL server  
mssql_connect([string servername [, string username [, string password]]])  Establishes a connection to a MS-SQL server  
mssql_data_seek(resource result_id, int offset)  Moves the internal row pointer of the MS-SQL result associated with the specified result identifier to pointer to the specified row number  
mssql_execute(resource stmt [, bool skip_results = false])  Executes a stored procedure on a MS-SQL server database  
mssql_fetch_array(resource result_id [, int result_type])  Returns an associative array of the current row in the result set specified by result_id  
mssql_fetch_assoc(resource result_id)  Returns an associative array of the current row in the result set specified by result_id  
mssql_fetch_batch(resource result_index)  Returns the next batch of records  
mssql_fetch_field(resource result_id [, int offset])  Gets information about certain fields in a query result  
mssql_fetch_object(resource result_id [, int result_type])  Returns a psuedo-object of the current row in the result set specified by result_id  
mssql_fetch_row(resource result_id)  Returns an array of the current row in the result set specified by result_id  
mssql_field_length(resource result_id [, int offset])  Get the length of a MS-SQL field  
mssql_field_name(resource result_id [, int offset])  Returns the name of the field given by offset in the result set given by result_id  
mssql_field_seek(int result_id, int offset)  Seeks to the specified field offset  
mssql_field_type(resource result_id [, int offset])  Returns the type of a field  
mssql_free_result(resource result_index)  Free a MS-SQL result index  
mssql_free_statement(resource result_index)  Free a MS-SQL statement index  
mssql_get_last_message(void)  Gets the last message from the MS-SQL server  
mssql_guid_string(string binary [,int short_format])  Converts a 16 byte binary GUID to a string   
mssql_init(string sp_name [, resource conn_id])  Initializes a stored procedure or a remote stored procedure   
mssql_min_error_severity(int severity)  Sets the lower error severity  
mssql_min_message_severity(int severity)  Sets the lower message severity  
mssql_next_result(resource result_id)  Move the internal result pointer to the next result  
mssql_num_fields(resource mssql_result_index)  Returns the number of fields fetched in from the result id specified  
mssql_num_rows(resource mssql_result_index)  Returns the number of rows fetched in from the result id specified  
mssql_pconnect([string servername [, string username [, string password]]])  Establishes a persistent connection to a MS-SQL server  
mssql_query(string query [, resource conn_id [, int batch_size]])  Perform an SQL query on a MS-SQL server database  
mssql_result(resource result_id, int row, mixed field)  Returns the contents of one cell from a MS-SQL result set  
mssql_rows_affected(resource conn_id)  Returns the number of records affected by the query  
mssql_select_db(string database_name [, resource conn_id])  Select a MS-SQL database  
mt_getrandmax(void)  Returns the maximum value a random number from Mersenne Twister can have  
mt_rand([int min, int max])  Returns a random number from Mersenne Twister  
mt_srand([int seed])  Seeds Mersenne Twister random number generator  
mysql_affected_rows([int link_identifier])  Gets number of affected rows in previous MySQL operation  
mysql_client_encoding([int link_identifier])  Returns the default character set for the current connection  
mysql_close([int link_identifier])  Close a MySQL connection  
mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])  Opens a connection to a MySQL Server  
mysql_create_db(string database_name [, int link_identifier])  Create a MySQL database  
mysql_data_seek(resource result, int row_number)  Move internal result pointer  
mysql_db_query(string database_name, string query [, int link_identifier])  Sends an SQL query to MySQL  
mysql_drop_db(string database_name [, int link_identifier])  Drops (delete) a MySQL database  
mysql_errno([int link_identifier])  Returns the number of the error message from previous MySQL operation  
mysql_error([int link_identifier])  Returns the text of the error message from previous MySQL operation  
mysql_escape_string(string to_be_escaped)  Escape string for mysql query  
mysql_fetch_array(resource result [, int result_type])  Fetch a result row as an array (associative, numeric or both)  
mysql_fetch_assoc(resource result)  Fetch a result row as an associative array  
mysql_fetch_field(resource result [, int field_offset])  Gets column information from a result and return as an object  
mysql_fetch_lengths(resource result)  Gets max data size of each column in a result  
mysql_fetch_object(resource result [, string class_name [, NULL|array ctor_params]])  Fetch a result row as an object  
mysql_fetch_row(resource result)  Gets a result row as an enumerated array  
mysql_field_flags(resource result, int field_offset)  Gets the flags associated with the specified field in a result  
mysql_field_len(resource result, int field_offset)  Returns the length of the specified field  
mysql_field_name(resource result, int field_index)  Gets the name of the specified field in a result  
mysql_field_seek(resource result, int field_offset)  Sets result pointer to a specific field offset  
mysql_field_table(resource result, int field_offset)  Gets name of the table the specified field is in  
mysql_field_type(resource result, int field_offset)  Gets the type of the specified field in a result  
mysql_free_result(resource result)  Free result memory  
mysql_get_client_info(void)  Returns a string that represents the client library version  
mysql_get_host_info([int link_identifier])  Returns a string describing the type of connection in use, including the server host name  
mysql_get_proto_info([int link_identifier])  Returns the protocol version used by current connection  
mysql_get_server_info([int link_identifier])  Returns a string that represents the server version number  
mysql_info([int link_identifier])  Returns a string containing information about the most recent query  
mysql_insert_id([int link_identifier])  Gets the ID generated from the previous INSERT operation  
mysql_list_dbs([int link_identifier])  List databases available on a MySQL server  
mysql_list_fields(string database_name, string table_name [, int link_identifier])  List MySQL result fields  
mysql_list_processes([int link_identifier])  Returns a result set describing the current server threads  
mysql_list_tables(string database_name [, int link_identifier])  List tables in a MySQL database  
mysql_num_fields(resource result)  Gets number of fields in a result  
mysql_num_rows(resource result)  Gets number of rows in a result  
mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])  Opens a persistent connection to a MySQL Server  
mysql_ping([int link_identifier])  Ping a server connection. If no connection then reconnect.  
mysql_query(string query [, int link_identifier])  Sends an SQL query to MySQL  
mysql_real_escape_string(string to_be_escaped [, int link_identifier])  Escape special characters in a string for use in a SQL statement, taking into account the current charset of the connection  
mysql_result(resource result, int row [, mixed field])  Gets result data  
mysql_select_db(string database_name [, int link_identifier])  Selects a MySQL database  
mysql_stat([int link_identifier])  Returns a string containing status information  
mysql_thread_id([int link_identifier])  Returns the thread id of current connection  
mysql_unbuffered_query(string query [, int link_identifier])  Sends an SQL query to MySQL, without fetching and buffering the result rows  
mysqli_affected_rows(object link)  Get number of affected rows in previous MySQL operation  
mysqli_autocommit(object link, bool mode)  Turn auto commit on or of  
mysqli_bind_param(object stmt, array types, mixed variable [,mixed,....])  Bind variables to a prepared statement as parameters  
mysqli_bind_result(object stmt, mixed var, [,mixed, ...])  Bind variables to a prepared statement for result storage  
mysqli_change_user(object link, string user, string password, string database)  Change logged-in user of the active connection  
mysqli_character_set_name(object link)  Returns the name of the character set used for this connection  
mysqli_close(object link)  Close connection  
mysqli_commit(object link)  Commit outstanding actions and close transaction  
mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])  Open a connection to a mysql server  
mysqli_connect_errno()  Returns the numerical value of the error message from last connect command  
mysqli_connect_error()  Returns the text of the error message from previous MySQL operation  
mysqli_data_seek(object result, int offset)  Move internal result pointer  
mysqli_debug(string debug)  
mysqli_disable_reads_from_master(object link)  
mysqli_disable_rpl_parse(object link)  
mysqli_dump_debug_info(object link)  
mysqli_embedded_connect(void)  Open a connection to a embedded mysql server  
mysqli_enable_reads_from_master(object link)  
mysqli_enable_rpl_parse(object link)  
mysqli_errno(object link)  Returns the numerical value of the error message from previous MySQL operation  
mysqli_error(object link)  Returns the text of the error message from previous MySQL operation  
mysqli_execute(object stmt)  Execute a prepared statement  
mysqli_fetch(object stmt)  Fetch results from a prepared statement into the bound variables  
mysqli_fetch_array (object result [,int resulttype])  Fetch a result row as an associative array, a numeric array, or both  
mysqli_fetch_assoc (object result)  Fetch a result row as an associative array  
mysqli_fetch_field (object result)  Get column information from a result and return as an object  
mysqli_fetch_field_direct (object result, int offset)  Fetch meta-data for a single field  
mysqli_fetch_fields (object result)  Return array of objects containing field meta-data  
mysqli_fetch_lengths (object result)  Get the length of each output in a result  
mysqli_fetch_object (object result [, string class_name [, NULL|array ctor_params]])  Fetch a result row as an object  
mysqli_fetch_row (object result)  Get a result row as an enumerated array  
mysqli_field_count(object link)  Fetch the number of fields returned by the last query for the given link   
mysqli_field_seek(object result, int fieldnr)  Set result pointer to a specified field offset   
mysqli_field_tell(object result)  Get current field offset of result pointer  
mysqli_free_result(object result)  Free query result memory for the given result handle  
mysqli_get_client_info(void)   Get MySQL client info  
mysqli_get_host_info (object link)   Get MySQL host info  
mysqli_get_metadata(object stmt)  return result set from statement  
mysqli_get_proto_info(object link)  Get MySQL protocol information  
mysqli_get_server_info(object link)   Get MySQL server info  
mysqli_get_server_version(object link)   Return the MySQL version for the server referenced by the given link  
mysqli_info(object link)  Get information about the most recent query  
mysqli_init(void)  Initialize mysqli and return a resource for use with mysql_real_connect  
mysqli_insert_id(object link)  Get the ID generated from the previous INSERT operation  
mysqli_kill(object link, int processid)  Kill a mysql process on the server  
mysqli_master_query(object link, string query)  Enforce execution of a query on the master in a master/slave setup  
mysqli_more_results(object link)  check if there any more query results from a multi query  
mysqli_multi_query(object link, string query)  Binary-safe version of mysql_query()  
mysqli_next_result(object link)  read next result from multi_query  
mysqli_num_fields(object result)  Get number of fields in result  
mysqli_num_rows(object result)  Get number of rows in result  
mysqli_options(object link, int flags, mixed values)  Set options  
mysqli_param_count(object stmt) {  Return the number of parameter for the given statement  
mysqli_ping(object link)  Ping a server connection or reconnect if there is no connection  
mysqli_prepare(object link, string query)  Prepare a SQL statement for execution  
mysqli_query(object link, string query [,int resultmode])   
mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])  Open a connection to a mysql server  
mysqli_real_escape_string(object link, string escapestr)   Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection  
mysqli_real_query(object link, string query)  Binary-safe version of mysql_query()  
mysqli_rollback(object link)  Undo actions from current transaction  
mysqli_rpl_parse_enabled(object link)  
mysqli_rpl_probe(object link)  
mysqli_rpl_query_type(string query)  
mysqli_select_db(object link, string dbname)  Select a MySQL database  
mysqli_send_long_data(object stmt, int param_nr, string data)  
mysqli_send_query(object link, string query)  
mysqli_server_end(void)  
mysqli_server_init(void)  initialize embedded server  
mysqli_slave_query(object link, string query)  Enforce execution of a query on a slave in a master/slave setup  
mysqli_sqlstate(object link)  Returns the SQLSTATE error from previous MySQL operation  
mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])  
mysqli_stat(object link)   Get current system status  
mysqli_stmt_affected_rows(object stmt)  Return the number of rows affected in the last query for the given link  
mysqli_stmt_close(object stmt)   Close statement  
mysqli_stmt_data_seek(object stmt, int offset)  Move internal result pointer  
mysqli_stmt_errno(object stmt)  
mysqli_stmt_error(object stmt)  
mysqli_stmt_num_rows(object stmt)  Return the number of rows in statements result set  
mysqli_stmt_sqlstate(object stmt)  
mysqli_stmt_store_result(stmt)  
mysqli_store_result(object link)  Buffer result set on client  
mysqli_thread_id(object link)  Return the current thread ID  
mysqli_thread_safe(void)  Return whether thread safety is given or not  
mysqli_use_result(object link)  Directly retrieve query results - do not buffer results on client side  
mysqli_warning_count (object link)  Return number of warnings from the last query for the given link  
natcasesort(array array_arg)  Sort an array using case-insensitive natural sort  
natsort(array array_arg)  Sort an array using natural sort  
ncurses_addch(int ch)  Adds character at current position and advance cursor  
ncurses_addchnstr(string s, int n)  Adds attributed string with specified length at current position  
ncurses_addchstr(string s)  Adds attributed string at current position  
ncurses_addnstr(string s, int n)  Adds string with specified length at current position  
ncurses_addstr(string text)  Outputs text at current position  
ncurses_assume_default_colors(int fg, int bg)  Defines default colors for color 0  
ncurses_attroff(int attributes)  Turns off the given attributes  
ncurses_attron(int attributes)  Turns on the given attributes  
ncurses_attrset(int attributes)  Sets given attributes  
ncurses_baudrate(void)  Returns baudrate of terminal  
ncurses_beep(void)  Let the terminal beep  
ncurses_bkgd(int attrchar)  Sets background property for terminal screen  
ncurses_bkgdset(int attrchar)  Controls screen background  
ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)  Draws a border around the screen using attributed characters  
ncurses_bottom_panel(resource panel)  Moves a visible panel to the bottom of the stack  
ncurses_can_change_color(void)  Checks if we can change terminals colors  
ncurses_cbreak(void)  Switches of input buffering  
ncurses_clear(void)  Clears screen  
ncurses_clrtobot(void)  Clears screen from current position to bottom  
ncurses_clrtoeol(void)  Clears screen from current position to end of line  
ncurses_color_content(int color, int &r, int &g, int &b)  Gets the RGB value for color  
ncurses_color_set(int pair)  Sets fore- and background color  
ncurses_curs_set(int visibility)  Sets cursor state  
ncurses_def_prog_mode(void)  Saves terminals (program) mode  
ncurses_def_shell_mode(void)  Saves terminal (shell) mode 
ncurses_define_key(string definition, int keycode)  Defines a keycode  
ncurses_del_panel(resource panel)  Remove panel from the stack and delete it (but not the associated window)  
ncurses_delay_output(int milliseconds)  Delays output on terminal using padding characters  
ncurses_delch(void)  Deletes character at current position, move rest of line left  
ncurses_deleteln(void)  Deletes line at current position, move rest of screen up  
ncurses_delwin(resource window)  Deletes a ncurses window  
ncurses_doupdate(void)  Writes all prepared refreshes to terminal  
ncurses_echo(void)  Activates keyboard input echo  
ncurses_echochar(int character)  Single character output including refresh  
ncurses_end(void)  Stops using ncurses, clean up the screen  
ncurses_erase(void)  Erases terminal screen  
ncurses_erasechar(void)  Returns current erase character  
ncurses_filter(void)  
ncurses_flash(void)  Flashes terminal screen (visual bell)  
ncurses_flushinp(void)  Flushes keyboard input buffer  
ncurses_getch(void)  Reads a character from keyboard  
ncurses_getmaxyx(resource window, int &y, int &x)  Returns the size of a window  
ncurses_getmouse(array &mevent)  Reads mouse event from queue. The content of mevent is cleared before new data is added.  
ncurses_getyx(resource window, int &y, int &x)  Returns the current cursor position for a window  
ncurses_halfdelay(int tenth)  Puts terminal into halfdelay mode  
ncurses_has_colors(void)  Checks if terminal has colors  
ncurses_has_ic(void)  Checks for insert- and delete-capabilities  
ncurses_has_il(void)  Checks for line insert- and delete-capabilities  
ncurses_has_key(int keycode)  Checks for presence of a function key on terminal keyboard  
ncurses_hide_panel(resource panel)  Remove panel from the stack, making it invisible  
ncurses_hline(int charattr, int n)  Draws a horizontal line at current position using an attributed character and max. n characters long  
ncurses_inch(void)  Gets character and attribute at current position  
ncurses_init(void)  Initializes ncurses  
ncurses_init_color(int color, int r, int g, int b)  Sets new RGB value for color  
ncurses_init_pair(int pair, int fg, int bg)  Allocates a color pair  
ncurses_insch(int character)  Inserts character moving rest of line including character at current position  
ncurses_insdelln(int count)  Inserts lines before current line scrolling down (negative numbers delete and scroll up)  
ncurses_insertln(void)  Inserts a line, move rest of screen down  
ncurses_insstr(string text)  Inserts string at current position, moving rest of line right  
ncurses_instr(string &buffer)  Reads string from terminal screen  
ncurses_isendwin(void)  Ncurses is in endwin mode, normal screen output may be performed  
ncurses_keyok(int keycode, int enable)  Enables or disable a keycode  
ncurses_keypad(resource window, bool bf)  Turns keypad on or off  
ncurses_killchar(void)  Returns current line kill character  
ncurses_longname(void)  Returns terminal description  
ncurses_meta(resource window, bool 8bit)  Enables/Disable 8-bit meta key information  
ncurses_mouse_trafo(int &y, int &x, bool toscreen)  Transforms coordinates  
ncurses_mouseinterval(int milliseconds)  Sets timeout for mouse button clicks  
ncurses_mousemask(int newmask, int &oldmask)  Returns and sets mouse options  
ncurses_move(int y, int x)  Moves output position  
ncurses_move_panel(resource panel, int startx, int starty)  Moves a panel so that it's upper-left corner is at [startx, starty]  
ncurses_mvaddch(int y, int x, int c)  Moves current position and add character  
ncurses_mvaddchnstr(int y, int x, string s, int n)  Moves position and add attrributed string with specified length  
ncurses_mvaddchstr(int y, int x, string s)  Moves position and add attributed string  
ncurses_mvaddnstr(int y, int x, string s, int n)  Moves position and add string with specified length  
ncurses_mvaddstr(int y, int x, string s)  Moves position and add string  
ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)  Moves cursor immediately  
ncurses_mvdelch(int y, int x)  Moves position and delete character, shift rest of line left  
ncurses_mvgetch(int y, int x)  Moves position and get character at new position  
ncurses_mvhline(int y, int x, int attrchar, int n)  Sets new position and draw a horizontal line using an attributed character and max. n characters long  
ncurses_mvinch(int y, int x)  Moves position and get attributed character at new position  
ncurses_mvvline(int y, int x, int attrchar, int n)  Sets new position and draw a vertical line using an attributed character and max. n characters long  
ncurses_mvwaddstr(resource window, int y, int x, string text)  Adds string at new position in window  
ncurses_napms(int milliseconds)  Sleep  
ncurses_new_panel(resource window)  Create a new panel and associate it with window  
ncurses_newpad(int rows, int cols)  Creates a new pad (window)  
ncurses_newwin(int rows, int cols, int y, int x)  Creates a new window  
ncurses_nl(void)  Translates newline and carriage return / line feed  
ncurses_nocbreak(void)  Switches terminal to cooked mode  
ncurses_noecho(void)  Switches off keyboard input echo  
ncurses_nonl(void)  Do not ranslate newline and carriage return / line feed  
ncurses_noqiflush(void)  Do not flush on signal characters 
ncurses_noraw(void)  Switches terminal out of raw mode  
ncurses_pair_content(int pair, int &f, int &b)  Gets the RGB value for color  
ncurses_panel_above(resource panel)  Returns the panel above panel. If panel is null, returns the bottom panel in the stack  
ncurses_panel_below(resource panel)  Returns the panel below panel. If panel is null, returns the top panel in the stack  
ncurses_panel_window(resource panel)  Returns the window associated with panel  
ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)  Copys a region from a pad into the virtual screen  
ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)  Copys a region from a pad into the virtual screen  
ncurses_putp(string text)  
ncurses_qiflush(void)  Flushes on signal characters  
ncurses_raw(void)  Switches terminal into raw mode  
ncurses_refresh(int ch)  Refresh screen  
ncurses_replace_panel(resource panel, resource window)  Replaces the window associated with panel  
ncurses_reset_prog_mode(void)  Resets the prog mode saved by def_prog_mode  
ncurses_reset_shell_mode(void)  Resets the shell mode saved by def_shell_mode  
ncurses_resetty(void)  Restores saved terminal state  
ncurses_savetty(void)  Saves terminal state  
ncurses_scr_dump(string filename)  Dumps screen content to file  
ncurses_scr_init(string filename)  Initializes screen from file dump  
ncurses_scr_restore(string filename)  Restores screen from file dump  
ncurses_scr_set(string filename)  Inherits screen from file dump  
ncurses_scrl(int count)  Scrolls window content up or down without changing current position  
ncurses_show_panel(resource panel)  Places an invisible panel on top of the stack, making it visible  
ncurses_slk_attr(void)  Returns current soft label keys attribute  
ncurses_slk_attroff(int intarg)  
ncurses_slk_attron(int intarg)  
ncurses_slk_attrset(int intarg)  
ncurses_slk_clear(void)  Clears soft label keys from screen  
ncurses_slk_color(int intarg)  Sets color for soft label keys 
ncurses_slk_init(int intarg)  Inits soft label keys  
ncurses_slk_noutrefresh(void)  Copies soft label keys to virtual screen  
ncurses_slk_refresh(void)  Copies soft label keys to screen  
ncurses_slk_restore(void)  Restores soft label keys  
ncurses_slk_set(int labelnr, string label, int format)  Sets function key labels  
ncurses_slk_touch(void)  Forces output when ncurses_slk_noutrefresh is performed  
ncurses_standend(void)  Stops using 'standout' attribute  
ncurses_standout(void)  Starts using 'standout' attribute  
ncurses_start_color(void)  Starts using colors  
ncurses_termattrs(void)  Returns a logical OR of all attribute flags supported by terminal  
ncurses_termname(void)  Returns terminal name  
ncurses_timeout(int millisec)  Sets timeout for special key sequences  
ncurses_top_panel(resource panel)  Moves a visible panel to the top of the stack  
ncurses_typeahead(int fd)  Specifys different filedescriptor for typeahead checking  
ncurses_ungetch(int keycode)  Puts a character back into the input stream  
ncurses_ungetmouse(array mevent)  Pushes mouse event to queue  
ncurses_update_panels(void)  Refreshes the virtual screen to reflect the relations between panels in the stack.  
ncurses_use_default_colors(void)  Assigns terminal default colors to color id -1  
ncurses_use_env(int flag)  Controls use of environment information about terminal size  
ncurses_use_extended_names(bool flag)  Controls use of extended names in terminfo descriptions  
ncurses_vidattr(int intarg)  
ncurses_vline(int charattr, int n)  Draws a vertical line at current position using an attributed character and max. n characters long  
ncurses_waddch(resource window, int ch)  Adds character at current position in a window and advance cursor  
ncurses_waddstr(resource window, string str [, int n])  Outputs text at current postion in window  
ncurses_wattroff(resource window, int attrs)  Turns off attributes for a window  
ncurses_wattron(resource window, int attrs)  Turns on attributes for a window  
ncurses_wattrset(resource window, int attrs)  Set the attributes for a window  
ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)  Draws a border around the window using attributed characters  
ncurses_wclear(resource window)  Clears window  
ncurses_wcolor_set(resource window, int color_pair)  Sets windows color pairings  
ncurses_werase(resource window)  Erase window contents  
ncurses_wgetch(resource window)  Reads a character from keyboard (window)  
ncurses_whline(resource window, int charattr, int n)  Draws a horizontal line in a window at current position using an attributed character and max. n characters long  
ncurses_wmouse_trafo(resource window, int &y, int &x, bool toscreen)  Transforms window/stdscr coordinates  
ncurses_wmove(resource window, int y, int x)  Moves windows output position  
ncurses_wnoutrefresh(resource window)  Copies window to virtual screen  
ncurses_wrefresh(resource window)  Refreshes window on terminal screen  
ncurses_wstandend(resource window)  End standout mode for a window  
ncurses_wstandout(resource window)  Enter standout mode for a window  
ncurses_wvline(resource window, int charattr, int n)  Draws a vertical line in a window at current position using an attributed character and max. n characters long  
next(array array_arg)  Move array argument's internal pointer to the next element and return it  
ngettext(string MSGID1, string MSGID2, int N)  Plural version of gettext()  
nl2br(string str)  Converts newlines to HTML line breaks  
nl_langinfo(int item)  Query language and locale information  
short	  
nsapi_request_headers(void)  Get all headers from the request  
nsapi_response_headers(void)  Get all headers from the response  
nsapi_virtual(string uri)  Perform an NSAPI sub-request  
number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])  Formats a number with grouped thousands  
ob_clean(void)  Clean (delete) the current output buffer  
ob_end_clean(void)  Clean the output buffer, and delete current output buffer  
ob_end_flush(void)  Flush (send) the output buffer, and delete current output buffer  
ob_flush(void)  Flush (send) contents of the output buffer. The last buffer content is sent to next buffer  
ob_get_clean(void)  Get current buffer contents and delete current output buffer  
ob_get_contents(void)  Return the contents of the output buffer  
ob_get_flush(void)  Get current buffer contents, flush (send) the output buffer, and delete current output buffer  
ob_get_length(void)  Return the length of the output buffer  
ob_get_level(void)  Return the nesting level of the output buffer  
ob_get_status([bool full_status])  Return the status of the active or all output buffers  
ob_gzhandler(string str, int mode)  Encode str based on accept-encoding setting - designed to be called from ob_start()  
ob_iconv_handler(string contents, int status)  Returns str in output buffer converted to the iconv.output_encoding character set  
ob_implicit_flush([int flag])  Turn implicit flush on/off and is equivalent to calling flush() after every output call  
ob_list_handlers()  *  List all output_buffers in an array     
ob_start([ string|array user_function [, int chunk_size [, bool erase]]])  Turn on Output Buffering (specifying an optional output handler).  
oci_bind_by_name(resource stmt, string name, mixed &var, [, int maxlength [, int type]])  Bind a PHP variable to an Oracle placeholder by name  
oci_cancel(resource stmt)  Cancel reading from a cursor  
oci_close(resource conn)  Disconnect from database  
oci_collection_append(string value)  Append an object to the collection  
oci_collection_assign(object from)  Assign a collection from another existing collection  
oci_collection_element_assign(int index, string val)  Assign element val to collection at index ndx  
oci_collection_element_get(int ndx)  Retrieve the value at collection index ndx  
oci_collection_max()  Return the max value of a collection. For a varray this is the maximum length of the array  
oci_collection_size()  Return the size of a collection  
oci_collection_trim(int num)  Trim num elements from the end of a collection  
oci_commit(resource conn)  Commit the current context  
oci_connect(string user, string pass [, string db])  Connect to an Oracle database and log on. Returns a new session.  
oci_define_by_name(resource stmt, string name, mixed &var [, int type])  Define a PHP variable to an Oracle column by name  
oci_error([resource stmt|conn|global])  Return the last error of stmt|conn|global. If no error happened returns false.  
oci_execute(resource stmt [, int mode])  Execute a parsed statement  
oci_fetch(resource stmt)  Prepare a new row of data for reading  
oci_fetch_all(resource stmt, array &output[, int skip[, int maxrows[, int flags]]])  Fetch all rows of result data into an array  
oci_fetch_array( resource stmt [, int mode ])  Fetch a result row as an array  
oci_fetch_assoc( resource stmt )  Fetch a result row as an associative array  
oci_fetch_object( resource stmt )  Fetch a result row as an object  
oci_fetch_row( resource stmt )  Fetch a result row as an enumerated array  
oci_field_is_null(resource stmt, int col)  Tell whether a column is NULL  
oci_field_name(resource stmt, int col)  Tell the name of a column  
oci_field_precision(resource stmt, int col)  Tell the precision of a column  
oci_field_scale(resource stmt, int col)  Tell the scale of a column  
oci_field_size(resource stmt, int col)  Tell the maximum data size of a column  
oci_field_type(resource stmt, int col)  Tell the data type of a column  
oci_field_type_raw(resource stmt, int col)  Tell the raw oracle data type of a column  
oci_free_collection()  Deletes collection object 
oci_free_descriptor()  Deletes large object description  
oci_free_statement(resource stmt)  Free all resources associated with a statement  
oci_internal_debug(int onoff)  Toggle internal debugging output for the OCI extension  
oci_lob_append( object lob )  Appends data from a LOB to another LOB  
oci_lob_close()  Closes lob descriptor  
oci_lob_copy( object lob_to, object lob_from [, int length ] )  Copies data from a LOB to another LOB  
oci_lob_eof()  Checks if EOF is reached  
oci_lob_erase( [ int offset [, int length ] ] )  Erases a specified portion of the internal LOB, starting at a specified offset  
oci_lob_export([string filename [, int start [, int length]]])  Writes a large object into a file  
oci_lob_flush( [ int flag ] )  Flushes the LOB buffer  
oci_lob_import( string filename )  Saves a large object to file  
oci_lob_is_equal( object lob1, object lob2 )  Tests to see if two LOB/FILE locators are equal  
oci_lob_load()  Loads a large object  
oci_lob_read( int length )  Reads particular part of a large object  
oci_lob_rewind()  Rewind pointer of a LOB  
oci_lob_save( string data [, int offset ])  Saves a large object  
oci_lob_seek( int offset [, int whence ])  Moves the pointer of a LOB  
oci_lob_size()  Returns size of a large object  
oci_lob_tell()  Tells LOB pointer position  
oci_lob_truncate( [ int length ])  Truncates a LOB  
oci_lob_write( string string [, int length ])  Writes data to current position of a LOB  
oci_lob_write_temporary(string var [, int lob_type])  Writes temporary blob  
oci_new_collection(resource connection, string tdo [, string schema])  Initialize a new collection  
oci_new_connect(string user, string pass [, string db])  Connect to an Oracle database and log on. Returns a new session.  
oci_new_cursor(resource conn)  Return a new cursor (Statement-Handle) - use this to bind ref-cursors!  
oci_new_descriptor(resource connection [, int type])  Initialize a new empty descriptor LOB/FILE (LOB is default)  
oci_num_fields(resource stmt)  Return the number of result columns in a statement  
oci_num_rows(resource stmt)  Return the row count of an OCI statement  
oci_parse(resource conn, string query)  Parse a query and return a statement  
oci_password_change(resource conn, string username, string old_password, string new_password)  Changes the password of an account  
oci_pconnect(string user, string pass [, string db])  Connect to an Oracle database using a persistent connection and log on. Returns a new session.  
oci_result(resource stmt, mixed column)  Return a single column of result data  
oci_rollback(resource conn)  Rollback the current context  
oci_server_version(resource conn)  Return a string containing server version information  
oci_set_prefetch(resource stmt, int prefetch_rows)  Sets the number of rows to be prefetched on execute to prefetch_rows for stmt  
oci_statement_type(resource stmt)  Return the query type of an OCI statement  
ocifetchinto(resource stmt, array &output [, int mode])  Fetch a row of result data into an array  
ocigetbufferinglob()  Returns current state of buffering for a LOB  
ocisetbufferinglob( boolean flag )  Enables/disables buffering for a LOB  
octdec(string octal_number)  Returns the decimal equivalent of an octal string  
odbc_autocommit(resource connection_id [, int OnOff])  Toggle autocommit mode or get status  
odbc_binmode(int result_id, int mode)  Handle binary column data  
odbc_close(resource connection_id)  Close an ODBC connection  
odbc_close_all(void)  Close all ODBC connections  
odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)  Returns a result identifier that can be used to fetch a list of columns and associated privileges for the specified table  
odbc_columns(resource connection_id, string qualifier, string owner, string table_name, string column_name)  Returns a result identifier that can be used to fetch a list of column names in specified tables  
odbc_commit(resource connection_id)  Commit an ODBC transaction  
odbc_connect(string DSN, string user, string password [, int cursor_option])  Connect to a datasource  
odbc_cursor(resource result_id)  Get cursor name  
odbc_data_source(resource connection_id, int fetch_type)  Return information about the currently connected data source  
odbc_error([resource connection_id])  Get the last error code  
odbc_errormsg([resource connection_id])  Get the last error message  
odbc_exec(resource connection_id, string query [, int flags])  Prepare and execute an SQL statement  
odbc_execute(resource result_id [, array parameters_array])  Execute a prepared statement  
odbc_fetch_array(int result [, int rownumber])  Fetch a result row as an associative array  
odbc_fetch_into(resource result_id, array result_array, [, int rownumber])  Fetch one result row into an array  
odbc_fetch_object(int result [, int rownumber])  Fetch a result row as an object  
odbc_fetch_row(resource result_id [, int row_number])  Fetch a row  
odbc_field_len(resource result_id, int field_number)  Get the length (precision) of a column  
odbc_field_name(resource result_id, int field_number)  Get a column name  
odbc_field_num(resource result_id, string field_name)  Return column number  
odbc_field_scale(resource result_id, int field_number)  Get the scale of a column  
odbc_field_type(resource result_id, int field_number)  Get the datatype of a column  
odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)  Returns a result identifier to either a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table  
odbc_free_result(resource result_id)  Free resources associated with a result  
odbc_gettypeinfo(resource connection_id [, int data_type])  Returns a result identifier containing information about data types supported by the data source  
odbc_longreadlen(int result_id, int length)  Handle LONG columns  
odbc_next_result(resource result_id)  Checks if multiple results are avaiable  
odbc_num_fields(resource result_id)  Get number of columns in a result  
odbc_num_rows(resource result_id)  Get number of rows in a result  
odbc_pconnect(string DSN, string user, string password [, int cursor_option])  Establish a persistent connection to a datasource  
odbc_prepare(resource connection_id, string query)  Prepares a statement for execution  
odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)  Returns a result identifier listing the column names that comprise the primary key for a table  
odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])  Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures  
odbc_procedures(resource connection_id [, string qualifier, string owner, string name])  Returns a result identifier containg the list of procedure names in a datasource  
odbc_result(resource result_id, mixed field)  Get result data  
odbc_result_all(resource result_id [, string format])  Print result as HTML table  
odbc_rollback(resource connection_id)  Rollback a transaction  
odbc_setoption(resource conn_id|result_id, int which, int option, int value)  Sets connection or statement options  
odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)  Returns a result identifier containing either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction  
odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)  Returns a result identifier that contains statistics about a single table and the indexes associated with the table  
odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)  Returns a result identifier containing a list of tables and the privileges associated with each table  
odbc_tables(resource connection_id [, string qualifier, string owner, string name, string table_types])  Call the SQLTables function  
opendir(string path)  Open a directory and return a dir_handle  
openlog(string ident, int option, int facility)  Open connection to system logger  
openssl_csr_export(resource csr, string &out [, bool notext=true])  Exports a CSR to file or a var  
openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])  Exports a CSR to file  
openssl_csr_new(array dn, resource &privkey [, array configargs, array extraattribs])  Generates a privkey and CSR  
openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])  Signs a cert with another CERT  
openssl_error_string(void)  Returns a description of the last error, and alters the index of the error messages. Returns false when the are no more messages  
openssl_open(string data, &string opendata, string ekey, mixed privkey)  Opens data  
openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])  Decrypts the S/MIME message in the file name infilename and output the results to the file name outfilename.  recipcert is a CERT for one of the recipients. recipkey specifies the private key matching recipcert, if recipcert does not include the key  
openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])  Encrypts the message in the file named infile with the certificates in recipcerts and output the result to the file named outfile  
openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])  Signs the MIME message in the file named infile with signcert/signkey and output the result to file name outfile. headers lists plain text headers to exclude from the signed portion of the message, and should include to, from and subject as a minimum  
openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts]]])  Verifys that the data block is intact, the signer is who they say they are, and returns the CERTs of the signers  
openssl_pkey_export(mixed key, &mixed out [, string passphrase [, array config_args]])  Gets an exportable representation of a key into a string or file  
openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)  Gets an exportable representation of a key into a file  
openssl_pkey_free(int key)  Frees a key  
openssl_pkey_get_private(string key [, string passphrase])  Gets private keys  
openssl_pkey_get_public(mixed cert)  Gets public key from X.509 certificate  
openssl_pkey_new([array configargs])  Generates a new private key  
openssl_private_decrypt(string data, string decrypted, mixed key [, int padding])  Decrypts data with private key  
openssl_private_encrypt(string data, string crypted, mixed key [, int padding])  Encrypts data with private key  
openssl_public_decrypt(string data, string crypted, resource key [, int padding])  Decrypts data with public key  
openssl_public_encrypt(string data, string crypted, mixed key [, int padding])  Encrypts data with public key  
openssl_seal(string data, &string sealdata, &array ekeys, array pubkeys)  Seals data  
openssl_sign(string data, &string signature, mixed key)  Signs data  
openssl_verify(string data, string signature, mixed key)  Verifys data  
openssl_x509_check_private_key(mixed cert, mixed key)  Checks if a private key corresponds to a CERT  
openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])  Checks the CERT to see if it can be used for the purpose in purpose. cainfo holds information about trusted CAs  
openssl_x509_export(mixed x509, string &out [, bool notext = true])  Exports a CERT to file or a var  
openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])  Exports a CERT to file or a var  
openssl_x509_free(resource x509)  Frees X.509 certificates  
openssl_x509_parse(mixed x509 [, bool shortnames=true])  Returns an array of the fields/values of the CERT  
openssl_x509_read(mixed cert)  Reads X.509 certificates  
ora_bind(resource cursor, string php_variable_name, string sql_parameter_name, int length [, int type])  Bind a PHP variable to an Oracle parameter  
ora_close(resource cursor)  Close an Oracle cursor  
ora_columnname(resource cursor, int column)  Get the name of an Oracle result column  
ora_columnsize(int cursor, int column)  Return the size of the column  
ora_columntype(resource cursor, int column)  Get the type of an Oracle result column  
ora_commit(resource connection)  Commit an Oracle transaction  
ora_commitoff(resource connection)  Disable automatic commit  
ora_commiton(resource connection)  Enable automatic commit  
ora_do(resource connection, resource cursor)  Parse and execute a statement and fetch first result row  
ora_error(resource cursor_or_connection)  Get an Oracle error message  
ora_errorcode(resource cursor_or_connection)  Get an Oracle error code  
ora_exec(resource cursor)  Execute a parsed statement  
ora_fetch(resource cursor)  Fetch a row of result data from a cursor  
ora_fetch_into(resource cursor, array result [, int flags])  Fetch a row into the specified result array  
ora_getcolumn(resource cursor, int column)  Get data from a fetched row  
ora_logoff(resource connection)  Close an Oracle connection  
ora_logon(string user, string password)  Open an Oracle connection  
ora_numcols(resource cursor)  Returns the numbers of columns in a result  
ora_numrows(resource cursor)  Returns the number of rows in a result  
ora_open(resource connection)  Open an Oracle cursor  
ora_parse(resource cursor, string sql_statement [, int defer])  Parse an Oracle SQL statement  
ora_plogon(string user, string password)  Open a persistent Oracle connection  
ora_rollback(resource connection)  Roll back an Oracle transaction  
ord(string character)  Returns ASCII value of character  
output_add_rewrite_var(string name, string value)  Add URL rewriter values  
output_reset_rewrite_vars(void)  Reset(clear) URL rewriter values  
ovrimos_autocommit(int connection_id, int OnOff)  Toggle autocommit mode     There can be problems with pconnections! 
ovrimos_close(int connection)  Close a connection  
ovrimos_commit(int connection_id)  Commit an ovrimos transaction  
ovrimos_connect(string host, string db, string user, string password)  Connect to an Ovrimos database  
ovrimos_cursor(int result_id)  Get cursor name  
ovrimos_exec(int connection_id, string query)  Prepare and execute an SQL statement  
ovrimos_execute(int result_id [, array parameters_array])  Execute a prepared statement  
ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]])  Fetch one result row into an array     how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'      
ovrimos_fetch_row(int result_id [, int how [, int row_number]])  how: 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'     Fetch a row  
ovrimos_field_len(int result_id, int field_number)  Get the length of a column  
ovrimos_field_name(int result_id, int field_number)  Get a column name  
ovrimos_field_num(int result_id, string field_name)  Return column number  
ovrimos_field_type(int result_id, int field_number)  Get the datatype of a column  
ovrimos_free_result(int result_id)  Free resources associated with a result  
ovrimos_longreadlen(int result_id, int length)  Handle LONG columns  
ovrimos_num_fields(int result_id)  Get number of columns in a result  
ovrimos_num_rows(int result_id)  Get number of rows in a result  
ovrimos_prepare(int connection_id, string query)  Prepares a statement for execution  
ovrimos_result(int result_id, mixed field)  Get result data  
ovrimos_result_all(int result_id [, string format])  Print result as HTML table  
ovrimos_rollback(int connection_id)  Rollback a transaction  
ovrimos_setoption(int conn_id|result_id, int which, int option, int value)  Sets connection or statement options  
pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])  Takes one or more arguments and packs them into a binary string according to the format argument  
parse_ini_file(string filename [, bool process_sections])  Parse configuration file  
parse_str(string encoded_string [, array result])  Parses GET/POST/COOKIE data and sets global variables  
parse_url(string url)  Parse a URL and return its components  
passthru(string command [, int &return_value])  Execute an external program and display raw output  
pathinfo(string path)  Returns information about a certain string  
pclose(resource fp)  Close a file pointer opened by popen()  
pcntl_alarm(int seconds)  Set an alarm clock for delivery of a signal 
pcntl_exec(string path [, array args [, array envs]])  Executes specified program in current process space as defined by exec(2)  
pcntl_fork(void)  Forks the currently running process following the same behavior as the UNIX fork() system call 
pcntl_getpriority([int pid [, int process_identifier]])  Get the priority of any process  
pcntl_setpriority(int priority [, int pid [, int process_identifier]])  Change the priority of any process  
pcntl_signal(int signo, callback handle [, bool restart_syscalls])  Assigns a system signal handler to a PHP function  
pcntl_wait(int &status)  Waits on or returns the status of a forked child as defined by the waitpid() system call  
pcntl_waitpid(int pid, int &status, int options)  Waits on or returns the status of a forked child as defined by the waitpid() system call  
pcntl_wexitstatus(int status)   Returns the status code of a child's exit  
pcntl_wifexited(int status)   Returns true if the child status code represents a successful exit  
pcntl_wifsignaled(int status)   Returns true if the child status code represents a process that was terminated due to a signal  
pcntl_wifstopped(int status)   Returns true if the child status code represents a stopped process (WUNTRACED must have been used with waitpid)  
pcntl_wstopsig(int status)   Returns the number of the signal that caused the process to stop who's status code is passed  
pcntl_wtermsig(int status)   Returns the number of the signal that terminated the process who's status code is passed   
pdf_add_annotation(resource pdfdoc, float xll, float yll, float xur, float xur, string title, string text)  Sets annotation (depreciated use pdf_add_note instead)  
pdf_add_bookmark(resource pdfdoc, string text [, int parent [, int open]])  Adds bookmark for current page  
pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename)  Adds link to web resource  
pdf_add_locallink(resource pdfdoc, float llx, float lly, float urx, float ury, int page, string dest)  Adds link to local resource  
pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)  Sets annotation  
pdf_add_pdflink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, int page, string dest)  Adds link to PDF document  
pdf_add_thumbnail(resource pdf, int image);  * Add an existing image as thumbnail for the current page.  
pdf_add_weblink(resource pdfdoc, float llx, float lly, float urx, float ury, string url)  Adds link to web resource  
pdf_arc(resource pdfdoc, float x, float y, float radius, float start, float end)  Draws an arc  
pdf_arcn(resource pdf, float x, float y, float r, float alpha, float beta);  * Draw a clockwise circular arc from alpha to beta degrees.  
pdf_attach_file(resource pdf, float lly, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)  Adds a file attachment annotation at the rectangle specified by his lower left and upper right corners  
pdf_begin_page(resource pdfdoc, float width, float height)  Starts page  
pdf_begin_pattern(resource pdf, float width, float height, float xstep, float ystep, int painttype);  * Start a new pattern definition.  
pdf_begin_template(resource pdf, float width, float height);  * Start a new template definition.  
pdf_circle(resource pdfdoc, float x, float y, float radius)  Draws a circle  
pdf_clip(resource pdfdoc)  Clips to current path  
pdf_close(resource pdfdoc)  Closes the pdf document  
pdf_close_image(resource pdf, int pdfimage)  Closes the PDF image  
pdf_close_pdi(resource pdf, int doc);  * Close all open page handles, and close the input PDF document.  
pdf_close_pdi_page(resource pdf, int page);  * Close the page handle, and free all page-related resources.  
pdf_closepath(resource pdfdoc)  Close path  
pdf_closepath_fill_stroke(resource pdfdoc)  Close, fill and stroke current path  
pdf_closepath_stroke(resource pdfdoc)  Close path and draw line along path  
pdf_concat(resource pdf, float a, float b, float c, float d, float e, float f)  Concatenates a matrix to the current transformation matrix for text and graphics  
pdf_continue_text(resource pdfdoc, string text)  Output text in next line  
pdf_curveto(resource pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3)  Draws a curve  
pdf_delete(resource pdfdoc)  Deletes the PDF object  
pdf_end_page(resource pdfdoc)  Ends page  
pdf_end_pattern(resource pdf);  * Finish the pattern definition.  
pdf_end_template(resource pdf);  * Finish the template definition.  
pdf_endpath(resource pdfdoc)  Ends current path  
pdf_fill(resource pdfdoc)  Fill current path  
pdf_fill_stroke(resource pdfdoc)  Fill and stroke current path  
pdf_findfont(resource pdfdoc, string fontname, string encoding [, int embed])  Prepares the font fontname for later use with pdf_setfont()  
pdf_get_buffer(resource pdfdoc)  Fetches the full buffer containig the generated PDF data  
pdf_get_font(resource pdfdoc)  Gets the current font  
pdf_get_fontname(resource pdfdoc)  Gets the current font name  
pdf_get_fontsize(resource pdfdoc)  Gets the current font size  
pdf_get_image_height(resource pdf, int pdfimage)  Returns the height of an image  
pdf_get_image_width(resource pdf, int pdfimage)  Returns the width of an image  
pdf_get_majorversion()  Returns the major version number of the PDFlib  
pdf_get_minorversion()  Returns the minor version number of the PDFlib  
pdf_get_parameter(resource pdfdoc, string key, mixed modifier)  Gets arbitrary parameters  
pdf_get_pdi_parameter(resource pdf, string key, int doc, int page, int index);  * Get the contents of some PDI document parameter with string type.  
pdf_get_pdi_value(resource pdf, string key, int doc, int page, int index);  * Get the contents of some PDI document parameter with numerical type.  
pdf_get_value(resource pdfdoc, string key, float modifier)  Gets arbitrary value  
pdf_initgraphics(resource pdf);  * Reset all implicit color and graphics state parameters to their defaults.  
pdf_lineto(resource pdfdoc, float x, float y)  Draws a line  
pdf_makespotcolor(resource pdf, string spotname);  * Make a named spot color from the current color.  
pdf_moveto(resource pdfdoc, float x, float y)  Sets current point  
pdf_new()  Creates a new PDF object  
pdf_open([resource filedesc])  Opens a new pdf document. If filedesc is NULL, document is created in memory. This is the old interface, only for compatibility use pdf_new      pdf_open_file instead  
pdf_open_ccitt(resource pdf, string filename, int width, int height, int bitreverse, int k, int blackls1)  Opens an image file with raw CCITT G3 or G4 compresed bitmap data  
pdf_open_file(resource pdfdoc [, string filename])  Opens a new PDF document. If filename is NULL, document is created in memory. This is not yet fully supported  
pdf_open_gif(resource pdf, string giffile)  Opens a GIF file and returns an image for placement in a pdf object  
pdf_open_image(resource pdf, string type, string source, string data, long length, int width, int height, int components, int bpc, string params)  Opens an image of the given type and returns an image for placement in a PDF document  
pdf_open_image_file(resource pdf, string type, string file [, string stringparam, int intparam])  Opens an image file of the given type and returns an image for placement in a PDF document  
pdf_open_jpeg(resource pdf, string jpegfile)  Opens a JPEG file and returns an image for placement in a PDF document  
pdf_open_memory_image(resource pdf, resource image)  Takes an GD image and returns an image for placement in a PDF document  
pdf_open_pdi(resource pdf, string filename, string stringparam, int intparam);  * Open an existing PDF document and prepare it for later use.  
pdf_open_pdi_page(resource pdf, int doc, int page, string label);  * Prepare a page for later use with PDF_place_image().  
pdf_open_png(resource pdf, string pngfile)  Opens a PNG file and returns an image for placement in a PDF document  
pdf_open_tiff(resource pdf, string tifffile)  Opens a TIFF file and returns an image for placement in a PDF document  
pdf_place_image(resource pdf, int pdfimage, float x, float y, float scale)  Places image in the PDF document  
pdf_place_pdi_page(resource pdf, int page, float x, float y, float sx, float sy)  * Place a PDF page with the lower left corner at (x, y), and scale it.  
pdf_rect(resource pdfdoc, float x, float y, float width, float height)  Draws a rectangle  
pdf_restore(resource pdfdoc)  Restores formerly saved enviroment  
pdf_rotate(resource pdfdoc, float angle)  Sets rotation  
pdf_save(resource pdfdoc)  Saves current enviroment  
pdf_scale(resource pdfdoc, float x_scale, float y_scale)  Sets scaling  
pdf_set_border_color(resource pdfdoc, float red, float green, float blue)  Sets color of box surounded all kinds of annotations and links  
pdf_set_border_dash(resource pdfdoc, float black, float white)  Sets the border dash style of all kinds of annotations and links  
pdf_set_border_style(resource pdfdoc, string style, float width)  Sets style of box surounding all kinds of annotations and link  
pdf_set_char_spacing(resource pdfdoc, float space)  Sets character spacing  
pdf_set_duration(resource pdfdoc, float duration)  Sets duration between pages  
pdf_set_font(resource pdfdoc, string font, float size, string encoding [, int embed])  Select the current font face, size and encoding  
pdf_set_horiz_scaling(resource pdfdoc, float scale)  Sets horizontal scaling of text  
pdf_set_info(resource pdfdoc, string fieldname, string value)  Fills an info field of the document  
pdf_set_info_author(resource pdfdoc, string author)  Fills the author field of the document  
pdf_set_info_creator(resource pdfdoc, string creator)  Fills the creator field of the document  
pdf_set_info_keywords(resource pdfdoc, string keywords)  Fills the keywords field of the document  
pdf_set_info_subject(resource pdfdoc, string subject)  Fills the subject field of the document  
pdf_set_info_title(resource pdfdoc, string title)  Fills the title field of the document  
pdf_set_leading(resource pdfdoc, float distance)  Sets distance between text lines  
pdf_set_parameter(resource pdfdoc, string key, string value)  Sets arbitrary parameters  
pdf_set_text_pos(resource pdfdoc, float x, float y)  Sets the position of text for the next pdf_show call  
pdf_set_text_rendering(resource pdfdoc, int mode)  Determines how text is rendered  
pdf_set_text_rise(resource pdfdoc, float value)  Sets the text rise  
pdf_set_transition(resource pdfdoc, int transition)  Sets transition between pages  
pdf_set_value(resource pdfdoc, string key, float value)  Sets arbitrary value  
pdf_set_word_spacing(resource pdfdoc, float space)  Sets spacing between words  
pdf_setcolor(resource pdf, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]]);  * Set the current color space and color.  
pdf_setdash(resource pdfdoc, float black, float white)  Sets dash pattern  
pdf_setflat(resource pdfdoc, float value)  Sets flatness  
pdf_setfont(resource pdfdoc, int font, float fontsize)  Sets the current font in the fiven fontsize  
pdf_setgray(resource pdfdoc, float value)  Sets drawing and filling color to gray value  
pdf_setgray_fill(resource pdfdoc, float value)  Sets filling color to gray value  
pdf_setgray_stroke(resource pdfdoc, float value)  Sets drawing color to gray value  
pdf_setlinecap(resource pdfdoc, int value)  Sets linecap parameter  
pdf_setlinejoin(resource pdfdoc, int value)  Sets linejoin parameter  
pdf_setlinewidth(resource pdfdoc, float width)  Sets line width  
pdf_setmatrix(resource pdf, float a, float b, float c, float d, float e, float f)  Explicitly set the current transformation matrix.  
pdf_setmiterlimit(resource pdfdoc, float value)  Sets miter limit  
pdf_setpolydash(resource pdfdoc, float darray)  Sets more complicated dash pattern  
pdf_setrgbcolor(resource pdfdoc, float red, float green, float blue)  Sets drawing and filling color to RGB color value  
pdf_setrgbcolor_fill(resource pdfdoc, float red, float green, float blue)  Sets filling color to RGB color value  
pdf_setrgbcolor_stroke(resource pdfdoc, float red, float green, float blue)  Sets drawing color to RGB color value  
pdf_show(resource pdfdoc, string text)  Output text at current position  
pdf_show_boxed(resource pdfdoc, string text, float x_koor, float y_koor, float width, float height, string mode [, string feature])  Output text formated in a boxed  
pdf_show_xy(resource pdfdoc, string text, float x_koor, float y_koor)  Output text at position  
pdf_skew(resource pdfdoc, float xangle, float yangle)  Skew the coordinate system  
pdf_stringwidth(resource pdfdoc, string text [, int font, float size])  Returns width of text in current font  
pdf_stroke(resource pdfdoc)  Draw line along path path  
pdf_translate(resource pdfdoc, float x, float y)  Sets origin of coordinate system  
pfpro_cleanup()  Shuts down the Payflow Pro library  
pfpro_init()  Initializes the Payflow Pro library  
pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])  Payflow Pro transaction processing using arrays  
pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])  Raw Payflow Pro transaction processing  
pfpro_version()  Returns the version of the Payflow Pro library  
pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])  Open persistent Internet or Unix domain socket connection  
pg_affected_rows(resource result)  Returns the number of affected tuples  
pg_cancel_query(resource connection)  Cancel request  
pg_client_encoding([resource connection])  Get the current client encoding  
pg_close([resource connection])  Close a PostgreSQL connection  
pg_connect(string connection_string[, int connect_type] | [string host, string port [, string options [, string tty,]]] string database)  Open a PostgreSQL connection  
pg_connection_busy(resource connection)  Get connection is busy or not  
pg_connection_reset(resource connection)  Reset connection (reconnect)  
pg_connection_status(resource connnection)  Get connection status  
pg_convert(resource db, string table, array values[, int options])  Check and convert values for PostgreSQL SQL statement  
pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])  Copy table from array  
pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])  Copy table to array  
pg_dbname([resource connection])  Get the database name  
pg_delete(resource db, string table, array ids[, int options])  Delete records has ids (id=>value)  
pg_end_copy([resource connection])  Sync with backend. Completes the Copy command  
pg_escape_bytea(string data)  Escape binary for bytea type   
pg_escape_string(string data)  Escape string for text/char type  
pg_fetch_all(resource result)  Fetch all rows into array  
pg_fetch_array(resource result [, int row [, int result_type]])  Fetch a row as an array  
pg_fetch_assoc(resource result [, int row])  Fetch a row as an assoc array  
pg_fetch_object(resource result [, string class_name [, NULL|array ctor_params]])  Fetch a row as an object  
pg_fetch_result(resource result, [int row_number,] mixed field_name)  Returns values from a result identifier  
pg_fetch_row(resource result [, int row [, int result_type]])  Get a row as an enumerated array  
pg_field_is_null(resource result, [int row,] mixed field_name_or_number)  Test if a field is NULL  
pg_field_name(resource result, int field_number)  Returns the name of the field  
pg_field_num(resource result, string field_name)  Returns the field number of the named field  
pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)  Returns the printed length  
pg_field_size(resource result, int field_number)  Returns the internal size of the field  
pg_field_type(resource result, int field_number)  Returns the type name for the given field  
pg_free_result(resource result)  Free result memory  
pg_get_notify([resource connection[, result_type]])  Get asynchronous notification  
pg_get_pid([resource connection)  Get backend(server) pid  
pg_get_result(resource connection)  Get asynchronous query result  
pg_host([resource connection])  Returns the host name associated with the connection  
pg_insert(resource db, string table, array values[, int options])  Insert values (filed=>value) to table  
pg_last_error([resource connection])  Get the error message string  
pg_last_notice(resource connection)  Returns the last notice set by the backend  
pg_last_oid(resource result)  Returns the last object identifier  
pg_lo_close(resource large_object)  Close a large object  
pg_lo_create([resource connection])  Create a large object  
pg_lo_export([resource connection, ] int objoid, string filename)  Export large object direct to filesystem  
pg_lo_import([resource connection, ] string filename)  Import large object direct from filesystem  
pg_lo_open([resource connection,] int large_object_oid, string mode)  Open a large object and return fd  
pg_lo_read(resource large_object [, int len])  Read a large object  
pg_lo_read_all(resource large_object)  Read a large object and send straight to browser  
pg_lo_seek(resource large_object, int offset [, int whence])  Seeks position of large object  
pg_lo_tell(resource large_object)  Returns current position of large object  
pg_lo_unlink([resource connection,] string large_object_oid)  Delete a large object  
pg_lo_write(resource large_object, string buf [, int len])  Write a large object  
pg_meta_data(resource db, string table)  Get meta_data  
pg_num_fields(resource result)  Return the number of fields in the result  
pg_num_rows(resource result)  Return the number of rows in the result  
pg_options([resource connection])  Get the options associated with the connection  
pg_parameter_status([resource connection,] string param_name)  Returns the value of a server parameter  
pg_pconnect(string connection_string | [string host, string port [, string options [, string tty,]]] string database)  Open a persistent PostgreSQL connection  
pg_ping([resource connection])  Ping database. If connection is bad, try to reconnect.  
pg_port([resource connection])  Return the port number associated with the connection  
pg_put_line([resource connection,] string query)  Send null-terminated string to backend server 
pg_query([resource connection,] string query)  Execute a query  
pg_result_error(resource result)  Get error message associated with result  
pg_result_seek(resource result, int offset)  Set internal row offset  
pg_result_status(resource result[, long result_type])  Get status of query result  
pg_select(resource db, string table, array ids[, int options])  Select records that has ids (id=>value)  
pg_send_query(resource connection, string qeury)  Send asynchronous query  
pg_set_client_encoding([resource connection,] string encoding)  Set client encoding  
pg_trace(string filename [, string mode [, resource connection]])  Enable tracing a PostgreSQL connection  
pg_tty([resource connection])  Return the tty name associated with the connection  
pg_unescape_bytea(string data)  Unescape binary for bytea type   
pg_untrace([resource connection])  Disable tracing of a PostgreSQL connection  
pg_update(resource db, string table, array fields, array ids[, int options])  Update table using values (field=>value) and ids (id=>value)  
pg_version([resource connection])  Returns an array with client, protocol and server version (when available)  
php_check_syntax(string file_name [, &$error_message])  Check the syntax of the specified file.  
php_egg_logo_guid(void)  Return the special ID used to request the PHP logo in phpinfo screens 
php_ini_scanned_files(void)  Return comma-separated string of .ini files parsed from the additional ini dir  
php_logo_guid(void)  Return the special ID used to request the PHP logo in phpinfo screens 
php_real_logo_guid(void)  Return the special ID used to request the PHP logo in phpinfo screens 
php_sapi_name(void)  Return the current SAPI module name  
php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)  *  * Generic SNMPv3 object fetcher  * From here is passed on the the common internal object fetcher.  *  * st=1   snmp3_get() - query an agent and return a single value.  * st=2   snmp3_getnext() - query an agent and return the next single value.  * st=3   snmp3_walk() - walk the mib and return a single dimensional array   *                       containing the values.  * st=4   snmp3_real_walk() - walk the mib and return an   *                            array of oid,value pairs.  * st=11  snmp3_set() - query an agent and set a single value  *   
php_strip_whitespace(string file_name)  Return source with stripped comments and whitespace  
php_uname(void)  Return information about the system PHP was built on  
phpcredits([int flag])  Prints the list of people who've contributed to the PHP project  
phpinfo([int what])  Output a page of useful information about PHP and the current request  
phpversion([string extension])  Return the current PHP version  
pi(void)  Returns an approximation of pi  
png2wbmp (string f_org, string f_dest, int d_height, int d_width, int threshold)  Convert PNG image to WBMP image  
popen(string command, string mode)  Execute a command and open either a read or a write pipe to it  
posix_ctermid(void)  Generate terminal path name (POSIX.1, 4.7.1)  
posix_get_last_error(void)  Retrieve the error number set by the last posix function which failed.  
posix_getcwd(void)  Get working directory pathname (POSIX.1, 5.2.2)  
posix_getegid(void)  Get the current effective group id (POSIX.1, 4.2.1)  
posix_geteuid(void)  Get the current effective user id (POSIX.1, 4.2.1)  
posix_getgid(void)  Get the current group id (POSIX.1, 4.2.1)  
posix_getgrgid(long gid)   Group database access (POSIX.1, 9.2.1)  
posix_getgrnam(string groupname)  Group database access (POSIX.1, 9.2.1)  
posix_getgroups(void)  Get supplementary group id's (POSIX.1, 4.2.3)  
posix_getlogin(void)   Get user name (POSIX.1, 4.2.4)  
posix_getpgid(void)  Get the process group id of the specified process (This is not a POSIX function, but a SVR4ism, so we compile conditionally)  
posix_getpgrp(void)  Get current process group id (POSIX.1, 4.3.1)  
posix_getpid(void)  Get the current process id (POSIX.1, 4.1.1)  
posix_getppid(void)  Get the parent process id (POSIX.1, 4.1.1)  
posix_getpwnam(string groupname)   User database access (POSIX.1, 9.2.2)  
posix_getpwuid(long uid)   User database access (POSIX.1, 9.2.2)  
posix_getrlimit(void)  Get system resource consumption limits (This is not a POSIX function, but a BSDism and a SVR4ism. We compile conditionally)  
posix_getsid(void)  Get process group id of session leader (This is not a POSIX function, but a SVR4ism, so be compile conditionally)  
posix_getuid(void)  Get the current user id (POSIX.1, 4.2.1)  
posix_isatty(int fd)  Determine if filedesc is a tty (POSIX.1, 4.7.1)  
posix_kill(int pid, int sig)  Send a signal to a process (POSIX.1, 3.3.2)  
posix_mkfifo(string pathname, int mode)  Make a FIFO special file (POSIX.1, 5.4.2)  
posix_setegid(long uid)  Set effective group id  
posix_seteuid(long uid)  Set effective user id  
posix_setgid(int uid)  Set group id (POSIX.1, 4.2.2)  
posix_setpgid(int pid, int pgid)  Set process group id for job control (POSIX.1, 4.3.3)  
posix_setsid(void)  Create session and set process group id (POSIX.1, 4.3.2)  
posix_setuid(long uid)  Set user id (POSIX.1, 4.2.2)  
posix_strerror(int errno)  Retrieve the system error message associated with the given errno.  
posix_times(void)  Get process times (POSIX.1, 4.5.2)  
posix_ttyname(int fd)  Determine terminal device name (POSIX.1, 4.7.2)  
posix_uname(void)  Get system name (POSIX.1, 4.4.1)  
pow(number base, number exponent)  Returns base raised to the power of exponent. Returns integer result when possible  
preg_grep(string regex, array input)  Searches array and returns entries which match regex  
preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset]]])  Perform a Perl-style regular expression match  
preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])  Perform a Perl-style global regular expression match  
preg_quote(string str, string delim_char)  Quote regular expression characters plus an optional character  
preg_replace(mixed regex, mixed replace, mixed subject [, int limit])  Perform Perl-style regular expression replacement.  
preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit])  Perform Perl-style regular expression replacement using replacement callback.  
preg_split(string pattern, string subject [, int limit [, int flags]])   Split string into an array using a perl-style regular expression as a delimiter  
prev(array array_arg)  Move array argument's internal pointer to the previous element and return it  
print_r(mixed var [, bool return])  Prints out or returns information about the specified variable  
printf(string format [, mixed arg1 [, mixed ...]])  Output a formatted string  
proc_close(resource process)  close a process opened by proc_open  
proc_get_status(resource process)  get information about a process opened by proc_open  
proc_nice(int priority)  Change the priority of the current process  
proc_open(string command, array descriptorspec, array &pipes [, string cwd [, array env [, array other_options]]])  Run a process with more control over it's file descriptors  
proc_terminate(resource process [, long signal])  kill a process opened by proc_open  
pspell_add_to_personal(int pspell, string word)  Adds a word to a personal list  
pspell_add_to_session(int pspell, string word)  Adds a word to the current session  
pspell_check(int pspell, string word)  Returns true if word is valid  
pspell_clear_session(int pspell)  Clears the current session  
pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])  Create a new config to be used later to create a manager  
pspell_config_ignore(int conf, int ignore)  Ignore words <= n chars  
pspell_config_mode(int conf, long mode)  Select mode for config (PSPELL_FAST, PSPELL_NORMAL or PSPELL_BAD_SPELLERS)  
pspell_config_personal(int conf, string personal)  Use a personal dictionary for this config  
pspell_config_repl(int conf, string repl)  Use a personal dictionary with replacement pairs for this config  
pspell_config_runtogether(int conf, bool runtogether)  Consider run-together words as valid components  
pspell_config_save_repl(int conf, bool save)  Save replacement pairs when personal list is saved for this config  
pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])  Load a dictionary  
pspell_new_config(int config)  Load a dictionary based on the given config  
pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])  Load a dictionary with a personal wordlist 
pspell_save_wordlist(int pspell)  Saves the current (personal) wordlist  
pspell_store_replacement(int pspell, string misspell, string correct)  Notify the dictionary of a user-selected replacement  
pspell_suggest(int pspell, string word)  Returns array of suggestions  
putenv(string setting)  Set the value of an environment variable  
quoted_printable_decode(string str)  Convert a quoted-printable string to an 8 bit string  
quotemeta(string str)  Quotes meta characters  
rad2deg(float number)  Converts the radian number to the equivalent number in degrees  
rand([int min, int max])  Returns a random number  
range(mixed low, mixed high[, int step])  Create an array containing the range of integers or characters from low to high (inclusive)  
rawurldecode(string str)  Decodes URL-encodes string  
rawurlencode(string str)  URL-encodes string  
readdir([resource dir_handle])  Read directory entry from dir_handle  
readfile(string filename [, bool use_include_path[, resource context]])  Output a file or a URL  
readgzfile(string filename [, int use_include_path])  Output a .gz-file  
readline([string prompt])   Reads a line  
readline_add_history([string prompt])   Adds a line to the history  
readline_clear_history(void)   Clears the history  
readline_completion_function(string funcname)   Readline completion function?  
readline_info([string varname] [, string newvalue])   Gets/sets various internal readline variables.  
readline_list_history(void)   Lists the history  
readline_read_history([string filename] [, int from] [,int to])   Reads the history  
readline_write_history([string filename])   Writes the history  
readlink(string filename)  Return the target of a symbolic link  
realpath(string path)  Return the resolved path  
recode_file(string request, resource input, resource output)  Recode file input into file output according to request  
recode_string(string request, string str)  Recode string str according to request string  
register_shutdown_function(string function_name)  Register a user-level function to be called on request termination  
register_tick_function(string function_name [, mixed arg [, mixed ... ]])  Registers a tick callback function  
rename(string old_name, string new_name[, resource context])  Rename a file  
reset(array array_arg)  Set array argument's internal pointer to the first element and return it  
restore_error_handler(void)  Restores the previously defined error handler function  
restore_exception_handler(void)  Restores the previously defined exception handler function  
restore_include_path()  Restore the value of the include_path configuration option  
rewind(resource fp)  Rewind the position of a file pointer  
rewinddir([resource dir_handle])  Rewind dir_handle back to the start  
rmdir(string dirname[, resource context])  Remove a directory  
round(float number [, int precision])  Returns the number rounded to specified precision  
rsort(array array_arg [, int sort_flags])  Sort an array in reverse order  
rtrim(string str [, string character_mask])  Removes trailing whitespace  
scandir(string dir [, int sorting_order])  List files & directories inside the specified path  
sem_acquire(resource id)  Acquires the semaphore with the given id, blocking if necessary  
sem_get(int key [, int max_acquire [, int perm [, int auto_release]])  Return an id for the semaphore with the given key, and allow max_acquire (default 1) processes to acquire it simultaneously  
sem_release(resource id)  Releases the semaphore with the given id  
sem_remove(resource id)  Removes semaphore from Unix systems  
serialize(mixed variable)  Returns a string representation of variable (which can later be unserialized)  
session_cache_expire([int new_cache_expire])  Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire  
session_cache_limiter([string new_cache_limiter])  Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter  
session_decode(string data)  Deserializes data and reinitializes the variables  
session_destroy(void)  Destroy the current session and all data associated with it  
session_encode(void)  Serializes the current setup and returns the serialized representation  
session_get_cookie_params(void)  Return the session cookie parameters  
session_id([string newid])  Return the current session id. If newid is given, the session id is replaced with newid  
session_is_registered(string varname)  Checks if a variable is registered in session  
session_module_name([string newname])  Return the current module name used for accessing session data. If newname is given, the module name is replaced with newname  
session_name([string newname])  Return the current session name. If newname is given, the session name is replaced with newname  
session_regenerate_id()  Update the current session id with a newly generated one.  
session_register(mixed var_names [, mixed ...])  Adds varname(s) to the list of variables which are freezed at the session end  
session_save_path([string newname])  Return the current save path passed to module_name. If newname is given, the save path is replaced with newname  
session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])  Set session cookie parameters  
session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)  Sets user-level functions  
session_start(void)  Begin session - reinitializes freezed variables, registers browsers etc  
session_unregister(string varname)  Removes varname from the list of variables which are freezed at the session end  
session_unset(void)  Unset all registered variables  
session_write_close(void)  Write session data and end session  
set_error_handler(string error_handler [, int error_types])  Sets a user-defined error handler function.  Returns the previously defined error handler, or false on error  
set_exception_handler(string exception_handler)  Sets a user-defined exception handler function.  Returns the previously defined exception handler, or false on error  
set_include_path(string varname, string newvalue)  Sets the include_path configuration option  
set_magic_quotes_runtime(int new_setting)  Set the current active configuration setting of magic_quotes_runtime and return previous  
set_socket_blocking(resource socket, int mode)  Set blocking/non-blocking mode on a socket  
set_time_limit(int seconds)  Sets the maximum time a script can run  
setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])  Send a cookie  
setlocale(mixed category, string locale [, string ...])  Set locale information  
setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])  Send a cookie with no url encoding of the value  
settype(mixed var, string type)  Set the type of the variable  
short	  
sha1(string str [, bool raw_output])  Calculate the sha1 hash of a string  
sha1_file(string filename [, bool raw_output])  Calculate the sha1 hash of given filename  
shell_exec(string cmd)  Execute command via shell and return complete output as string  
shm_attach(int key [, int memsize [, int perm]])  Creates or open a shared memory segment  
shm_detach(int shm_identifier)  Disconnects from shared memory segment  
shm_get_var(int id, int variable_key)  Returns a variable from shared memory  
shm_put_var(int shm_identifier, int variable_key, mixed variable)  Inserts or updates a variable in shared memory  
shm_remove(int shm_identifier)  Removes shared memory from Unix systems  
shm_remove_var(int id, int variable_key)  Removes variable from shared memory  
shmop_close (int shmid)  closes a shared memory segment  
shmop_delete (int shmid)  mark segment for deletion  
shmop_open (int key, string flags, int mode, int size)  gets and attaches a shared memory segment  
shmop_read (int shmid, int start, int count)  reads from a shm segment  
shmop_size (int shmid)  returns the shm size  
shmop_write (int shmid, string data, int offset)  writes to a shared memory segment  
short dom_node_compare_document_position(node other);  
shuffle(array array_arg)  Randomly shuffle the contents of an array  
similar_text(string str1, string str2 [, float percent])  Calculates the similarity between two strings  
simplexml_import_dom(domNode node [, string class_name])  Get a simplexml_element object from dom to allow for processing  
simplexml_load_file(string filename [, string class_name])  Load a filename and return a simplexml_element object to allow for processing  
simplexml_load_string(string data [, string class_name])  Load a string and return a simplexml_element object to allow for processing  
sin(float number)  Returns the sine of the number in radians  
sinh(float number)  Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2  
sleep(int seconds)  Delay for a given number of seconds  
smfi_addheader(string headerf, string headerv)  Adds a header to the current message.  
smfi_addrcpt(string rcpt)  Add a recipient to the message envelope.  
smfi_chgheader(string headerf, string headerv)  Changes a header's value for the current message.  
smfi_delrcpt(string rcpt)  Removes the named recipient from the current message's envelope.  
smfi_getsymval(string macro)  Returns the value of the given macro or NULL if the macro is not defined.  
smfi_replacebody(string body)  Replaces the body of the current message. If called more than once,     subsequent calls result in data being appended to the new body.  
smfi_setflags(long flags)  Sets the flags describing the actions the filter may take.  
smfi_setreply(string rcode, string xcode, string message)  Directly set the SMTP error reply code for this connection.     This code will be used on subsequent error replies resulting from actions taken by this filter.  
smfi_settimeout(long timeout)  Sets the number of seconds libmilter will wait for an MTA connection before timing out a socket.  
snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])  Fetch the value of a SNMP object  
snmp3_getnext(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])  Fetch the value of a SNMP object  
snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])  Fetch the value of a SNMP object  
snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id, string type, mixed value [, int timeout [, int retries]])  Fetch the value of a SNMP object  
snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])  Fetch the value of a SNMP object  
snmp_get_quick_print(void)  Return the current status of quick_print  
snmp_get_valueretrieval()  Return the method how the SNMP values will be returned  
snmp_read_mib(string filename)  Reads and parses a MIB file into the active MIB tree.  
snmp_set_enum_print(int enum_print)  Return all values that are enums with their enum value instead of the raw integer  
snmp_set_oid_numeric_print(int oid_numeric_print)  Return all objects including their respective object id withing the specified one  
snmp_set_quick_print(int quick_print)  Return all objects including their respective object id withing the specified one  
snmp_set_valueretrieval(int method)  Specify the method how the SNMP values will be returned  
snmpget(string host, string community, string object_id [, int timeout [, int retries]])   Fetch a SNMP object  
snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]])   Fetch a SNMP object  
snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])  Return all objects including their respective object id withing the specified one  
snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])   Set the value of a SNMP object  
snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])   Return all objects under the specified object id  
socket_accept(resource socket)  Accepts a connection on the listening socket fd  
socket_bind(resource socket, string addr [, int port])  Binds an open socket to a listening port, port is only specified in AF_INET family.  
socket_clear_error([resource socket])  Clears the error on the socket or the last error code.  
socket_close(resource socket)  Closes a file descriptor  
socket_connect(resource socket, string addr [, int port])  Opens a connection to addr:port on the socket specified by socket  
socket_create(int domain, int type, int protocol)  Creates an endpoint for communication in the domain specified by domain, of type specified by type  
socket_create_listen(int port[, int backlog])  Opens a socket on port to accept connections  
socket_create_pair(int domain, int type, int protocol, array &fd)  Creates a pair of indistinguishable sockets and stores them in fds.  
socket_get_option(resource socket, int level, int optname)  Gets socket options for the socket  
socket_getpeername(resource socket, string &addr[, int &port])  Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.  
socket_getsockname(resource socket, string &addr[, int &port])  Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.  
socket_last_error([resource socket])  Returns the last socket error (either the last used or the provided socket resource)  
socket_listen(resource socket[, int backlog])  Sets the maximum number of connections allowed to be waited for on the socket specified by fd  
socket_read(resource socket, int length [, int type])  Reads a maximum of length bytes from socket  
socket_recv(resource socket, string &buf, int len, int flags)  Receives data from a connected socket  
socket_recvfrom(resource socket, string &buf, int len, int flags, string &name [, int &port])  Receives data from a socket, connected or not  
socket_select(array &read_fds, array &write_fds, &array except_fds, int tv_sec[, int tv_usec])  Runs the select() system call on the sets mentioned with a timeout specified by tv_sec and tv_usec  
socket_send(resource socket, string buf, int len, int flags)  Sends data to a connected socket  
socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])  Sends a message to a socket, whether it is connected or not  
socket_set_block(resource socket)  Sets blocking mode on a socket resource  
socket_set_nonblock(resource socket)  Sets nonblocking mode on a socket resource  
socket_set_option(resource socket, int level, int optname, int|array optval)  Sets socket options for the socket  
socket_shutdown(resource socket[, int how])  Shuts down a socket for receiving, sending, or both.  
socket_strerror(int errno)  Returns a string describing an error  
socket_write(resource socket, string buf[, int length])  Writes the buffer to the socket resource, length is optional  
solid_fetch_prev(resource result_id)  
sort(array array_arg [, int sort_flags])  Sort an array  
soundex(string str)  Calculate the soundex key of a string  
split(string pattern, string string [, int limit])  Split string into array by regular expression  
spliti(string pattern, string string [, int limit])  Split string into array by regular expression case-insensitive  
sprintf(string format [, mixed arg1 [, mixed ...]])  Return a formatted string  
sql_regcase(string string)  Make regular expression for case insensitive match  
sqlite_array_query(resource db, string query [ , int result_type [, bool decode_binary]])  Executes a query against a given database and returns an array of arrays.  
sqlite_busy_timeout(resource db, int ms)  Set busy timeout duration. If ms <= 0, all busy handlers are disabled.  
sqlite_changes(resource db)  Returns the number of rows that were changed by the most recent SQL statement.  
sqlite_close(resource db)  Closes an open sqlite database.  
sqlite_column(resource result, mixed index_or_name [, bool decode_binary])  Fetches a column from the current row of a result set.  
sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])  Registers an aggregate function for queries.  
sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])  Registers a "regular" function for queries.  
sqlite_current(resource result [, int result_type [, bool decode_binary]])  Fetches the current row from a result set as an array.  
sqlite_error_string(int error_code)  Returns the textual description of an error code.  
sqlite_escape_string(string item)  Escapes a string for use as a query parameter.  
sqlite_factory(string filename [, int mode [, string &error_message]])  Opens a SQLite database and creates an object for it. Will create the database if it does not exist.  
sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])  Fetches all rows from a result set as an array of arrays.  
sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])  Fetches the next row from a result set as an array.  
sqlite_fetch_column_types(string table_name, resource db)  Return an array of column types from a particular table.  
sqlite_fetch_object(resource result [, string class_name [, NULL|array ctor_params [, bool decode_binary]]])  Fetches the next row from a result set as an object.  
sqlite_fetch_single(resource result [, bool decode_binary])  Fetches the first column of a result set as a string.  
sqlite_field_name(resource result, int field_index)  Returns the name of a particular field of a result set.  
sqlite_has_more(resource result)  Returns whether more rows are available.  
sqlite_has_prev(resource result)  * Returns whether a previous row is available.  
sqlite_last_error(resource db)  Returns the error code of the last error for a database.  
sqlite_last_insert_rowid(resource db)  Returns the rowid of the most recently inserted row.  
sqlite_libencoding()  Returns the encoding (iso8859 or UTF-8) of the linked SQLite library.  
sqlite_libversion()  Returns the version of the linked SQLite library.  
sqlite_next(resource result)  Seek to the next row number of a result set.  
sqlite_num_fields(resource result)  Returns the number of fields in a result set.  
sqlite_num_rows(resource result)  Returns the number of rows in a buffered result set.  
sqlite_open(string filename [, int mode [, string &error_message]])  Opens a SQLite database. Will create the database if it does not exist.  
sqlite_popen(string filename [, int mode [, string &error_message]])  Opens a persistent handle to a SQLite database. Will create the database if it does not exist.  
sqlite_prev(resource result)  * Seek to the previous row number of a result set.  
sqlite_query(string query, resource db [, int result_type ])  Executes a query against a given database and returns a result handle.  
sqlite_rewind(resource result)  Seek to the first row number of a buffered result set.  
sqlite_seek(resource result, int row)  Seek to a particular row number of a buffered result set.  
sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])  Executes a query and returns either an array for one single column or the value of the first row.  
sqlite_udf_decode_binary(string data)  Decode binary encoding on a string parameter passed to an UDF.  
sqlite_udf_encode_binary(string data)  Apply binary encoding (if required) to a string to return from an UDF.  
sqlite_unbuffered_query(string query, resource db [ , int result_type ])  Executes a query that does not prefetch and buffer all data.  
sqrt(float number)  Returns the square root of the number  
srand([int seed])  Seeds random number generator  
sscanf(string str, string format [, string ...])  Implements an ANSI C compatible sscanf  
stat(string filename)  Give information about a file  
Reflection::getModifierNames(int modifiers) =static array  Returns an array of modifier names  
Reflection::export(Reflector r [, bool return]) =static mixed  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Class::export(mixed argument, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Extension::export(string name, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Function::export(string name, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Method::export(mixed class, string name, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Object::export(mixed argument, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Parameter::export(mixed function, mixed parameter, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Property::export(mixed class, string name, [, bool return]) =static mixed throws Exception  Exports a reflection object. Returns the output if TRUE is specified for return, printing it otherwise.  
Reflection_Class::newInstance(mixed* args) =stdclass  Returns an instance of this class  
str_ireplace(mixed search, mixed replace, mixed subject [, int &replace_count])  Replaces all occurrences of search in haystack with replace / case-insensitive  
str_pad(string input, int pad_length [, string pad_string [, int pad_type]])  Returns input string padded on the left or right to specified length with pad_string  
str_repeat(string input, int mult)  Returns the input string repeat mult times  
str_replace(mixed search, mixed replace, mixed subject [, int &replace_count])  Replaces all occurrences of search in haystack with replace  
str_rot13(string str)  Perform the rot13 transform on a string  
str_shuffle(string str)  Shuffles string. One permutation of all possible is created  
str_split(string str [, int split_length])  Convert a string to an array. If split_length is specified, break the string down into chunks each split_length characters long.  
str_word_count(string str, [int format])  Counts the number of words inside a string. If format of 1 is specified,     	then the function will return an array containing all the words     	found inside the string. If format of 2 is specified, then the function     	will return an associated array where the position of the word is the key     	and the word itself is the value.     	     	For the purpose of this function, 'word' is defined as a locale dependent     	string containing alphabetic characters, which also may contain, but not start     	with "'" and "-" characters.   
strcasecmp(string str1, string str2)  Binary safe case-insensitive string comparison  
strchr(string haystack, string needle)  An alias for strstr  
strcmp(string str1, string str2)  Binary safe string comparison  
strcoll(string str1, string str2)  Compares two strings using the current locale  
strcspn(string str, string mask [, start [, len]])  Finds length of initial segment consisting entirely of characters not found in mask. If start or/and length is provide works like strcspn(substr($s,$start,$len),$bad_chars)  
stream_bucket_append(resource brigade, resource bucket)  Append bucket to brigade  
stream_bucket_make_writeable(resource brigade)  Return a bucket object from the brigade for operating on  
stream_bucket_new(resource stream, string buffer)  Create a new bucket for use on the current stream  
stream_bucket_prepend(resource brigade, resource bucket)  Prepend bucket to brigade  
stream_context_create([array options])  Create a file context and optionally set parameters  
stream_context_get_options(resource context|resource stream)  Retrieve options for a stream/wrapper/context  
stream_context_set_option(resource context|resource stream, string wrappername, string optionname, mixed value)  Set an option for a wrapper  
stream_context_set_params(resource context|resource stream, array options)  Set parameters for a file context  
stream_copy_to_stream(resource source, resource dest [, long maxlen ])  Reads up to maxlen bytes from source stream and writes them to dest stream.  
stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])  Append a filter to a stream  
stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])  Prepend a filter to a stream  
stream_filter_register(string filtername, string classname)  Registers a custom filter handler class  
stream_get_contents(resource source [, long maxlen ])  Reads all remaining bytes (or up to maxlen bytes) from a stream and returns them as a string.  
stream_get_filters(void)  Returns a list of registered filters  
stream_get_line(resource stream, int maxlen, string ending)  Read up to maxlen bytes from a stream or until the ending string is found  
stream_get_meta_data(resource fp)  Retrieves header/meta data from streams/file pointers  
stream_get_transports()  Retrieves list of registered socket transports  
stream_get_wrappers()  Retrieves list of registered stream wrappers  
stream_select(array &read_streams, array &write_streams, array &except_streams, int tv_sec[, int tv_usec])  Runs the select() system call on the sets of streams with a timeout specified by tv_sec and tv_usec  
stream_set_blocking(resource socket, int mode)  Set blocking/non-blocking mode on a socket or stream  
stream_set_timeout(resource stream, int seconds, int microseconds)  Set timeout on stream read to seconds      microseonds  
stream_set_write_buffer(resource fp, int buffer)  Set file write buffer  
stream_socket_accept(resource serverstream, [ double timeout, string &peername ])  Accept a client connection from a server socket  
stream_socket_client(string remoteaddress [, long &errcode, string &errstring, double timeout, long flags, resource context])  Open a client connection to a remote address  
stream_socket_get_name(resource stream, bool want_peer)  Returns either the locally bound or remote name for a socket stream  
stream_socket_recvfrom(resource stream, long amount [, long flags [, string &remote_addr]])  Receives data from a socket stream  
stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])  Send data to a socket stream.  If target_addr is specified it must be in dotted quad (or [ipv6]) format  
stream_socket_server(string localaddress [, long &errcode, string &errstring, long flags, resource context])  Create a server socket bound to localaddress  
stream_wrapper_register(string protocol, string classname)  Registers a custom URL protocol handler class  
strftime(string format [, int timestamp])  Format a local time/date according to locale settings  
Reflection_Class::__toString() =string  Returns a string representation  
Reflection_Class::getDocComment() =string  Returns the doc comment for this class  
Reflection_Class::getFileName() =string  Returns the filename of the file this class was declared in  
Reflection_Class::getName() =string  Returns the class' name  
Reflection_Extension::__toString() =string  Returns a string representation  
Reflection_Extension::getName() =string  Returns this extension's name  
Reflection_Extension::getVersion() =string  Returns this extension's version  
Reflection_Function::__toString() =string  Returns a string representation  
Reflection_Function::getDocComment() =string  Returns the doc comment for this function  
Reflection_Function::getFileName() =string  Returns the filename of the file this function was declared in  
Reflection_Function::getName() =string  Returns this function's name  
Reflection_Method::__toString() =string  Returns a string representation  
Reflection_Parameter::__toString() =string  Returns a string representation  
Reflection_Parameter::getName() =string  Returns this parameters's name  
Reflection_Property::__toString() =string  Returns a string representation  
Reflection_Property::getName() =string  Returns the class' name  
strip_tags(string str [, string allowable_tags])  Strips HTML and PHP tags from a string  
stripcslashes(string str)  Strips backslashes from a string. Uses C-style conventions  
stripos(string haystack, string needle [, int offset])  Finds position of first occurrence of a string within another, case insensitive  
stripslashes(string str)  Strips backslashes from a string  
stristr(string haystack, string needle)  Finds first occurrence of a string within another, case insensitive  
strlen(string str)  Get string length  
strnatcasecmp(string s1, string s2)  Returns the result of case-insensitive string comparison using 'natural' algorithm  
strnatcmp(string s1, string s2)  Returns the result of string comparison using 'natural' algorithm  
strncasecmp(string str1, string str2, int len)  Binary safe string comparison  
strncmp(string str1, string str2, int len)  Binary safe string comparison  
strpbrk(string haystack, string char_list)  Search a string for any of a set of characters  
strpos(string haystack, string needle [, int offset])  Finds position of first occurrence of a string within another  
strrchr(string haystack, string needle)  Finds the last occurrence of a character in a string within another  
strrev(string str)  Reverse a string  
strripos(string haystack, string needle [, int offset])  Finds position of last occurrence of a string within another string  
strrpos(string haystack, string needle [, int offset])  Finds position of last occurrence of a string within another string  
strspn(string str, string mask [, start [, len]])  Finds length of initial segment consisting entirely of characters found in mask. If start or/and length is provided works like strspn(substr($s,$start,$len),$good_chars)  
strstr(string haystack, string needle)  Finds first occurrence of a string within another  
strtok([string str,] string token)  Tokenize a string  
strtolower(string str)  Makes a string lowercase  
strtotime(string time, int now)  Convert string representation of date and time to a timestamp  
strtoupper(string str)  Makes a string uppercase  
strtr(string str, string from, string to)  Translates characters in str using given translation tables  
strval(mixed var)  Get the string value of a variable  
substr(string str, int start [, int length])  Returns part of a string  
substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])  Binary safe optionally case insensitive comparison of 2 strings from an offset, up to length characters  
substr_count(string haystack, string needle)  Returns the number of times a substring occurs in the string  
substr_replace(mixed str, mixed repl, mixed start [, mixed length])  Replaces part of a string with another string  
swfaction_init(string)  Returns a new SWFAction object, compiling the given script  
swfbitmap_getHeight(void)  Returns the height of this bitmap  
swfbitmap_getWidth(void)  Returns the width of this bitmap  
swfbitmap_init(mixed file [, mixed maskfile])  Returns a new SWFBitmap object from jpg (with optional mask) or dbl file  
swfbutton_addAction(object SWFAction, int flags)  Sets the action to perform when conditions described in flags is met  
swfbutton_addShape(object SWFCharacter, int flags)  Sets the character to display for the condition described in flags  
swfbutton_init(void)  Returns a new SWFButton object  
swfbutton_keypress(string str)  Returns the action flag for keyPress(char)  
swfbutton_setAction(object SWFAction)  Sets the action to perform when button is pressed  
swfbutton_setDown(object SWFCharacter)  Sets the character for this button's down state  
swfbutton_setHit(object SWFCharacter)  Sets the character for this button's hit test state  
swfbutton_setMenu(int flag)  enable track as menu button behaviour  
swfbutton_setOver(object SWFCharacter)  Sets the character for this button's over state  
swfbutton_setUp(object SWFCharacter)  Sets the character for this button's up state  
swfdisplayitem_addAction(object SWFAction, int flags)  Adds this SWFAction to the given SWFSprite instance  
swfdisplayitem_addColor(int r, int g, int b [, int a])  Sets the add color part of this SWFDisplayItem's CXform to (r, g, b [, a]), a defaults to 0  
swfdisplayitem_endMask()  another way of defining a MASK layer  
swfdisplayitem_move(float dx, float dy)  Displaces this SWFDisplayItem by (dx, dy) in movie coordinates  
swfdisplayitem_moveTo(int x, int y)  Moves this SWFDisplayItem to movie coordinates (x, y)  
swfdisplayitem_multColor(float r, float g, float b [, float a])  Sets the multiply color part of this SWFDisplayItem's CXform to (r, g, b [, a]), a defaults to 1.0  
swfdisplayitem_rotate(float degrees)  Rotates this SWFDisplayItem the given (clockwise) degrees from its current orientation  
swfdisplayitem_rotateTo(float degrees)  Rotates this SWFDisplayItem the given (clockwise) degrees from its original orientation  
swfdisplayitem_scale(float xScale, float yScale)  Multiplies this SWFDisplayItem's current x scale by xScale, its y scale by yScale  
swfdisplayitem_scaleTo(float xScale [, float yScale])  Scales this SWFDisplayItem by xScale in the x direction, yScale in the y, or both to xScale if only one arg  
swfdisplayitem_setDepth(int depth)  Sets this SWFDisplayItem's z-depth to depth.  Items with higher depth values are drawn on top of those with lower values  
swfdisplayitem_setMaskLevel(int level)  defines a MASK layer at level  
swfdisplayitem_setMatrix(float a, float b, float c, float d, float x, float y)  Sets the item's transform matrix  
swfdisplayitem_setName(string name)  Sets this SWFDisplayItem's name to name  
swfdisplayitem_setRatio(float ratio)  Sets this SWFDisplayItem's ratio to ratio.  Obviously only does anything if displayitem was created from an SWFMorph  
swfdisplayitem_skewX(float xSkew)  Adds xSkew to this SWFDisplayItem's x skew value  
swfdisplayitem_skewXTo(float xSkew)  Sets this SWFDisplayItem's x skew value to xSkew  
swfdisplayitem_skewY(float ySkew)  Adds ySkew to this SWFDisplayItem's y skew value  
swfdisplayitem_skewYTo(float ySkew)  Sets this SWFDisplayItem's y skew value to ySkew  
swffill_init(void)  Returns a new SWFFill object  
swffill_moveTo(float x, float y)  Moves this SWFFill to shape coordinates (x,y)  
swffill_rotateTo(float degrees)  Rotates this SWFFill the given (clockwise) degrees from its original orientation  
swffill_scaleTo(float xScale [, float yScale])  Scales this SWFFill by xScale in the x direction, yScale in the y, or both to xScale if only one arg  
swffill_skewXTo(float xSkew)  Sets this SWFFill's x skew value to xSkew  
swffill_skewYTo(float ySkew)  Sets this SWFFill's y skew value to ySkew  
swffont_addChars(string)  adds characters to a font required within textfields  
swffont_getAscent(void)  Returns the ascent of the font, or 0 if not available  
swffont_getDescent(void)  Returns the descent of the font, or 0 if not available  
swffont_getLeading(void)  Returns the leading of the font, or 0 if not available  
swffont_getUTF8Width(string)  Calculates the width of the given string in this font at full height  
swffont_getWideWidth(string)  Calculates the width of the given string in this font at full height  
swffont_getWidth(string str)  Calculates the width of the given string in this font at full height  
swffont_init(string filename)  Returns a new SWFFont object from given file  
swffontchar_addChars(string)  adds characters to a font for exporting font  
swfgradient_addEntry(float ratio, int r, int g, int b [, int a])  Adds given entry to the gradient  
swfgradient_init(void)  Returns a new SWFGradient object  
swfmorph_getShape1(void)  Return's this SWFMorph's start shape object  
swfmorph_getShape2(void)  Return's this SWFMorph's start shape object  
swfmorph_init(void)  Returns a new SWFMorph object  
swfmovie_add(object SWFBlock)   
swfmovie_init(int version)   Creates swfmovie object according to the passed version  
swfmovie_labelframe(string label)  Labels frame  
swfmovie_nextframe(void)    
swfmovie_output([int compression])  
swfmovie_save(mixed where [, int compression])  Saves the movie. 'where' can be stream and the movie will be saved there otherwise it is treated as string and written in file with that name  
swfmovie_saveToFile(stream x [, int compression])  
swfmovie_setBackground(int r, int g, int b)  Sets background color (r,g,b)  
swfmovie_setDimension(float x, float y)  Sets movie dimension  
swfmovie_setFrames(int frames)  Sets number of frames  
swfmovie_setRate(float rate)  Sets movie rate  
swfmovie_streamMp3(mixed file)  Sets sound stream of the SWF movie. The parameter can be stream or string.  
swfshape_addfill(mixed arg1, int arg2, [int b [, int a]])  Returns a fill object, for use with swfshape_setleftfill and swfshape_setrightfill. If 1 or 2 parameter(s) is (are) passed first should be object (from gradient class) and the second int (flags). Gradient fill is performed. If 3 or 4 parameters are passed : r, g, b [, a]. Solid fill is performed.  
swfshape_drawarc(float r, float startAngle, float endAngle)  Draws an arc of radius r centered at the current location, from angle startAngle to angle endAngle measured counterclockwise from 12 o'clock  
swfshape_drawcircle(float r)  Draws a circle of radius r centered at the current location, in a counter-clockwise fashion  
swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)  Draws a cubic bezier curve using the current position and the three given points as control points  
swfshape_drawcurve(float adx, float ady, float bdx, float bdy [, float cdx, float cdy])  Draws a curve from the current pen position (x, y) to the point (x+bdx, y+bdy) in the current line style, using point (x+adx, y+ady) as a control point or draws a cubic bezier to point (x+cdx, x+cdy) with control points (x+adx, y+ady) and (x+bdx, y+bdy)  
swfshape_drawcurveto(float ax, float ay, float bx, float by [, float dx, float dy])  Draws a curve from the current pen position (x,y) to the point (bx, by) in the current line style, using point (ax, ay) as a control point. Or draws a cubic bezier to point (dx, dy) with control points (ax, ay) and (bx, by)  
swfshape_drawglyph(SWFFont font, string character [, int size])  Draws the first character in the given string into the shape using the glyph definition from the given font  
swfshape_drawline(float dx, float dy)  Draws a line from the current pen position (x, y) to the point (x+dx, y+dy) in the current line style  
swfshape_drawlineto(float x, float y)  Draws a line from the current pen position to shape coordinates (x, y) in the current line style  
swfshape_init(void)  Returns a new SWFShape object  
swfshape_movepen(float x, float y)  Moves the pen from its current location by vector (x, y)  
swfshape_movepento(float x, float y)  Moves the pen to shape coordinates (x, y)  
swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])  Sets the right side fill style to fill in case only one parameter is passed. When 3 or 4 parameters are passed they are treated as : int r, int g, int b, int a . Solid fill is performed in this case before setting right side fill type.  
swfshape_setline(int width, int r, int g, int b [, int a])  Sets the current line style for this SWFShape  
swfsound_init(string filename, int flags)  Returns a new SWFSound object from given file  
swfsprite_add(object SWFCharacter)  Adds the character to the sprite, returns a displayitem object  
swfsprite_init(void)  Returns a new SWFSprite object  
swfsprite_labelFrame(string label)  Labels frame  
swfsprite_nextFrame(void)  Moves the sprite to the next frame  
swfsprite_remove(object SWFDisplayItem)  Remove the named character from the sprite's display list  
swfsprite_setFrames(int frames)  Sets the number of frames in this SWFSprite  
swftext_addString(string text)  Writes the given text into this SWFText object at the current pen position, using the current font, height, spacing, and color  
swftext_addUTF8String(string text)  Writes the given text into this SWFText object at the current pen position,     using the current font, height, spacing, and color  
swftext_addWideString(string text)  Writes the given text into this SWFText object at the current pen position,     using the current font, height, spacing, and color  
swftext_getAscent(void)  Returns the ascent of the current font at its current size, or 0 if not available  
swftext_getDescent(void)  Returns the descent of the current font at its current size, or 0 if not available  
swftext_getLeading(void)  Returns the leading of the current font at its current size, or 0 if not available  
swftext_getUTF8Width(string)  calculates the width of the given string in this text objects current font and size  
swftext_getWideWidth(string)  calculates the width of the given string in this text objects current font and size  
swftext_getWidth(string str)  Calculates the width of the given string in this text objects current font and size  
swftext_init(void)  Returns new SWFText object  
swftext_moveTo(float x, float y)  Moves this SWFText object's current pen position to (x, y) in text coordinates  
swftext_setColor(int r, int g, int b [, int a])  Sets this SWFText object's current color to the given color  
swftext_setFont(object font)  Sets this SWFText object's current font to given font  
swftext_setHeight(float height)  Sets this SWFText object's current height to given height  
swftext_setSpacing(float spacing)  Sets this SWFText object's current letterspacing to given spacing  
swftextfield_addChars(string)  adds characters to a font that will be available within a textfield  
swftextfield_addString(string str)  Adds the given string to this textfield  
swftextfield_align(int alignment)  Sets the alignment of this textfield  
swftextfield_init([int flags])  Returns a new SWFTextField object  
swftextfield_setBounds(float width, float height)  Sets the width and height of this textfield  
swftextfield_setColor(int r, int g, int b [, int a])  Sets the color of this textfield  
swftextfield_setFont(object font)  Sets the font for this textfield  
swftextfield_setHeight(float height)  Sets the font height of this textfield  
swftextfield_setIndentation(float indentation)  Sets the indentation of the first line of this textfield  
swftextfield_setLeftMargin(float margin)  Sets the left margin of this textfield  
swftextfield_setLineSpacing(float space)  Sets the line spacing of this textfield  
swftextfield_setMargins(float left, float right)  Sets both margins of this textfield  
swftextfield_setName(string var_name)  Sets the variable name of this textfield  
swftextfield_setPadding(float padding)  Sets the padding of this textfield  
swftextfield_setRightMargin(float margin)  Sets the right margin of this textfield  
sybase_affected_rows([int link_id])  Get number of affected rows in last query  
sybase_close([int link_id])  Close Sybase connection  
sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])  Open Sybase server connection  
sybase_data_seek(int result, int offset)  Move internal row pointer  
sybase_deadlock_retry_count(int retry_count)  Sets deadlock retry count  
sybase_fetch_array(int result)  Fetch row as array  
sybase_fetch_assoc(int result)  Fetch row as array without numberic indices  
sybase_fetch_field(int result [, int offset])  Get field information  
sybase_fetch_object(int result [, mixed object])  Fetch row as object  
sybase_fetch_row(int result)  Get row as enumerated array  
sybase_field_seek(int result, int offset)  Set field offset  
sybase_free_result(int result)  Free result memory  
sybase_get_last_message(void)  Returns the last message from server (over min_message_severity)  
sybase_min_client_severity(int severity)  Sets minimum client severity  
sybase_min_error_severity(int severity)  Sets the minimum error severity  
sybase_min_message_severity(int severity)  Sets the minimum message severity  
sybase_min_server_severity(int severity)  Sets minimum server severity  
sybase_num_fields(int result)  Get number of fields in result  
sybase_num_rows(int result)  Get number of rows in result  
sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])  Open persistent Sybase connection  
sybase_query(string query [, int link_id])  Send Sybase query  
sybase_result(int result, int row, mixed field)  Get result data  
sybase_select_db(string database [, int link_id])  Select Sybase database  
sybase_set_message_handler(mixed error_func [, resource connection])  Set the error handler, to be called when a server message is raised.      If error_func is NULL the handler will be deleted  
sybase_unbuffered_query(string query [, int link_id])  Send Sybase query  
symlink(string target, string link)  Create a symbolic link  
syslog(int priority, string message)  Generate a system log message  
system(string command [, int &return_value])  Execute an external program and display output  
tan(float number)  Returns the tangent of the number in radians  
tanh(float number)  Returns the hyperbolic tangent of the number, defined as sinh(number)/cosh(number)  
tempnam(string dir, string prefix)  Create a unique filename in a directory  
textdomain(string domain)  Set the textdomain to "domain". Returns the current domain  
tidy_access_count()  Returns the Number of Tidy accessibility warnings encountered for specified document.  
tidy_clean_repair()  Execute configured cleanup and repair operations on parsed markup  
tidy_config_count()  Returns the Number of Tidy configuration errors encountered for specified document.  
tidy_diagnose()  Run configured diagnostics on parsed and repaired markup.  
tidy_error_count()  Returns the Number of Tidy errors encountered for specified document.  
tidy_get_body(resource tidy)  Returns a TidyNode Object starting from the <BODY> tag of the tidy parse tree  
tidy_get_config()  Get current Tidy configuarion  
tidy_get_error_buffer([boolean detailed])  Return warnings and errors which occured parsing the specified document 
tidy_get_head()  Returns a TidyNode Object starting from the <HEAD> tag of the tidy parse tree  
tidy_get_html()  Returns a TidyNode Object starting from the <HTML> tag of the tidy parse tree  
tidy_get_html_ver()  Get the Detected HTML version for the specified document.  
tidy_get_output()  Return a string representing the parsed tidy markup  
tidy_get_release()  Get release date (version) for Tidy library  
tidy_get_root()  Returns a TidyNode Object representing the root of the tidy parse tree  
tidy_get_status()  Get status of specfied document.  
tidy_getopt(string option)  Returns the value of the specified configuration option for the tidy document.  
tidy_is_xhtml()  Indicates if the document is a generic (non HTML/XHTML) XML document.  
tidy_node::has_children()  Returns true if this node has children  
tidy_node::has_siblings()  Returns true if this node has siblings  
tidy_node::is_asp()  Returns true if this node is ASP  
tidy_node::is_comment()  Returns true if this node represents a comment  
tidy_node::is_html()  Returns true if this node is part of a HTML document  
tidy_node::is_jste()  Returns true if this node is JSTE  
tidy_node::is_php()  Returns true if this node is PHP  
tidy_node::is_text()  Returns true if this node represents text (no markup)  
tidy_node::is_xhtml()  Returns true if this node is part of a XHTML document  
tidy_node::is_xml()  Returns true if this node is part of a XML document  
tidy_node::tidy_node()  Constructor.  
tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])  Parse markup in file or URI  
tidy_parse_string(string input [, mixed config_options [, string encoding]])  Parse a document stored in a string  
tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])  Repair a file using an optionally provided configuration file  
tidy_repair_string(string data [, mixed config_file [, string encoding]])  Repair a string using an optionally provided configuration file  
tidy_warning_count()  Returns the Number of Tidy warnings encountered for specified document.  
time(void)  Return current UNIX timestamp  
time_nanosleep(long seconds, long nanoseconds)  Delay for a number of seconds and nano seconds  
tmpfile(void)  Create a temporary file that will be deleted automatically after use  
token_get_all(string source)  
token_name(int type)  *	Unregisters a previously loaded function    
touch(string filename [, int time [, int atime]])  Set modification time of file  
trigger_error(string messsage [, int error_type])  Generates a user-level error/warning/notice message  
trim(string str [, string character_mask])  Strips whitespace from the beginning and end of a string  
uasort(array array_arg, string cmp_function)  Sort an array with a user-defined comparison function and maintain index association  
ucfirst(string str)  Makes a string's first character uppercase  
ucwords(string str)  Uppercase the first character of every word in a string  
udm_add_search_limit(int agent, int var, string val)  Add mnoGoSearch search restrictions  
udm_alloc_agent(string dbaddr [, string dbmode])  Allocate mnoGoSearch session  
udm_alloc_agent_array(array dbaddr)  Allocate mnoGoSearch session  
udm_api_version()  Get mnoGoSearch API version  
udm_cat_list(int agent, string category)  Get mnoGoSearch categories list with the same root  
udm_cat_path(int agent, string category)  Get mnoGoSearch categories path from the root to the given catgory  
udm_check_charset(int agent, string charset)  Check if the given charset is known to mnogosearch  
udm_check_stored(int agent, int link, string doc_id)  Open connection to stored   
udm_clear_search_limits(int agent)  Clear all mnoGoSearch search restrictions  
udm_close_stored(int agent, int link)  Open connection to stored   
udm_crc32(int agent, string str)  Return CRC32 checksum of gived string  
udm_errno(int agent)  Get mnoGoSearch error number  
udm_error(int agent)  Get mnoGoSearch error message  
udm_find(int agent, string query)  Perform search  
udm_free_agent(int agent)  Free mnoGoSearch session  
udm_free_ispell_data(int agent)  Free memory allocated for ispell data  
udm_free_res(int res)  mnoGoSearch free result  
udm_get_doc_count(int agent)  Get total number of documents in database  
udm_get_res_field(int res, int row, int field)  Fetch mnoGoSearch result field  
udm_get_res_field_ex(int res, int row, string field)  Fetch mnoGoSearch result field  
udm_get_res_param(int res, int param)  Get mnoGoSearch result parameters  
udm_hash32(int agent, string str)  Return Hash32 checksum of gived string  
udm_load_ispell_data(int agent, int var, string val1, [string charset], string val2, int flag)  Load ispell data  
udm_make_excerpt(int agent, int res, int row)  Perform search  
udm_open_stored(int agent, string storedaddr)  Open connection to stored   
udm_parse_query_string(int agent, string str)  Parses query string, initialises variables and search limits taken from it  
udm_set_agent_param(int agent, int var, string val)  Set mnoGoSearch agent session parameters  
udm_set_agent_param_ex(int agent, string var, string val)  Set mnoGoSearch agent session parameters extended  
uksort(array array_arg, string cmp_function)  Sort an array by keys using a user-defined comparison function  
umask([int mask])  Return or change the umask  
uniqid([string prefix , bool more_entropy])  Generates a unique ID  
unixtojd([int timestamp])  Convert UNIX timestamp to Julian Day  
unlink(string filename[, context context])  Delete a file  
unpack(string format, string input)  Unpack binary string into named array elements according to format argument  
unregister_tick_function(string function_name)  Unregisters a tick callback function  
unserialize(string variable_representation)  Takes a string representation of variable and recreates it  
urldecode(string str)  Decodes URL-encoded string  
urlencode(string str)  URL-encodes string  
usleep(int micro_seconds)  Delay for a given number of micro seconds  
usort(array array_arg, string cmp_function)  Sort an array by values using a user-defined comparison function  
utf8_decode(string data)   Converts a UTF-8 encoded string to ISO-8859-1  
utf8_encode(string data)   Encodes an ISO-8859-1 string to UTF-8  
uudecode(string data)  decode a uuencoded string  
uuencode(string data)   uuencode a string  
var_dump(mixed var)  Dumps a string representation of variable to output  
var_export(mixed var [, bool return])  Outputs or returns a string representation of a variable  
variant_abs(mixed left)  Returns the absolute value of a variant  
variant_add(mixed left, mixed right)  "Adds" two variant values together and returns the result  
variant_and(mixed left, mixed right)  performs a bitwise AND operation between two variants and returns the result  
variant_cast(object variant, int type)  Convert a variant into a new variant object of another type  
variant_cat(mixed left, mixed right)  concatenates two variant values together and returns the result  
variant_cmp(mixed left, mixed right [, int lcid [, int flags]])  Compares two variants  
variant_date_from_timestamp(int timestamp)  Returns a variant date representation of a unix timestamp  
variant_date_to_timestamp(object variant)  Converts a variant date/time value to unix timestamp  
variant_div(mixed left, mixed right)  Returns the result from dividing two variants  
variant_eqv(mixed left, mixed right)  Performs a bitwise equivalence on two variants  
variant_fix(mixed left)  Returns the ? of a variant  
variant_get_type(object variant)  Returns the VT_XXX type code for a variant  
variant_idiv(mixed left, mixed right)  Converts variants to operands and then returns the result from dividing them  
variant_imp(mixed left, mixed right)  Performs a bitwise implication on two variants  
variant_index_get(object variant, mixed index1 [, mixed index2 [, ...]])  Get the value of a multi dimensional array property  
variant_int(mixed left)  Returns the integer portion of a variant  
variant_mod(mixed left, mixed right)  Divides two variants and returns only the remainder  
variant_mul(mixed left, mixed right)  multiplies the values of the two variants and returns the result  
variant_neg(mixed left)  Performs logical negation on a variant  
variant_not(mixed left)  Performs bitwise not negation on a variant  
variant_or(mixed left, mixed right)  Performs a logical disjunction on two variants  
variant_pow(mixed left, mixed right)  Returns the result of performing the power function with two variants  
variant_round(mixed left, int decimals)  Rounds a variant to the specified number of decimal places  
variant_set(object variant, mixed value)  Assigns a new value for a variant object (like "set" in VB)  
variant_set_type(object variant, int type)  Convert a variant into another type.  Variant is modified "in-place"  
variant_sub(mixed left, mixed right)  subjects the value of the right variant from the left variant value and returns the result  
variant_xor(mixed left, mixed right)  Performs a logical exclusion on two variants  
version_compare(string ver1, string ver2 [, string oper])  Compares two "PHP-standardized" version number strings  
vfprintf(resource stream, string format, array args)  Output a formatted string into a stream  
virtual(string filename)  Perform an Apache sub-request  
void Reflection_Property::setValue(stdclass object, mixed value)  Sets this property's value  
vprintf(string format, array args)  Output a formatted string  
vsprintf(string format, array args)  Return a formatted string  
wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])  Serializes given variables and adds them to packet given by packet_id  
wddx_deserialize(mixed packet)   Deserializes given packet and returns a PHP value  
wddx_packet_end(int packet_id)  Ends specified WDDX packet and returns the string containing the packet  
wddx_packet_start([string comment])  Starts a WDDX packet with optional comment and returns the packet id  
wddx_serialize_value(mixed var [, string comment])  Creates a new packet and serializes the given value  
wddx_serialize_vars(mixed var_name [, mixed ...])  Creates a new packet and serializes given variables into a struct  
wordwrap(string str [, int width [, string break [, boolean cut]]])  Wraps buffer to selected number of characters using string break char  
xml_error_string(int code)  Get XML parser error string  
xml_get_current_byte_index(resource parser)   Get current byte index for an XML parser  
xml_get_current_column_number(resource parser)  Get current column number for an XML parser  
xml_get_current_line_number(resource parser)   Get current line number for an XML parser  
xml_get_error_code(resource parser)   Get XML parser error code  
xml_parse(resource parser, string data [, int isFinal])   Start parsing an XML document  
xml_parse_into_struct(resource parser, string data, array &struct, array &index)   Parsing a XML document  
xml_parser_create([string encoding])   Create an XML parser  
xml_parser_create_ns([string encoding [, string sep]])   Create an XML parser  
xml_parser_free(resource parser)   Free an XML parser  
xml_parser_get_option(resource parser, int option)   Get options from an XML parser  
xml_parser_set_option(resource parser, int option, mixed value)   Set options in an XML parser  
xml_set_character_data_handler(resource parser, string hdl)   Set up character data handler  
xml_set_default_handler(resource parser, string hdl)   Set up default handler  
xml_set_element_handler(resource parser, string shdl, string ehdl)   Set up start and end element handlers  
xml_set_end_namespace_decl_handler(resource parser, string hdl)   Set up character data handler  
xml_set_external_entity_ref_handler(resource parser, string hdl)   Set up external entity reference handler  
xml_set_notation_decl_handler(resource parser, string hdl)   Set up notation declaration handler  
xml_set_object(resource parser, object &obj)   Set up object which should be used for callbacks  
xml_set_processing_instruction_handler(resource parser, string hdl)   Set up processing instruction (PI) handler  
xml_set_start_namespace_decl_handler(resource parser, string hdl)   Set up character data handler  
xml_set_unparsed_entity_decl_handler(resource parser, string hdl)   Set up unparsed entity declaration handler  
xmlrpc_decode(string xml [, string encoding])  Decodes XML into native PHP types  
xmlrpc_decode_request(string xml, string& method [, string encoding])  Decodes XML into native PHP types  
xmlrpc_encode(mixed value)  Generates XML for a PHP value  
xmlrpc_encode_request(string method, mixed params)  Generates XML for a method request  
xmlrpc_get_type(mixed value)  Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings  
xmlrpc_is_fault(array)  Determines if an array value represents an XMLRPC fault.  
xmlrpc_parse_method_descriptions(string xml)  Decodes XML into a list of method descriptions  
xmlrpc_server_add_introspection_data(resource server, array desc)  Adds introspection documentation   
xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])  Parses XML requests and call methods  
xmlrpc_server_create(void)  Creates an xmlrpc server  
xmlrpc_server_destroy(resource server)  Destroys server resources  
xmlrpc_server_register_introspection_callback(resource server, string function)  Register a PHP function to generate documentation  
xmlrpc_server_register_method(resource server, string method_name, string function)  Register a PHP function to handle method matching method_name  
xmlrpc_set_type(string value, string type)  Sets xmlrpc type, base64 or datetime, for a PHP string value  
xsl_xsltprocessor_get_parameter(string namespace, string name);  
xsl_xsltprocessor_import_stylesheet(node index);  
xsl_xsltprocessor_remove_parameter(string namespace, string name);  
xsl_xsltprocessor_set_parameter(string namespace, string name, string value);  
xsl_xsltprocessor_transform_to_doc(node doc [,boolean clone]);  
xsl_xsltprocessor_transform_to_uri(node doc, string uri [,boolean clone]);  
xsl_xsltprocessor_transform_to_xml(node doc [,boolean clone]);  
yaz_addinfo(resource id)  Return additional info for last error (empty string if none)  
yaz_ccl_conf(resource id, array package)  Configure CCL package  
yaz_ccl_parse(resource id, string query, array res)  Parse a CCL query  
yaz_close(resource id)  Destory and close target  
yaz_connect(string zurl [, array options])  Create target with given zurl. Returns positive id if successful.  
yaz_database (resource id, string databases)  Specify the databases within a session  
yaz_element(resource id, string elementsetname)  Set Element-Set-Name for retrieval  
yaz_errno(resource id)  Return last error number (>0 for bib-1 diagnostic, <0 for other error, 0 for no error  
yaz_error(resource id)  Return last error message  
yaz_es(resource id, string type, array package)  Sends Extended Services Request  
yaz_es_result(resource id)  Inspects Extended Services Result  
yaz_get_option(resource id, string name)  Set Option(s) for connection  
yaz_hits(resource id)  Return number of hits (result count) for last search  
yaz_itemorder(resource id, array package)  Sends Item Order request  
yaz_present(resource id)  Retrieve records  
yaz_range(resource id, int start, int number)  Set result set start point and number of records to request  
yaz_record(resource id, int pos, string type)  Return record information at given result set position  
yaz_scan(resource id, type, query [, flags])  Sends Scan Request  
yaz_scan_result(resource id [, array options])  Inspects Scan Result  
yaz_schema(resource id, string schema)  Set Schema for retrieval  
yaz_search(resource id, string type, string query)  Specify query of type for search - returns true if successful  
yaz_set_option(resource id, mixed options)  Set Option(s) for connection  
yaz_sort(resource id, string sortspec)  Set result set sorting criteria  
yaz_syntax(resource id, string syntax)  Set record syntax for retrieval  
yaz_wait([array options])  Process events.  
yp_all(string domain, string map, string callback)  Traverse the map and call a function on each entry  
yp_cat(string domain, string map)  Return an array containing the entire map  
yp_err_string(int errorcode)  Returns the corresponding error string for the given error code  
yp_errno()  Returns the error code from the last call or 0 if no error occured  
yp_first(string domain, string map)  Returns the first key as array with $var[$key] and the the line as the value  
yp_get_default_domain(void)  Returns the domain or false  
yp_master(string domain, string map)  Returns the machine name of the master  
yp_match(string domain, string map, string key)  Returns the matched line or false  
yp_next(string domain, string map, string key)  Returns an array with $var[$key] and the the line as the value  
yp_order(string domain, string map)              Returns the order number or false  
zend_logo_guid(void)  Return the special ID used to request the Zend logo in phpinfo screens 
zend_version(void)  Get the version of the Zend Engine  
zlib_get_coding_type(void)  Returns the coding type used for output compression  
