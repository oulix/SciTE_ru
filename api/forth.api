->VARIABLE
->VECT
-TRAILING
*/
*/MOD
/MOD
?DUP
<>
>R
0<
0=
0<>
1+
1+!
1-
2+
2-
2/
2*
2>R ( x1 x2 -- ) ( R:  -- x1 x2 ) Перемещает пару-ячеек x1 x2 на стек возвратов. Семантически эквивалентно SWAP >R >R
2@
2!
2R@
2DROP
2DUP
2OVER ( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 ) Копирует пару-ячеек x1 x2 на вершину стека
2R> ( -- x1 x2 )  ( R:  x1 x2 -- ) Перемещает пару-ячеек x1 x2 со стека возвратов. Семантически эквивалентно  R> R> SWAP
2ROT
2SWAP
?DUP ( x -- 0 | x x ) дублирует x, если оно ненулевое.
ABS
ABORT
AGAIN
ALLOT
ASCIIZ> ( az -- a u ) подсчитывает длину нуль-строки и разделяет адрес нуль-строки на адрес и счетчик, т. е. преобразует нуль-строку в au-строку.
ASLO
AND
ASCIIZ>
BEGIN
BL
C@ ( c-addr -- char ) Выбирает символ, сохраненный в c-addr. Когда размер ячейки больше чем размер символа, все неиспользованные старшие биты - нули
C! ( char c-addr -- ) сохраняет char в c-addr. Когда размер символа меньше чем размер ячейки, переданы только младшие биты, соответствующие размеру символа
C.
C,
CATCH
CELL+
CELLS
CHAR+
CMOVE ( c-addr1 c-addr2 u -- )если u больше чем нуль, копирует u последовательных символов из области данных начинающейсяс c-addr1 в область, начинающуюся с c-addr2, выполняя посимвольно с наименьших адресов к наибольшим.
CMOVE> ( c-addr1 c-addr2 u -- )если u больше чем нуль, копирует u последовательных символов из области данных начинающейся\n                с c-addr1 в область, начинающуюся с c-addr2, выполняя посимвольно с наибольших адресов к наименьшим.
COMPARE ( a1 u1 a2 u2 -- flag ) возвpащает 0, если сpавнение истинно
CONCAT
CONSTANT ( x "<spaces>name" -- ) пропускает ведущие разделители пробелы, выделяет name, ограниченное пробелом. Создает определение для name с семантикой выполнения - размещает x на стеке
COUNT ( a -- a u ), которое разделяет адрес строки со счетчиком на адрес и счетчик
CREATE
CURRENT
D+
D<
D>S
D0=
DABS
DECIMAL
DEFINITIONS
DNEGATE
DOES>
DROP
DUP
ELSE
ERASE
EXECUTE
EXIT (Интерпретация: Семантика интерпретации для этого слова не определена.\n         Выполнение: ( -- ) ( R: nest-sys -- ) Возвращает управление на вызывающее определение, определенное nest-sys. Перед выполнением EXIT в пределах do-loop, программа должна удалить параметры управления циклом, выполняя UNLOOP.
FALSE
FILL
FIND
FM/MOD
FORTH
GET-CURRENT
GET-ORDER
ICONS
IF
INVERT
KEY
KEY?
LEAVE
LSHIFT
HERE
HEX
M*
MAX ( n1 n2 -- n3 ) n3 большее из n1 и n2
MIN ( n1 n2 -- n3 ) n3 меньшее из n1 и n2
MOD
MOVE ( addr1 addr2 u -- ) Если u больше чем нуль, копирует содержимое u последовательных адресуемых элементов из addr1 в u последовательных адресуемых элементов в addr2\nПосле завершения MOVE, u последовательных адресуемых элементов в addr2 содержат тоже, что u последовательных адресуемых элементов в addr1 содержали перед перемещением
NEGATE
NIP ( x1 x2 -- x2 ) Удаляет первый элемент ниже вершины стека
ONLY
OR
ORDER
OVER
PAD ( -- c-addr ) c-addr - адрес временной области, которая может использоваться с целью хранения данных для промежуточной обработки
PAUSE
POSTPONE (Интерпретация: Семантика интерпретации для этого слова не определена.\n                     Компиляция: ( "<spaces>name" -- ) Пропускает ведущие разделители пробелы. Выделяет name, ограниченное пробелом. Находит name. Добавляет семантику компиляции name в текущее определение. Неопределенная ситуация существует, если name не найдено)
PREVIOUS
R>
R@
RDROP
RECURSE
REPEAT
ROT ( x1 x2 x3 -- x2 x3 x1 ) Вращает три верхних элемента стека
RP@
RP!
RSHIFT
S>D
S>ZALLOC ( a u -- az ) берет au-строку, выделяет память и записывает туда эту строку с нулем в конце, после чего возвращает адрес новой строки. Счетчик не хранится.
SEARCH
SEARCH-WORDLIST
SET-CURRENT
SET-ORDER
SFIND
SM/REM
SP@
SP!
SPACE
SPACES
SWAP
THEN
THROW
TRUE
TYPE
U/
U<
U>D
UM*
UM/MOD
UMOD
UNTIL
VALUE
VARIABLE
VECT
VOCABULARY
VOC-NAME
W@
W!
W.
WHILE
WORDS
XOR

